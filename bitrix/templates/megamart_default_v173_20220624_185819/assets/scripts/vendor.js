(function () {
  'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;

    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var waves = createCommonjsModule(function (module, exports) {

    (function (window, factory) {
      // to root via `this`.

      {
          module.exports = factory.call(window);
        }
    })(_typeof(commonjsGlobal) === 'object' ? commonjsGlobal : commonjsGlobal, function () {

      var Waves = Waves || {};
      var $$ = document.querySelectorAll.bind(document);
      var toString = Object.prototype.toString;
      var isTouchAvailable = ('ontouchstart' in window); // Find exact position of element

      function isWindow(obj) {
        return obj !== null && obj === obj.window;
      }

      function getWindow(elem) {
        return isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
      }

      function isObject(value) {
        var type = _typeof(value);

        return type === 'function' || type === 'object' && !!value;
      }

      function isDOMNode(obj) {
        return isObject(obj) && obj.nodeType > 0;
      }

      function getWavesElements(nodes) {
        var stringRepr = toString.call(nodes);

        if (stringRepr === '[object String]') {
          return $$(nodes);
        } else if (isObject(nodes) && /^\[object (Array|HTMLCollection|NodeList|Object)\]$/.test(stringRepr) && nodes.hasOwnProperty('length')) {
          return nodes;
        } else if (isDOMNode(nodes)) {
          return [nodes];
        }

        return [];
      }

      function offset(elem) {
        var docElem,
            win,
            box = {
          top: 0,
          left: 0
        },
            doc = elem && elem.ownerDocument;
        docElem = doc.documentElement;

        if (_typeof(elem.getBoundingClientRect) !== ( "undefined" )) {
          box = elem.getBoundingClientRect();
        }

        win = getWindow(doc);
        return {
          top: box.top + win.pageYOffset - docElem.clientTop,
          left: box.left + win.pageXOffset - docElem.clientLeft
        };
      }

      function convertStyle(styleObj) {
        var style = '';

        for (var prop in styleObj) {
          if (styleObj.hasOwnProperty(prop)) {
            style += prop + ':' + styleObj[prop] + ';';
          }
        }

        return style;
      }

      var Effect = {
        // Effect duration
        duration: 750,
        // Effect delay (check for scroll before showing effect)
        delay: 200,
        show: function show(e, element, velocity) {
          // Disable right click
          if (e.button === 2) {
            return false;
          }

          element = element || this; // Create ripple

          var ripple = document.createElement('div');
          ripple.className = 'waves-ripple waves-rippling';
          element.appendChild(ripple); // Get click coordinate and element width

          var pos = offset(element);
          var relativeY = 0;
          var relativeX = 0; // Support for touch devices

          if ('touches' in e && e.touches.length) {
            relativeY = e.touches[0].pageY - pos.top;
            relativeX = e.touches[0].pageX - pos.left;
          } //Normal case
          else {
              relativeY = e.pageY - pos.top;
              relativeX = e.pageX - pos.left;
            } // Support for synthetic events


          relativeX = relativeX >= 0 ? relativeX : 0;
          relativeY = relativeY >= 0 ? relativeY : 0;
          var scale = 'scale(' + element.clientWidth / 100 * 3 + ')';
          var translate = 'translate(0,0)';

          if (velocity) {
            translate = 'translate(' + velocity.x + 'px, ' + velocity.y + 'px)';
          } // Attach data to element


          ripple.setAttribute('data-hold', Date.now());
          ripple.setAttribute('data-x', relativeX);
          ripple.setAttribute('data-y', relativeY);
          ripple.setAttribute('data-scale', scale);
          ripple.setAttribute('data-translate', translate); // Set ripple position

          var rippleStyle = {
            top: relativeY + 'px',
            left: relativeX + 'px'
          };
          ripple.classList.add('waves-notransition');
          ripple.setAttribute('style', convertStyle(rippleStyle));
          ripple.classList.remove('waves-notransition'); // Scale the ripple

          rippleStyle['-webkit-transform'] = scale + ' ' + translate;
          rippleStyle['-moz-transform'] = scale + ' ' + translate;
          rippleStyle['-ms-transform'] = scale + ' ' + translate;
          rippleStyle['-o-transform'] = scale + ' ' + translate;
          rippleStyle.transform = scale + ' ' + translate;
          rippleStyle.opacity = '1';
          var duration = e.type === 'mousemove' ? 2500 : Effect.duration;
          rippleStyle['-webkit-transition-duration'] = duration + 'ms';
          rippleStyle['-moz-transition-duration'] = duration + 'ms';
          rippleStyle['-o-transition-duration'] = duration + 'ms';
          rippleStyle['transition-duration'] = duration + 'ms';
          ripple.setAttribute('style', convertStyle(rippleStyle));
        },
        hide: function hide(e, element) {
          element = element || this;
          var ripples = element.getElementsByClassName('waves-rippling');

          for (var i = 0, len = ripples.length; i < len; i++) {
            removeRipple(e, element, ripples[i]);
          }

          if (isTouchAvailable) {
            element.removeEventListener('touchend', Effect.hide);
            element.removeEventListener('touchcancel', Effect.hide);
          }

          element.removeEventListener('mouseup', Effect.hide);
          element.removeEventListener('mouseleave', Effect.hide);
        }
      };
      /**
       * Collection of wrapper for HTML element that only have single tag
       * like <input> and <img>
       */

      var TagWrapper = {
        // Wrap <input> tag so it can perform the effect
        input: function input(element) {
          var parent = element.parentNode; // If input already have parent just pass through

          if (parent.tagName.toLowerCase() === 'i' && parent.classList.contains('waves-effect')) {
            return;
          } // Put element class and style to the specified parent


          var wrapper = document.createElement('i');
          wrapper.className = element.className + ' waves-input-wrapper';
          element.className = 'waves-button-input'; // Put element as child

          parent.replaceChild(wrapper, element);
          wrapper.appendChild(element); // Apply element color and background color to wrapper

          var elementStyle = window.getComputedStyle(element, null);
          var color = elementStyle.color;
          var backgroundColor = elementStyle.backgroundColor;
          wrapper.setAttribute('style', 'color:' + color + ';background:' + backgroundColor);
          element.setAttribute('style', 'background-color:rgba(0,0,0,0);');
        },
        // Wrap <img> tag so it can perform the effect
        img: function img(element) {
          var parent = element.parentNode; // If input already have parent just pass through

          if (parent.tagName.toLowerCase() === 'i' && parent.classList.contains('waves-effect')) {
            return;
          } // Put element as child


          var wrapper = document.createElement('i');
          parent.replaceChild(wrapper, element);
          wrapper.appendChild(element);
        }
      };
      /**
       * Hide the effect and remove the ripple. Must be
       * a separate function to pass the JSLint...
       */

      function removeRipple(e, el, ripple) {
        // Check if the ripple still exist
        if (!ripple) {
          return;
        }

        ripple.classList.remove('waves-rippling');
        var relativeX = ripple.getAttribute('data-x');
        var relativeY = ripple.getAttribute('data-y');
        var scale = ripple.getAttribute('data-scale');
        var translate = ripple.getAttribute('data-translate'); // Get delay beetween mousedown and mouse leave

        var diff = Date.now() - Number(ripple.getAttribute('data-hold'));
        var delay = 350 - diff;

        if (delay < 0) {
          delay = 0;
        }

        if (e.type === 'mousemove') {
          delay = 150;
        } // Fade out ripple after delay


        var duration = e.type === 'mousemove' ? 2500 : Effect.duration;
        setTimeout(function () {
          var style = {
            top: relativeY + 'px',
            left: relativeX + 'px',
            opacity: '0',
            // Duration
            '-webkit-transition-duration': duration + 'ms',
            '-moz-transition-duration': duration + 'ms',
            '-o-transition-duration': duration + 'ms',
            'transition-duration': duration + 'ms',
            '-webkit-transform': scale + ' ' + translate,
            '-moz-transform': scale + ' ' + translate,
            '-ms-transform': scale + ' ' + translate,
            '-o-transform': scale + ' ' + translate,
            'transform': scale + ' ' + translate
          };
          ripple.setAttribute('style', convertStyle(style));
          setTimeout(function () {
            try {
              el.removeChild(ripple);
            } catch (e) {
              return false;
            }
          }, duration);
        }, delay);
      }
      /**
       * Disable mousedown event for 500ms during and after touch
       */


      var TouchHandler = {
        /* uses an integer rather than bool so there's no issues with
         * needing to clear timeouts if another touch event occurred
         * within the 500ms. Cannot mouseup between touchstart and
         * touchend, nor in the 500ms after touchend. */
        touches: 0,
        allowEvent: function allowEvent(e) {
          var allow = true;

          if (/^(mousedown|mousemove)$/.test(e.type) && TouchHandler.touches) {
            allow = false;
          }

          return allow;
        },
        registerEvent: function registerEvent(e) {
          var eType = e.type;

          if (eType === 'touchstart') {
            TouchHandler.touches += 1; // push
          } else if (/^(touchend|touchcancel)$/.test(eType)) {
            setTimeout(function () {
              if (TouchHandler.touches) {
                TouchHandler.touches -= 1; // pop after 500ms
              }
            }, 500);
          }
        }
      };
      /**
       * Delegated click handler for .waves-effect element.
       * returns null when .waves-effect element not in "click tree"
       */

      function getWavesEffectElement(e) {
        if (TouchHandler.allowEvent(e) === false) {
          return null;
        }

        var element = null;
        var target = e.target || e.srcElement;

        while (target.parentElement) {
          if (!(target instanceof SVGElement) && target.classList.contains('waves-effect')) {
            element = target;
            break;
          }

          target = target.parentElement;
        }

        return element;
      }
      /**
       * Bubble the click and show effect if .waves-effect elem was found
       */


      function showEffect(e) {
        // Disable effect if element has "disabled" property on it
        // In some cases, the event is not triggered by the current element
        // if (e.target.getAttribute('disabled') !== null) {
        //     return;
        // }
        var element = getWavesEffectElement(e);

        if (element !== null) {
          // Make it sure the element has either disabled property, disabled attribute or 'disabled' class
          if (element.disabled || element.getAttribute('disabled') || element.classList.contains('disabled')) {
            return;
          }

          TouchHandler.registerEvent(e);

          if (e.type === 'touchstart' && Effect.delay) {
            var hidden = false;
            var timer = setTimeout(function () {
              timer = null;
              Effect.show(e, element);
            }, Effect.delay);

            var hideEffect = function hideEffect(hideEvent) {
              // if touch hasn't moved, and effect not yet started: start effect now
              if (timer) {
                clearTimeout(timer);
                timer = null;
                Effect.show(e, element);
              }

              if (!hidden) {
                hidden = true;
                Effect.hide(hideEvent, element);
              }

              removeListeners();
            };

            var touchMove = function touchMove(moveEvent) {
              if (timer) {
                clearTimeout(timer);
                timer = null;
              }

              hideEffect(moveEvent);
              removeListeners();
            };

            element.addEventListener('touchmove', touchMove, false);
            element.addEventListener('touchend', hideEffect, false);
            element.addEventListener('touchcancel', hideEffect, false);

            var removeListeners = function removeListeners() {
              element.removeEventListener('touchmove', touchMove);
              element.removeEventListener('touchend', hideEffect);
              element.removeEventListener('touchcancel', hideEffect);
            };
          } else {
            Effect.show(e, element);

            if (isTouchAvailable) {
              element.addEventListener('touchend', Effect.hide, false);
              element.addEventListener('touchcancel', Effect.hide, false);
            }

            element.addEventListener('mouseup', Effect.hide, false);
            element.addEventListener('mouseleave', Effect.hide, false);
          }
        }
      }

      Waves.init = function (options) {
        var body = document.body;
        options = options || {};

        if ('duration' in options) {
          Effect.duration = options.duration;
        }

        if ('delay' in options) {
          Effect.delay = options.delay;
        }

        if (isTouchAvailable) {
          body.addEventListener('touchstart', showEffect, false);
          body.addEventListener('touchcancel', TouchHandler.registerEvent, false);
          body.addEventListener('touchend', TouchHandler.registerEvent, false);
        }

        body.addEventListener('mousedown', showEffect, false);
      };
      /**
       * Attach Waves to dynamically loaded inputs, or add .waves-effect and other
       * waves classes to a set of elements. Set drag to true if the ripple mouseover
       * or skimming effect should be applied to the elements.
       */


      Waves.attach = function (elements, classes) {
        elements = getWavesElements(elements);

        if (toString.call(classes) === '[object Array]') {
          classes = classes.join(' ');
        }

        classes = classes ? ' ' + classes : '';
        var element, tagName;

        for (var i = 0, len = elements.length; i < len; i++) {
          element = elements[i];
          tagName = element.tagName.toLowerCase();

          if (['input', 'img'].indexOf(tagName) !== -1) {
            TagWrapper[tagName](element);
            element = element.parentElement;
          }

          if (element.className.indexOf('waves-effect') === -1) {
            element.className += ' waves-effect' + classes;
          }
        }
      };
      /**
       * Cause a ripple to appear in an element via code.
       */


      Waves.ripple = function (elements, options) {
        elements = getWavesElements(elements);
        var elementsLen = elements.length;
        options = options || {};
        options.wait = options.wait || 0;
        options.position = options.position || null; // default = centre of element

        if (elementsLen) {
          var element,
              pos,
              off,
              centre = {},
              i = 0;
          var mousedown = {
            type: 'mousedown',
            button: 1
          };

          var hideRipple = function hideRipple(mouseup, element) {
            return function () {
              Effect.hide(mouseup, element);
            };
          };

          for (; i < elementsLen; i++) {
            element = elements[i];
            pos = options.position || {
              x: element.clientWidth / 2,
              y: element.clientHeight / 2
            };
            off = offset(element);
            centre.x = off.left + pos.x;
            centre.y = off.top + pos.y;
            mousedown.pageX = centre.x;
            mousedown.pageY = centre.y;
            Effect.show(mousedown, element);

            if (options.wait >= 0 && options.wait !== null) {
              var mouseup = {
                type: 'mouseup',
                button: 1
              };
              setTimeout(hideRipple(mouseup, element), options.wait);
            }
          }
        }
      };
      /**
       * Remove all ripples from an element.
       */


      Waves.calm = function (elements) {
        elements = getWavesElements(elements);
        var mouseup = {
          type: 'mouseup',
          button: 1
        };

        for (var i = 0, len = elements.length; i < len; i++) {
          Effect.hide(mouseup, elements[i]);
        }
      };
      /**
       * Deprecated API fallback
       */


      Waves.displayEffect = function (options) {
        console.error('Waves.displayEffect() has been deprecated and will be removed in future version. Please use Waves.init() to initialize Waves effect');
        Waves.init(options);
      };

      return Waves;
    });
  });

  window.Waves = waves;

  var jquery = createCommonjsModule(function (module) {
    /*!
     * jQuery JavaScript Library v3.6.0
     * https://jquery.com/
     *
     * Includes Sizzle.js
     * https://sizzlejs.com/
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2021-03-02T17:08Z
     */
    (function (global, factory) {

      {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ? factory(global, true) : function (w) {
          if (!w.document) {
            throw new Error("jQuery requires a window with a document");
          }

          return factory(w);
        };
      } // Pass this if window is not defined yet

    })(typeof window !== "undefined" ? window : commonjsGlobal, function (window, noGlobal) {

      var arr = [];
      var getProto = Object.getPrototypeOf;
      var _slice = arr.slice;
      var flat = arr.flat ? function (array) {
        return arr.flat.call(array);
      } : function (array) {
        return arr.concat.apply([], array);
      };
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};

      var isFunction = function isFunction(obj) {
        // Support: Chrome <=57, Firefox <=52
        // In some browsers, typeof returns "function" for HTML <object> elements
        // (i.e., `typeof document.createElement( "object" ) === "function"`).
        // We don't want to classify *any* DOM node as a function.
        // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
        // Plus for old WebKit, typeof returns "function" for HTML collections
        // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
        return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
      };

      var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
      };

      var document = window.document;
      var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
      };

      function DOMEval(code, node, doc) {
        doc = doc || document;
        var i,
            val,
            script = doc.createElement("script");
        script.text = code;

        if (node) {
          for (i in preservedScriptAttributes) {
            // Support: Firefox 64+, Edge 18+
            // Some browsers don't support the "nonce" property on scripts.
            // On the other hand, just using `getAttribute` is not enough as
            // the `nonce` attribute is reset to an empty string whenever it
            // becomes browsing-context connected.
            // See https://github.com/whatwg/html/issues/2369
            // See https://html.spec.whatwg.org/#nonce-attributes
            // The `node.getAttribute` check was added for the sake of
            // `jQuery.globalEval` so that it can fake a nonce-containing node
            // via an object.
            val = node[i] || node.getAttribute && node.getAttribute(i);

            if (val) {
              script.setAttribute(i, val);
            }
          }
        }

        doc.head.appendChild(script).parentNode.removeChild(script);
      }

      function toType(obj) {
        if (obj == null) {
          return obj + "";
        } // Support: Android <=2.3 only (functionish RegExp)


        return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
      }
      /* global Symbol */
      // Defining this global in .eslintrc.json would create a danger of using the global
      // unguarded in another place, it seems safer to define global only for this module


      var version = "3.6.0",
          // Define a local copy of jQuery
      jQuery = function jQuery(selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init(selector, context);
      };

      jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
        constructor: jQuery,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function toArray() {
          return _slice.call(this);
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function get(num) {
          // Return all the elements in a clean array
          if (num == null) {
            return _slice.call(this);
          } // Return just the one element from the set


          return num < 0 ? this[num + this.length] : this[num];
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function pushStack(elems) {
          // Build a new jQuery matched element set
          var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

          ret.prevObject = this; // Return the newly-formed element set

          return ret;
        },
        // Execute a callback for every element in the matched set.
        each: function each(callback) {
          return jQuery.each(this, callback);
        },
        map: function map(callback) {
          return this.pushStack(jQuery.map(this, function (elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        slice: function slice() {
          return this.pushStack(_slice.apply(this, arguments));
        },
        first: function first() {
          return this.eq(0);
        },
        last: function last() {
          return this.eq(-1);
        },
        even: function even() {
          return this.pushStack(jQuery.grep(this, function (_elem, i) {
            return (i + 1) % 2;
          }));
        },
        odd: function odd() {
          return this.pushStack(jQuery.grep(this, function (_elem, i) {
            return i % 2;
          }));
        },
        eq: function eq(i) {
          var len = this.length,
              j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function end() {
          return this.prevObject || this.constructor();
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
      };

      jQuery.extend = jQuery.fn.extend = function () {
        var options,
            name,
            src,
            copy,
            copyIsArray,
            clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false; // Handle a deep copy situation

        if (typeof target === "boolean") {
          deep = target; // Skip the boolean and the target

          target = arguments[i] || {};
          i++;
        } // Handle case when target is a string or something (possible in deep copy)


        if (_typeof(target) !== "object" && !isFunction(target)) {
          target = {};
        } // Extend jQuery itself if only one argument is passed


        if (i === length) {
          target = this;
          i--;
        }

        for (; i < length; i++) {
          // Only deal with non-null/undefined values
          if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
              copy = options[name]; // Prevent Object.prototype pollution
              // Prevent never-ending loop

              if (name === "__proto__" || target === copy) {
                continue;
              } // Recurse if we're merging plain objects or arrays


              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                src = target[name]; // Ensure proper type for the source value

                if (copyIsArray && !Array.isArray(src)) {
                  clone = [];
                } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                  clone = {};
                } else {
                  clone = src;
                }

                copyIsArray = false; // Never move original objects, clone them

                target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        } // Return the modified object


        return target;
      };

      jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function error(msg) {
          throw new Error(msg);
        },
        noop: function noop() {},
        isPlainObject: function isPlainObject(obj) {
          var proto, Ctor; // Detect obvious negatives
          // Use toString instead of jQuery.type to catch host objects

          if (!obj || toString.call(obj) !== "[object Object]") {
            return false;
          }

          proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

          if (!proto) {
            return true;
          } // Objects with prototype are plain iff they were constructed by a global Object function


          Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
          return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function isEmptyObject(obj) {
          var name;

          for (name in obj) {
            return false;
          }

          return true;
        },
        // Evaluates a script in a provided context; falls back to the global one
        // if not specified.
        globalEval: function globalEval(code, options, doc) {
          DOMEval(code, {
            nonce: options && options.nonce
          }, doc);
        },
        each: function each(obj, callback) {
          var length,
              i = 0;

          if (isArrayLike(obj)) {
            length = obj.length;

            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          }

          return obj;
        },
        // results is for internal usage only
        makeArray: function makeArray(arr, results) {
          var ret = results || [];

          if (arr != null) {
            if (isArrayLike(Object(arr))) {
              jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
            } else {
              push.call(ret, arr);
            }
          }

          return ret;
        },
        inArray: function inArray(elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function merge(first, second) {
          var len = +second.length,
              j = 0,
              i = first.length;

          for (; j < len; j++) {
            first[i++] = second[j];
          }

          first.length = i;
          return first;
        },
        grep: function grep(elems, callback, invert) {
          var callbackInverse,
              matches = [],
              i = 0,
              length = elems.length,
              callbackExpect = !invert; // Go through the array, only saving the items
          // that pass the validator function

          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);

            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }

          return matches;
        },
        // arg is for internal usage only
        map: function map(elems, callback, arg) {
          var length,
              value,
              i = 0,
              ret = []; // Go through the array, translating each of the items to their new values

          if (isArrayLike(elems)) {
            length = elems.length;

            for (; i < length; i++) {
              value = callback(elems[i], i, arg);

              if (value != null) {
                ret.push(value);
              }
            } // Go through every key on the object,

          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);

              if (value != null) {
                ret.push(value);
              }
            }
          } // Flatten any nested arrays


          return flat(ret);
        },
        // A global GUID counter for objects
        guid: 1,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
      });

      if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
      } // Populate the class2type map


      jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      });

      function isArrayLike(obj) {
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length,
            type = toType(obj);

        if (isFunction(obj) || isWindow(obj)) {
          return false;
        }

        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
      }

      var Sizzle =
      /*!
       * Sizzle CSS Selector Engine v2.3.6
       * https://sizzlejs.com/
       *
       * Copyright JS Foundation and other contributors
       * Released under the MIT license
       * https://js.foundation/
       *
       * Date: 2021-02-16
       */
      function (window) {
        var i,
            support,
            Expr,
            getText,
            isXML,
            tokenize,
            compile,
            select,
            outermostContext,
            sortInput,
            hasDuplicate,
            // Local document vars
        setDocument,
            document,
            docElem,
            documentIsHTML,
            rbuggyQSA,
            rbuggyMatches,
            matches,
            contains,
            // Instance-specific data
        expando = "sizzle" + 1 * new Date(),
            preferredDoc = window.document,
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),
            nonnativeSelectorCache = createCache(),
            sortOrder = function sortOrder(a, b) {
          if (a === b) {
            hasDuplicate = true;
          }

          return 0;
        },
            // Instance methods
        hasOwn = {}.hasOwnProperty,
            arr = [],
            pop = arr.pop,
            pushNative = arr.push,
            push = arr.push,
            slice = arr.slice,
            // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function indexOf(list, elem) {
          var i = 0,
              len = list.length;

          for (; i < len; i++) {
            if (list[i] === elem) {
              return i;
            }
          }

          return -1;
        },
            booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",
            // Regular expressions
        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]",
            // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
            // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
        // or strings [capture 3 or capture 4]"
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
            pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
        "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
        ".*" + ")\\)|)",
            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + "+", "g"),
            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
            rdescend = new RegExp(whitespace + "|>"),
            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),
            matchExpr = {
          "ID": new RegExp("^#(" + identifier + ")"),
          "CLASS": new RegExp("^\\.(" + identifier + ")"),
          "TAG": new RegExp("^(" + identifier + "|[*])"),
          "ATTR": new RegExp("^" + attributes),
          "PSEUDO": new RegExp("^" + pseudos),
          "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
          "bool": new RegExp("^(?:" + booleans + ")$", "i"),
          // For use in libraries implementing .is()
          // We use this for POS matching in `select`
          "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        },
            rhtml = /HTML$/i,
            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,
            rnative = /^[^{]+\{\s*\[native \w/,
            // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            rsibling = /[+~]/,
            // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
            funescape = function funescape(escape, nonHex) {
          var high = "0x" + escape.slice(1) - 0x10000;
          return nonHex ? // Strip the backslash prefix from a non-hex escape sequence
          nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point
          // Support: IE <=11+
          // For values outside the Basic Multilingual Plane (BMP), manually construct a
          // surrogate pair
          high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
        },
            // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
            fcssescape = function fcssescape(ch, asCodePoint) {
          if (asCodePoint) {
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if (ch === "\0") {
              return "\uFFFD";
            } // Control characters and (dependent upon position) numbers get escaped as code points


            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          } // Other potentially-special ASCII characters get backslash-escaped


          return "\\" + ch;
        },
            // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function unloadHandler() {
          setDocument();
        },
            inDisabledFieldset = addCombinator(function (elem) {
          return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
        }, {
          dir: "parentNode",
          next: "legend"
        }); // Optimize for push.apply( _, NodeList )


        try {
          push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
          // Detect silently failing push.apply
          // eslint-disable-next-line no-unused-expressions

          arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
          push = {
            apply: arr.length ? // Leverage slice if possible
            function (target, els) {
              pushNative.apply(target, slice.call(els));
            } : // Support: IE<9
            // Otherwise append directly
            function (target, els) {
              var j = target.length,
                  i = 0; // Can't trust NodeList.length

              while (target[j++] = els[i++]) {}

              target.length = j - 1;
            }
          };
        }

        function Sizzle(selector, context, results, seed) {
          var m,
              i,
              elem,
              nid,
              match,
              groups,
              newSelector,
              newContext = context && context.ownerDocument,
              // nodeType defaults to 9, since context defaults to document
          nodeType = context ? context.nodeType : 9;
          results = results || []; // Return early from calls with invalid selector or context

          if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
          } // Try to shortcut find operations (as opposed to filters) in HTML documents


          if (!seed) {
            setDocument(context);
            context = context || document;

            if (documentIsHTML) {
              // If the selector is sufficiently simple, try using a "get*By*" DOM method
              // (excepting DocumentFragment context, where the methods don't exist)
              if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                // ID selector
                if (m = match[1]) {
                  // Document context
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      // Support: IE, Opera, Webkit
                      // TODO: identify versions
                      // getElementById can match elements by name instead of ID
                      if (elem.id === m) {
                        results.push(elem);
                        return results;
                      }
                    } else {
                      return results;
                    } // Element context

                  } else {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  } // Type selector

                } else if (match[2]) {
                  push.apply(results, context.getElementsByTagName(selector));
                  return results; // Class selector
                } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                  push.apply(results, context.getElementsByClassName(m));
                  return results;
                }
              } // Take advantage of querySelectorAll


              if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only
              // Exclude object elements
              nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                newSelector = selector;
                newContext = context; // qSA considers elements outside a scoping root when evaluating child or
                // descendant combinators, which is not what we want.
                // In such cases, we work around the behavior by prefixing every selector in the
                // list with an ID selector referencing the scope context.
                // The technique has to be used as well when a leading combinator is used
                // as such selectors are not recognized by querySelectorAll.
                // Thanks to Andrew Dupont for this technique.

                if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                  // Expand context for sibling selectors
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser
                  // supports it & if we're not changing the context.

                  if (newContext !== context || !support.scope) {
                    // Capture the context ID, setting it first if necessary
                    if (nid = context.getAttribute("id")) {
                      nid = nid.replace(rcssescape, fcssescape);
                    } else {
                      context.setAttribute("id", nid = expando);
                    }
                  } // Prefix every selector in the list


                  groups = tokenize(selector);
                  i = groups.length;

                  while (i--) {
                    groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
                  }

                  newSelector = groups.join(",");
                }

                try {
                  push.apply(results, newContext.querySelectorAll(newSelector));
                  return results;
                } catch (qsaError) {
                  nonnativeSelectorCache(selector, true);
                } finally {
                  if (nid === expando) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          } // All others


          return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
         * Create key-value caches of limited size
         * @returns {function(string, object)} Returns the Object data after storing it on itself with
         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *	deleting the oldest entry
         */


        function createCache() {
          var keys = [];

          function cache(key, value) {
            // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
            if (keys.push(key + " ") > Expr.cacheLength) {
              // Only keep the most recent entries
              delete cache[keys.shift()];
            }

            return cache[key + " "] = value;
          }

          return cache;
        }
        /**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */


        function markFunction(fn) {
          fn[expando] = true;
          return fn;
        }
        /**
         * Support testing using an element
         * @param {Function} fn Passed the created element and returns a boolean result
         */


        function assert(fn) {
          var el = document.createElement("fieldset");

          try {
            return !!fn(el);
          } catch (e) {
            return false;
          } finally {
            // Remove from its parent by default
            if (el.parentNode) {
              el.parentNode.removeChild(el);
            } // release memory in IE


            el = null;
          }
        }
        /**
         * Adds the same handler for all of the specified attrs
         * @param {String} attrs Pipe-separated list of attributes
         * @param {Function} handler The method that will be applied
         */


        function addHandle(attrs, handler) {
          var arr = attrs.split("|"),
              i = arr.length;

          while (i--) {
            Expr.attrHandle[arr[i]] = handler;
          }
        }
        /**
         * Checks document order of two siblings
         * @param {Element} a
         * @param {Element} b
         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
         */


        function siblingCheck(a, b) {
          var cur = b && a,
              diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

          if (diff) {
            return diff;
          } // Check if b follows a


          if (cur) {
            while (cur = cur.nextSibling) {
              if (cur === b) {
                return -1;
              }
            }
          }

          return a ? 1 : -1;
        }
        /**
         * Returns a function to use in pseudos for input types
         * @param {String} type
         */


        function createInputPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
          };
        }
        /**
         * Returns a function to use in pseudos for buttons
         * @param {String} type
         */


        function createButtonPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
          };
        }
        /**
         * Returns a function to use in pseudos for :enabled/:disabled
         * @param {Boolean} disabled true for :disabled; false for :enabled
         */


        function createDisabledPseudo(disabled) {
          // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
          return function (elem) {
            // Only certain elements can match :enabled or :disabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
            if ("form" in elem) {
              // Check for inherited disabledness on relevant non-disabled elements:
              // * listed form-associated elements in a disabled fieldset
              //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
              // * option elements in a disabled optgroup
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
              // All such elements have a "form" property.
              if (elem.parentNode && elem.disabled === false) {
                // Option elements defer to a parent optgroup if present
                if ("label" in elem) {
                  if ("label" in elem.parentNode) {
                    return elem.parentNode.disabled === disabled;
                  } else {
                    return elem.disabled === disabled;
                  }
                } // Support: IE 6 - 11
                // Use the isDisabled shortcut property to check for disabled fieldset ancestors


                return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

                /* jshint -W018 */
                elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
              }

              return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
              // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
              // even exist on them, let alone have a boolean value.
            } else if ("label" in elem) {
              return elem.disabled === disabled;
            } // Remaining elements are neither :enabled nor :disabled


            return false;
          };
        }
        /**
         * Returns a function to use in pseudos for positionals
         * @param {Function} fn
         */


        function createPositionalPseudo(fn) {
          return markFunction(function (argument) {
            argument = +argument;
            return markFunction(function (seed, matches) {
              var j,
                  matchIndexes = fn([], seed.length, argument),
                  i = matchIndexes.length; // Match elements found at the specified indexes

              while (i--) {
                if (seed[j = matchIndexes[i]]) {
                  seed[j] = !(matches[j] = seed[j]);
                }
              }
            });
          });
        }
        /**
         * Checks a node for validity as a Sizzle context
         * @param {Element|Object=} context
         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
         */


        function testContext(context) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        } // Expose support vars for convenience


        support = Sizzle.support = {};
        /**
         * Detects XML nodes
         * @param {Element|Object} elem An element or a document
         * @returns {Boolean} True iff elem is a non-HTML XML node
         */

        isXML = Sizzle.isXML = function (elem) {
          var namespace = elem && elem.namespaceURI,
              docElem = elem && (elem.ownerDocument || elem).documentElement; // Support: IE <=8
          // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
          // https://bugs.jquery.com/ticket/4833

          return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
        };
        /**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */


        setDocument = Sizzle.setDocument = function (node) {
          var hasCompare,
              subWindow,
              doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq

          if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
            return document;
          } // Update global variables


          document = doc;
          docElem = document.documentElement;
          documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+
          // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq

          if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
            // Support: IE 11, Edge
            if (subWindow.addEventListener) {
              subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
            } else if (subWindow.attachEvent) {
              subWindow.attachEvent("onunload", unloadHandler);
            }
          } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
          // Safari 4 - 5 only, Opera <=11.6 - 12.x only
          // IE/Edge & older browsers don't support the :scope pseudo-class.
          // Support: Safari 6.0 only
          // Safari 6.0 supports :scope but it's an alias of :root there.


          support.scope = assert(function (el) {
            docElem.appendChild(el).appendChild(document.createElement("div"));
            return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
          });
          /* Attributes
          ---------------------------------------------------------------------- */
          // Support: IE<8
          // Verify that getAttribute really returns attributes and not properties
          // (excepting IE8 booleans)

          support.attributes = assert(function (el) {
            el.className = "i";
            return !el.getAttribute("className");
          });
          /* getElement(s)By*
          ---------------------------------------------------------------------- */
          // Check if getElementsByTagName("*") returns only elements

          support.getElementsByTagName = assert(function (el) {
            el.appendChild(document.createComment(""));
            return !el.getElementsByTagName("*").length;
          }); // Support: IE<9

          support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
          // Check if getElementById returns elements by name
          // The broken getElementById methods don't pick up programmatically-set names,
          // so use a roundabout getElementsByName test

          support.getById = assert(function (el) {
            docElem.appendChild(el).id = expando;
            return !document.getElementsByName || !document.getElementsByName(expando).length;
          }); // ID filter and find

          if (support.getById) {
            Expr.filter["ID"] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                return elem.getAttribute("id") === attrId;
              };
            };

            Expr.find["ID"] = function (id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : [];
              }
            };
          } else {
            Expr.filter["ID"] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node && node.value === attrId;
              };
            }; // Support: IE 6 - 7 only
            // getElementById is not reliable as a find shortcut


            Expr.find["ID"] = function (id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var node,
                    i,
                    elems,
                    elem = context.getElementById(id);

                if (elem) {
                  // Verify the id attribute
                  node = elem.getAttributeNode("id");

                  if (node && node.value === id) {
                    return [elem];
                  } // Fall back on getElementsByName


                  elems = context.getElementsByName(id);
                  i = 0;

                  while (elem = elems[i++]) {
                    node = elem.getAttributeNode("id");

                    if (node && node.value === id) {
                      return [elem];
                    }
                  }
                }

                return [];
              }
            };
          } // Tag


          Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
              return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
            } else if (support.qsa) {
              return context.querySelectorAll(tag);
            }
          } : function (tag, context) {
            var elem,
                tmp = [],
                i = 0,
                // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
            results = context.getElementsByTagName(tag); // Filter out possible comments

            if (tag === "*") {
              while (elem = results[i++]) {
                if (elem.nodeType === 1) {
                  tmp.push(elem);
                }
              }

              return tmp;
            }

            return results;
          }; // Class

          Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
            if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          /* QSA/matchesSelector
          ---------------------------------------------------------------------- */
          // QSA and matchesSelector support
          // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


          rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
          // We allow this because of a bug in IE8/9 that throws an error
          // whenever `document.activeElement` is accessed on an iframe
          // So, we allow :focus to pass through QSA all the time to avoid the IE error
          // See https://bugs.jquery.com/ticket/13378

          rbuggyQSA = [];

          if (support.qsa = rnative.test(document.querySelectorAll)) {
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function (el) {
              var input; // Select is set to empty string on purpose
              // This is to test IE's treatment of not explicitly
              // setting a boolean content attribute,
              // since its presence should be enough
              // https://bugs.jquery.com/ticket/12359

              docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
              // Nothing should be selected when empty strings follow ^= or $= or *=
              // The test attribute must be unknown in Opera but "safe" for WinRT
              // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

              if (el.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
              } // Support: IE8
              // Boolean attributes and "value" are not treated correctly


              if (!el.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
              } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


              if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              } // Support: IE 11+, Edge 15 - 18+
              // IE 11/Edge don't find elements on a `[name='']` query in some cases.
              // Adding a temporary attribute to the document before the selection works
              // around the issue.
              // Interestingly, IE 10 & older don't seem to have the issue.


              input = document.createElement("input");
              input.setAttribute("name", "");
              el.appendChild(input);

              if (!el.querySelectorAll("[name='']").length) {
                rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
              } // Webkit/Opera - :checked should return selected option elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              // IE8 throws error here and will not see later tests


              if (!el.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              } // Support: Safari 8+, iOS 8+
              // https://bugs.webkit.org/show_bug.cgi?id=136851
              // In-page `selector#id sibling-combinator selector` fails


              if (!el.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              } // Support: Firefox <=3.6 - 5 only
              // Old Firefox doesn't throw on a badly-escaped identifier.


              el.querySelectorAll("\\\f");
              rbuggyQSA.push("[\\r\\n\\f]");
            });
            assert(function (el) {
              el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
              // The type and name attributes are restricted during .innerHTML assignment

              var input = document.createElement("input");
              input.setAttribute("type", "hidden");
              el.appendChild(input).setAttribute("name", "D"); // Support: IE8
              // Enforce case-sensitivity of name attribute

              if (el.querySelectorAll("[name=d]").length) {
                rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
              } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
              // IE8 throws error here and will not see later tests


              if (el.querySelectorAll(":enabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              } // Support: IE9-11+
              // IE's :disabled selector does not pick up the children of disabled fieldsets


              docElem.appendChild(el).disabled = true;

              if (el.querySelectorAll(":disabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              } // Support: Opera 10 - 11 only
              // Opera 10-11 does not throw on post-comma invalid pseudos


              el.querySelectorAll("*,:x");
              rbuggyQSA.push(",.*:");
            });
          }

          if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function (el) {
              // Check to see if it's possible to do matchesSelector
              // on a disconnected node (IE 9)
              support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
              // Gecko does not error, returns false instead

              matches.call(el, "[s!='']:x");
              rbuggyMatches.push("!=", pseudos);
            });
          }

          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
          /* Contains
          ---------------------------------------------------------------------- */

          hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
          // Purposefully self-exclusive
          // As in, an element does not contain itself

          contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a,
                bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
          } : function (a, b) {
            if (b) {
              while (b = b.parentNode) {
                if (b === a) {
                  return true;
                }
              }
            }

            return false;
          };
          /* Sorting
          ---------------------------------------------------------------------- */
          // Document order sorting

          sortOrder = hasCompare ? function (a, b) {
            // Flag for duplicate removal
            if (a === b) {
              hasDuplicate = true;
              return 0;
            } // Sort on method existence if only one input has compareDocumentPosition


            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

            if (compare) {
              return compare;
            } // Calculate position if both inputs belong to the same document
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq


            compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
            1; // Disconnected nodes

            if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
              // Choose the first element that is related to our preferred document
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
                return -1;
              } // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq


              if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
                return 1;
              } // Maintain original order


              return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
            }

            return compare & 4 ? -1 : 1;
          } : function (a, b) {
            // Exit early if the nodes are identical
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }

            var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [a],
                bp = [b]; // Parentless nodes are either documents or disconnected

            if (!aup || !bup) {
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.

              /* eslint-disable eqeqeq */
              return a == document ? -1 : b == document ? 1 :
              /* eslint-enable eqeqeq */
              aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
            } else if (aup === bup) {
              return siblingCheck(a, b);
            } // Otherwise we need full lists of their ancestors for comparison


            cur = a;

            while (cur = cur.parentNode) {
              ap.unshift(cur);
            }

            cur = b;

            while (cur = cur.parentNode) {
              bp.unshift(cur);
            } // Walk down the tree looking for a discrepancy


            while (ap[i] === bp[i]) {
              i++;
            }

            return i ? // Do a sibling check if the nodes have a common ancestor
            siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.

            /* eslint-disable eqeqeq */
            ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :
            /* eslint-enable eqeqeq */
            0;
          };
          return document;
        };

        Sizzle.matches = function (expr, elements) {
          return Sizzle(expr, null, null, elements);
        };

        Sizzle.matchesSelector = function (elem, expr) {
          setDocument(elem);

          if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

              if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
              // fragment in IE 9
              elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e) {
              nonnativeSelectorCache(expr, true);
            }
          }

          return Sizzle(expr, document, null, [elem]).length > 0;
        };

        Sizzle.contains = function (context, elem) {
          // Set document vars if needed
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if ((context.ownerDocument || context) != document) {
            setDocument(context);
          }

          return contains(context, elem);
        };

        Sizzle.attr = function (elem, name) {
          // Set document vars if needed
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if ((elem.ownerDocument || elem) != document) {
            setDocument(elem);
          }

          var fn = Expr.attrHandle[name.toLowerCase()],
              // Don't get fooled by Object.prototype properties (jQuery #13807)
          val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
          return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };

        Sizzle.escape = function (sel) {
          return (sel + "").replace(rcssescape, fcssescape);
        };

        Sizzle.error = function (msg) {
          throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        /**
         * Document sorting and removing duplicates
         * @param {ArrayLike} results
         */


        Sizzle.uniqueSort = function (results) {
          var elem,
              duplicates = [],
              j = 0,
              i = 0; // Unless we *know* we can detect duplicates, assume their presence

          hasDuplicate = !support.detectDuplicates;
          sortInput = !support.sortStable && results.slice(0);
          results.sort(sortOrder);

          if (hasDuplicate) {
            while (elem = results[i++]) {
              if (elem === results[i]) {
                j = duplicates.push(i);
              }
            }

            while (j--) {
              results.splice(duplicates[j], 1);
            }
          } // Clear input after sorting to release objects
          // See https://github.com/jquery/sizzle/pull/225


          sortInput = null;
          return results;
        };
        /**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */


        getText = Sizzle.getText = function (elem) {
          var node,
              ret = "",
              i = 0,
              nodeType = elem.nodeType;

          if (!nodeType) {
            // If no nodeType, this is expected to be an array
            while (node = elem[i++]) {
              // Do not traverse comment nodes
              ret += getText(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            // Use textContent for elements
            // innerText usage removed for consistency of new lines (jQuery #11153)
            if (typeof elem.textContent === "string") {
              return elem.textContent;
            } else {
              // Traverse its children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem);
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          } // Do not include comment or processing instruction nodes


          return ret;
        };

        Expr = Sizzle.selectors = {
          // Can be adjusted by the user
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            ">": {
              dir: "parentNode",
              first: true
            },
            " ": {
              dir: "parentNode"
            },
            "+": {
              dir: "previousSibling",
              first: true
            },
            "~": {
              dir: "previousSibling"
            }
          },
          preFilter: {
            "ATTR": function ATTR(match) {
              match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

              match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

              if (match[2] === "~=") {
                match[3] = " " + match[3] + " ";
              }

              return match.slice(0, 4);
            },
            "CHILD": function CHILD(match) {
              /* matches from matchExpr["CHILD"]
              	1 type (only|nth|...)
              	2 what (child|of-type)
              	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
              	4 xn-component of xn+y argument ([+-]?\d*n|)
              	5 sign of xn-component
              	6 x of xn-component
              	7 sign of y-component
              	8 y of y-component
              */
              match[1] = match[1].toLowerCase();

              if (match[1].slice(0, 3) === "nth") {
                // nth-* requires argument
                if (!match[3]) {
                  Sizzle.error(match[0]);
                } // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1


                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
              } else if (match[3]) {
                Sizzle.error(match[0]);
              }

              return match;
            },
            "PSEUDO": function PSEUDO(match) {
              var excess,
                  unquoted = !match[6] && match[2];

              if (matchExpr["CHILD"].test(match[0])) {
                return null;
              } // Accept quoted arguments as-is


              if (match[3]) {
                match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
              } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
              excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
              excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                // excess is a negative index
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess);
              } // Return only captures needed by the pseudo filter method (type and argument)


              return match.slice(0, 3);
            }
          },
          filter: {
            "TAG": function TAG(nodeNameSelector) {
              var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === "*" ? function () {
                return true;
              } : function (elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
              };
            },
            "CLASS": function CLASS(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
              });
            },
            "ATTR": function ATTR(name, operator, check) {
              return function (elem) {
                var result = Sizzle.attr(elem, name);

                if (result == null) {
                  return operator === "!=";
                }

                if (!operator) {
                  return true;
                }

                result += "";
                /* eslint-disable max-len */

                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                /* eslint-enable max-len */
              };
            },
            "CHILD": function CHILD(type, what, _argument, first, last) {
              var simple = type.slice(0, 3) !== "nth",
                  forward = type.slice(-4) !== "last",
                  ofType = what === "of-type";
              return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
              function (elem) {
                return !!elem.parentNode;
              } : function (elem, _context, xml) {
                var cache,
                    uniqueCache,
                    outerCache,
                    node,
                    nodeIndex,
                    start,
                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType,
                    diff = false;

                if (parent) {
                  // :(first|last|only)-(child|of-type)
                  if (simple) {
                    while (dir) {
                      node = elem;

                      while (node = node[dir]) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false;
                        }
                      } // Reverse direction for :only-* (if we haven't yet done so)


                      start = dir = type === "only" && !start && "nextSibling";
                    }

                    return true;
                  }

                  start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

                  if (forward && useCache) {
                    // Seek `elem` from a previously-cached index
                    // ...in a gzip-friendly way
                    node = parent;
                    outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)

                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];

                    while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                    diff = nodeIndex = 0) || start.pop()) {
                      // When found, cache indexes on `parent` and break
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        uniqueCache[type] = [dirruns, nodeIndex, diff];
                        break;
                      }
                    }
                  } else {
                    // Use previously-cached element index if available
                    if (useCache) {
                      // ...in a gzip-friendly way
                      node = elem;
                      outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)

                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex;
                    } // xml :nth-child(...)
                    // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                    if (diff === false) {
                      // Use the same loop as above to seek `elem` from the start
                      while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                          // Cache the index of each encountered element
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                            // Defend against cloned attroperties (jQuery gh-1709)

                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                            uniqueCache[type] = [dirruns, diff];
                          }

                          if (node === elem) {
                            break;
                          }
                        }
                      }
                    }
                  } // Incorporate the offset, then check against cycle size


                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0;
                }
              };
            },
            "PSEUDO": function PSEUDO(pseudo, argument) {
              // pseudo-class names are case-insensitive
              // http://www.w3.org/TR/selectors/#pseudo-classes
              // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
              // Remember that setFilters inherits from pseudos
              var args,
                  fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
              // arguments are needed to create the filter function
              // just as Sizzle does

              if (fn[expando]) {
                return fn(argument);
              } // But maintain support for old signatures


              if (fn.length > 1) {
                args = [pseudo, pseudo, "", argument];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                  var idx,
                      matched = fn(seed, argument),
                      i = matched.length;

                  while (i--) {
                    idx = indexOf(seed, matched[i]);
                    seed[idx] = !(matches[idx] = matched[i]);
                  }
                }) : function (elem) {
                  return fn(elem, 0, args);
                };
              }

              return fn;
            }
          },
          pseudos: {
            // Potentially complex pseudos
            "not": markFunction(function (selector) {
              // Trim the selector passed to compile
              // to avoid treating leading and trailing
              // spaces as combinators
              var input = [],
                  results = [],
                  matcher = compile(selector.replace(rtrim, "$1"));
              return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
                var elem,
                    unmatched = matcher(seed, null, xml, []),
                    i = seed.length; // Match elements unmatched by `matcher`

                while (i--) {
                  if (elem = unmatched[i]) {
                    seed[i] = !(matches[i] = elem);
                  }
                }
              }) : function (elem, _context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results); // Don't keep the element (issue #299)

                input[0] = null;
                return !results.pop();
              };
            }),
            "has": markFunction(function (selector) {
              return function (elem) {
                return Sizzle(selector, elem).length > 0;
              };
            }),
            "contains": markFunction(function (text) {
              text = text.replace(runescape, funescape);
              return function (elem) {
                return (elem.textContent || getText(elem)).indexOf(text) > -1;
              };
            }),
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // http://www.w3.org/TR/selectors/#lang-pseudo
            "lang": markFunction(function (lang) {
              // lang value must be a valid identifier
              if (!ridentifier.test(lang || "")) {
                Sizzle.error("unsupported lang: " + lang);
              }

              lang = lang.replace(runescape, funescape).toLowerCase();
              return function (elem) {
                var elemLang;

                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);

                return false;
              };
            }),
            // Miscellaneous
            "target": function target(elem) {
              var hash = window.location && window.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            "root": function root(elem) {
              return elem === docElem;
            },
            "focus": function focus(elem) {
              return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            // Boolean properties
            "enabled": createDisabledPseudo(false),
            "disabled": createDisabledPseudo(true),
            "checked": function checked(elem) {
              // In CSS3, :checked should return both checked and selected elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              var nodeName = elem.nodeName.toLowerCase();
              return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
            },
            "selected": function selected(elem) {
              // Accessing this property makes selected-by-default
              // options in Safari work properly
              if (elem.parentNode) {
                // eslint-disable-next-line no-unused-expressions
                elem.parentNode.selectedIndex;
              }

              return elem.selected === true;
            },
            // Contents
            "empty": function empty(elem) {
              // http://www.w3.org/TR/selectors/#empty-pseudo
              // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
              //   but not by others (comment: 8; processing instruction: 7; etc.)
              // nodeType < 6 works because attributes (2) do not appear as children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }

              return true;
            },
            "parent": function parent(elem) {
              return !Expr.pseudos["empty"](elem);
            },
            // Element/input types
            "header": function header(elem) {
              return rheader.test(elem.nodeName);
            },
            "input": function input(elem) {
              return rinputs.test(elem.nodeName);
            },
            "button": function button(elem) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === "button" || name === "button";
            },
            "text": function text(elem) {
              var attr;
              return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
              // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
              (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
            },
            // Position-in-collection
            "first": createPositionalPseudo(function () {
              return [0];
            }),
            "last": createPositionalPseudo(function (_matchIndexes, length) {
              return [length - 1];
            }),
            "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            "even": createPositionalPseudo(function (matchIndexes, length) {
              var i = 0;

              for (; i < length; i += 2) {
                matchIndexes.push(i);
              }

              return matchIndexes;
            }),
            "odd": createPositionalPseudo(function (matchIndexes, length) {
              var i = 1;

              for (; i < length; i += 2) {
                matchIndexes.push(i);
              }

              return matchIndexes;
            }),
            "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument > length ? length : argument;

              for (; --i >= 0;) {
                matchIndexes.push(i);
              }

              return matchIndexes;
            }),
            "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;

              for (; ++i < length;) {
                matchIndexes.push(i);
              }

              return matchIndexes;
            })
          }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

        for (i in {
          radio: true,
          checkbox: true,
          file: true,
          password: true,
          image: true
        }) {
          Expr.pseudos[i] = createInputPseudo(i);
        }

        for (i in {
          submit: true,
          reset: true
        }) {
          Expr.pseudos[i] = createButtonPseudo(i);
        } // Easy API for creating new setFilters


        function setFilters() {}

        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();

        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
          var matched,
              match,
              tokens,
              type,
              soFar,
              groups,
              preFilters,
              cached = tokenCache[selector + " "];

          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }

          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;

          while (soFar) {
            // Comma and first run
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice(match[0].length) || soFar;
              }

              groups.push(tokens = []);
            }

            matched = false; // Combinators

            if (match = rcombinators.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace(rtrim, " ")
              });
              soFar = soFar.slice(matched.length);
            } // Filters


            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                });
                soFar = soFar.slice(matched.length);
              }
            }

            if (!matched) {
              break;
            }
          } // Return the length of the invalid excess
          // if we're just parsing
          // Otherwise, throw an error or return tokens


          return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
          tokenCache(selector, groups).slice(0);
        };

        function toSelector(tokens) {
          var i = 0,
              len = tokens.length,
              selector = "";

          for (; i < len; i++) {
            selector += tokens[i].value;
          }

          return selector;
        }

        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir,
              skip = combinator.next,
              key = skip || dir,
              checkNonElements = base && key === "parentNode",
              doneName = done++;
          return combinator.first ? // Check against closest ancestor/preceding element
          function (elem, context, xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml);
              }
            }

            return false;
          } : // Check against all ancestor/preceding elements
          function (elem, context, xml) {
            var oldCache,
                uniqueCache,
                outerCache,
                newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

            if (xml) {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            } else {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                  if (skip && skip === elem.nodeName.toLowerCase()) {
                    elem = elem[dir] || elem;
                  } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    // Assign to newCache so results back-propagate to previous elements
                    return newCache[2] = oldCache[2];
                  } else {
                    // Reuse newcache so results back-propagate to previous elements
                    uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              }
            }

            return false;
          };
        }

        function elementMatcher(matchers) {
          return matchers.length > 1 ? function (elem, context, xml) {
            var i = matchers.length;

            while (i--) {
              if (!matchers[i](elem, context, xml)) {
                return false;
              }
            }

            return true;
          } : matchers[0];
        }

        function multipleContexts(selector, contexts, results) {
          var i = 0,
              len = contexts.length;

          for (; i < len; i++) {
            Sizzle(selector, contexts[i], results);
          }

          return results;
        }

        function condense(unmatched, map, filter, context, xml) {
          var elem,
              newUnmatched = [],
              i = 0,
              len = unmatched.length,
              mapped = map != null;

          for (; i < len; i++) {
            if (elem = unmatched[i]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);

                if (mapped) {
                  map.push(i);
                }
              }
            }
          }

          return newUnmatched;
        }

        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }

          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }

          return markFunction(function (seed, results, context, xml) {
            var temp,
                i,
                elem,
                preMap = [],
                postMap = [],
                preexisting = results.length,
                // Get initial elements from seed or context
            elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
            postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
            [] : // ...otherwise use results directly
            results : matcherIn; // Find primary matches

            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml);
            } // Apply postFilter


            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

              i = temp.length;

              while (i--) {
                if (elem = temp[i]) {
                  matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
              }
            }

            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  // Get the final matcherOut by condensing this intermediate into postFinder contexts
                  temp = [];
                  i = matcherOut.length;

                  while (i--) {
                    if (elem = matcherOut[i]) {
                      // Restore matcherIn since elem is not yet a final match
                      temp.push(matcherIn[i] = elem);
                    }
                  }

                  postFinder(null, matcherOut = [], temp, xml);
                } // Move matched elements from seed to results to keep them synchronized


                i = matcherOut.length;

                while (i--) {
                  if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              } // Add elements to results, through postFinder if defined

            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push.apply(results, matcherOut);
              }
            }
          });
        }

        function matcherFromTokens(tokens) {
          var checkContext,
              matcher,
              j,
              len = tokens.length,
              leadingRelative = Expr.relative[tokens[0].type],
              implicitRelative = leadingRelative || Expr.relative[" "],
              i = leadingRelative ? 1 : 0,
              // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(function (elem) {
            return elem === checkContext;
          }, implicitRelative, true),
              matchAnyContext = addCombinator(function (elem) {
            return indexOf(checkContext, elem) > -1;
          }, implicitRelative, true),
              matchers = [function (elem, context, xml) {
            var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

            checkContext = null;
            return ret;
          }];

          for (; i < len; i++) {
            if (matcher = Expr.relative[tokens[i].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

              if (matcher[expando]) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;

                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break;
                  }
                }

                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                tokens.slice(0, i - 1).concat({
                  value: tokens[i - 2].type === " " ? "*" : ""
                })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
              }

              matchers.push(matcher);
            }
          }

          return elementMatcher(matchers);
        }

        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0,
              byElement = elementMatchers.length > 0,
              superMatcher = function superMatcher(seed, context, xml, results, outermost) {
            var elem,
                j,
                matcher,
                matchedCount = 0,
                i = "0",
                unmatched = seed && [],
                setMatched = [],
                contextBackup = outermostContext,
                // We must always have either seed elements or outermost context
            elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                // Use integer dirruns iff this is the outermost matcher
            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
                len = elems.length;

            if (outermost) {
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              outermostContext = context == document || context || outermost;
            } // Add elements passing elementMatchers directly to results
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0; // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq

                if (!context && elem.ownerDocument != document) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }

                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context || document, xml)) {
                    results.push(elem);
                    break;
                  }
                }

                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              } // Track unmatched elements for set filters


              if (bySet) {
                // They will have gone through all possible matchers
                if (elem = !matcher && elem) {
                  matchedCount--;
                } // Lengthen the array for every element, matched or not


                if (seed) {
                  unmatched.push(elem);
                }
              }
            } // `i` is now the count of elements visited above, and adding it to `matchedCount`
            // makes the latter nonnegative.


            matchedCount += i; // Apply set filters to unmatched elements
            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
            // no element matchers and no seed.
            // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
            // case, which will result in a "00" `matchedCount` that differs from `i` but is also
            // numerically zero.

            if (bySet && i !== matchedCount) {
              j = 0;

              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml);
              }

              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results);
                    }
                  }
                } // Discard index placeholder values to get only actual matches


                setMatched = condense(setMatched);
              } // Add matches to results


              push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                Sizzle.uniqueSort(results);
              }
            } // Override manipulation of globals by nested matchers


            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }

            return unmatched;
          };

          return bySet ? markFunction(superMatcher) : superMatcher;
        }

        compile = Sizzle.compile = function (selector, match
        /* Internal Use Only */
        ) {
          var i,
              setMatchers = [],
              elementMatchers = [],
              cached = compilerCache[selector + " "];

          if (!cached) {
            // Generate a function of recursive functions that can be used to check each element
            if (!match) {
              match = tokenize(selector);
            }

            i = match.length;

            while (i--) {
              cached = matcherFromTokens(match[i]);

              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            } // Cache the compiled function


            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

            cached.selector = selector;
          }

          return cached;
        };
        /**
         * A low-level selection function that works with Sizzle's compiled
         *  selector functions
         * @param {String|Function} selector A selector or a pre-compiled
         *  selector function built with Sizzle.compile
         * @param {Element} context
         * @param {Array} [results]
         * @param {Array} [seed] A set of elements to match against
         */


        select = Sizzle.select = function (selector, context, results, seed) {
          var i,
              tokens,
              token,
              type,
              find,
              compiled = typeof selector === "function" && selector,
              match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
          // (the latter of which guarantees us context)

          if (match.length === 1) {
            // Reduce context if the leading compound selector is an ID
            tokens = match[0] = match[0].slice(0);

            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

              if (!context) {
                return results; // Precompiled matchers will still verify ancestry, so step up a level
              } else if (compiled) {
                context = context.parentNode;
              }

              selector = selector.slice(tokens.shift().value.length);
            } // Fetch a seed set for right-to-left matching


            i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

            while (i--) {
              token = tokens[i]; // Abort if we hit a combinator

              if (Expr.relative[type = token.type]) {
                break;
              }

              if (find = Expr.find[type]) {
                // Search, expanding context for leading sibling combinators
                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                  // If seed is empty or no tokens remain, we can return early
                  tokens.splice(i, 1);
                  selector = seed.length && toSelector(tokens);

                  if (!selector) {
                    push.apply(results, seed);
                    return results;
                  }

                  break;
                }
              }
            }
          } // Compile and execute a filtering function if one is not provided
          // Provide `match` to avoid retokenization if we modified the selector above


          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
          return results;
        }; // One-time assignments
        // Sort stability


        support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function

        support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

        setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*

        support.sortDetached = assert(function (el) {
          // Should return 1, but returns 4 (following)
          return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
        }); // Support: IE<8
        // Prevent attribute/property "interpolation"
        // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

        if (!assert(function (el) {
          el.innerHTML = "<a href='#'></a>";
          return el.firstChild.getAttribute("href") === "#";
        })) {
          addHandle("type|href|height|width", function (elem, name, isXML) {
            if (!isXML) {
              return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
            }
          });
        } // Support: IE<9
        // Use defaultValue in place of getAttribute("value")


        if (!support.attributes || !assert(function (el) {
          el.innerHTML = "<input/>";
          el.firstChild.setAttribute("value", "");
          return el.firstChild.getAttribute("value") === "";
        })) {
          addHandle("value", function (elem, _name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === "input") {
              return elem.defaultValue;
            }
          });
        } // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies


        if (!assert(function (el) {
          return el.getAttribute("disabled") == null;
        })) {
          addHandle(booleans, function (elem, name, isXML) {
            var val;

            if (!isXML) {
              return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            }
          });
        }

        return Sizzle;
      }(window);

      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors; // Deprecated

      jQuery.expr[":"] = jQuery.expr.pseudos;
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      jQuery.escapeSelector = Sizzle.escape;

      var dir = function dir(elem, _dir, until) {
        var matched = [],
            truncate = until !== undefined;

        while ((elem = elem[_dir]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break;
            }

            matched.push(elem);
          }
        }

        return matched;
      };

      var _siblings = function siblings(n, elem) {
        var matched = [];

        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n);
          }
        }

        return matched;
      };

      var rneedsContext = jQuery.expr.match.needsContext;

      function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
      }

      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

      function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
          return jQuery.grep(elements, function (elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        } // Single element


        if (qualifier.nodeType) {
          return jQuery.grep(elements, function (elem) {
            return elem === qualifier !== not;
          });
        } // Arraylike of elements (jQuery, arguments, Array)


        if (typeof qualifier !== "string") {
          return jQuery.grep(elements, function (elem) {
            return indexOf.call(qualifier, elem) > -1 !== not;
          });
        } // Filtered directly for both simple and complex selectors


        return jQuery.filter(qualifier, elements, not);
      }

      jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];

        if (not) {
          expr = ":not(" + expr + ")";
        }

        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }

        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
          return elem.nodeType === 1;
        }));
      };

      jQuery.fn.extend({
        find: function find(selector) {
          var i,
              ret,
              len = this.length,
              self = this;

          if (typeof selector !== "string") {
            return this.pushStack(jQuery(selector).filter(function () {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }

          ret = this.pushStack([]);

          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }

          return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function filter(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function not(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function is(selector) {
          return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
          // so $("p:first").is("p:last") won't return true for a doc with two "p".
          typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
      }); // Initialize a jQuery object
      // A central reference to the root jQuery(document)

      var rootjQuery,
          // A simple way to check for HTML strings
      // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
      // Strict HTML recognition (#11290: must start with <)
      // Shortcut simple #id case for speed
      rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
          init = jQuery.fn.init = function (selector, context, root) {
        var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

        if (!selector) {
          return this;
        } // Method init() accepts an alternate rootjQuery
        // so migrate can support jQuery.sub (gh-2101)


        root = root || rootjQuery; // Handle HTML strings

        if (typeof selector === "string") {
          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
            // Assume that strings that start and end with <> are HTML and skip the regex check
            match = [null, selector, null];
          } else {
            match = rquickExpr.exec(selector);
          } // Match html or make sure no context is specified for #id


          if (match && (match[1] || !context)) {
            // HANDLE: $(html) -> $(array)
            if (match[1]) {
              context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
              // Intentionally let the error be thrown if parseHTML is not present

              jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

              if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                for (match in context) {
                  // Properties of context are called as methods if possible
                  if (isFunction(this[match])) {
                    this[match](context[match]); // ...and otherwise set as attributes
                  } else {
                    this.attr(match, context[match]);
                  }
                }
              }

              return this; // HANDLE: $(#id)
            } else {
              elem = document.getElementById(match[2]);

              if (elem) {
                // Inject the element directly into the jQuery object
                this[0] = elem;
                this.length = 1;
              }

              return this;
            } // HANDLE: $(expr, $(...))

          } else if (!context || context.jquery) {
            return (context || root).find(selector); // HANDLE: $(expr, context)
            // (which is just equivalent to: $(context).find(expr)
          } else {
            return this.constructor(context).find(selector);
          } // HANDLE: $(DOMElement)

        } else if (selector.nodeType) {
          this[0] = selector;
          this.length = 1;
          return this; // HANDLE: $(function)
          // Shortcut for document ready
        } else if (isFunction(selector)) {
          return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
          selector(jQuery);
        }

        return jQuery.makeArray(selector, this);
      }; // Give the init function the jQuery prototype for later instantiation


      init.prototype = jQuery.fn; // Initialize central reference

      rootjQuery = jQuery(document);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/,
          // Methods guaranteed to produce a unique set when starting from a unique set
      guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };
      jQuery.fn.extend({
        has: function has(target) {
          var targets = jQuery(target, this),
              l = targets.length;
          return this.filter(function () {
            var i = 0;

            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        closest: function closest(selectors, context) {
          var cur,
              i = 0,
              l = this.length,
              matched = [],
              targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                // Always skip document fragments
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
                cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break;
                }
              }
            }
          }

          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        // Determine the position of an element within the set
        index: function index(elem) {
          // No argument, return index in parent
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          } // Index in selector


          if (typeof elem === "string") {
            return indexOf.call(jQuery(elem), this[0]);
          } // Locate the position of the desired element


          return indexOf.call(this, // If it receives a jQuery object, the first element is used
          elem.jquery ? elem[0] : elem);
        },
        add: function add(selector, context) {
          return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function addBack(selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
      });

      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}

        return cur;
      }

      jQuery.each({
        parent: function parent(elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function parents(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil: function parentsUntil(elem, _i, until) {
          return dir(elem, "parentNode", until);
        },
        next: function next(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function prev(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function nextAll(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll: function prevAll(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil: function nextUntil(elem, _i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil: function prevUntil(elem, _i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings: function siblings(elem) {
          return _siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function children(elem) {
          return _siblings(elem.firstChild);
        },
        contents: function contents(elem) {
          if (elem.contentDocument != null && // Support: IE 11+
          // <object> elements with no `data` attribute has an object
          // `contentDocument` with a `null` prototype.
          getProto(elem.contentDocument)) {
            return elem.contentDocument;
          } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
          // Treat the template element as a regular one in browsers that
          // don't support it.


          if (nodeName(elem, "template")) {
            elem = elem.content || elem;
          }

          return jQuery.merge([], elem.childNodes);
        }
      }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
          var matched = jQuery.map(this, fn, until);

          if (name.slice(-5) !== "Until") {
            selector = until;
          }

          if (selector && typeof selector === "string") {
            matched = jQuery.filter(selector, matched);
          }

          if (this.length > 1) {
            // Remove duplicates
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched);
            } // Reverse order for parents* and prev-derivatives


            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }

          return this.pushStack(matched);
        };
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
          object[flag] = true;
        });
        return object;
      }
      /*
       * Create a callback list using the following parameters:
       *
       *	options: an optional list of space-separated options that will change how
       *			the callback list behaves or a more traditional option object
       *
       * By default a callback list will act like an event callback list and can be
       * "fired" multiple times.
       *
       * Possible options:
       *
       *	once:			will ensure the callback list can only be fired once (like a Deferred)
       *
       *	memory:			will keep track of previous values and will call any callback added
       *					after the list has been fired right away with the latest "memorized"
       *					values (like a Deferred)
       *
       *	unique:			will ensure a callback can only be added once (no duplicate in the list)
       *
       *	stopOnFalse:	interrupt callings when a callback returns false
       *
       */


      jQuery.Callbacks = function (options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

        var // Flag to know if list is currently firing
        firing,
            // Last fire value for non-forgettable lists
        memory,
            // Flag to know if list was already fired
        _fired,
            // Flag to prevent firing
        _locked,
            // Actual callback list
        list = [],
            // Queue of execution data for repeatable lists
        queue = [],
            // Index of currently firing callback (modified by add/remove as needed)
        firingIndex = -1,
            // Fire callbacks
        fire = function fire() {
          // Enforce single-firing
          _locked = _locked || options.once; // Execute callbacks for all pending executions,
          // respecting firingIndex overrides and runtime changes

          _fired = firing = true;

          for (; queue.length; firingIndex = -1) {
            memory = queue.shift();

            while (++firingIndex < list.length) {
              // Run callback and check for early termination
              if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                // Jump to end and forget the data so .add doesn't re-fire
                firingIndex = list.length;
                memory = false;
              }
            }
          } // Forget the data if we're done with it


          if (!options.memory) {
            memory = false;
          }

          firing = false; // Clean up if we're done firing for good

          if (_locked) {
            // Keep an empty list if we have data for future add calls
            if (memory) {
              list = []; // Otherwise, this object is spent
            } else {
              list = "";
            }
          }
        },
            // Actual Callbacks object
        self = {
          // Add a callback or a collection of callbacks to the list
          add: function add() {
            if (list) {
              // If we have memory from a past run, we should fire after adding
              if (memory && !firing) {
                firingIndex = list.length - 1;
                queue.push(memory);
              }

              (function add(args) {
                jQuery.each(args, function (_, arg) {
                  if (isFunction(arg)) {
                    if (!options.unique || !self.has(arg)) {
                      list.push(arg);
                    }
                  } else if (arg && arg.length && toType(arg) !== "string") {
                    // Inspect recursively
                    add(arg);
                  }
                });
              })(arguments);

              if (memory && !firing) {
                fire();
              }
            }

            return this;
          },
          // Remove a callback from the list
          remove: function remove() {
            jQuery.each(arguments, function (_, arg) {
              var index;

              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1); // Handle firing indexes

                if (index <= firingIndex) {
                  firingIndex--;
                }
              }
            });
            return this;
          },
          // Check if a given callback is in the list.
          // If no argument is given, return whether or not list has callbacks attached.
          has: function has(fn) {
            return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
          },
          // Remove all callbacks from the list
          empty: function empty() {
            if (list) {
              list = [];
            }

            return this;
          },
          // Disable .fire and .add
          // Abort any current/pending executions
          // Clear all callbacks and values
          disable: function disable() {
            _locked = queue = [];
            list = memory = "";
            return this;
          },
          disabled: function disabled() {
            return !list;
          },
          // Disable .fire
          // Also disable .add unless we have memory (since it would have no effect)
          // Abort any pending executions
          lock: function lock() {
            _locked = queue = [];

            if (!memory && !firing) {
              list = memory = "";
            }

            return this;
          },
          locked: function locked() {
            return !!_locked;
          },
          // Call all callbacks with the given context and arguments
          fireWith: function fireWith(context, args) {
            if (!_locked) {
              args = args || [];
              args = [context, args.slice ? args.slice() : args];
              queue.push(args);

              if (!firing) {
                fire();
              }
            }

            return this;
          },
          // Call all the callbacks with the given arguments
          fire: function fire() {
            self.fireWith(this, arguments);
            return this;
          },
          // To know if the callbacks have already been called at least once
          fired: function fired() {
            return !!_fired;
          }
        };

        return self;
      };

      function Identity(v) {
        return v;
      }

      function Thrower(ex) {
        throw ex;
      }

      function adoptValue(value, resolve, reject, noValue) {
        var method;

        try {
          // Check for promise aspect first to privilege synchronous behavior
          if (value && isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject); // Other thenables
          } else if (value && isFunction(method = value.then)) {
            method.call(value, resolve, reject); // Other non-thenables
          } else {
            // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
            // * false: [ value ].slice( 0 ) => resolve( value )
            // * true: [ value ].slice( 1 ) => resolve()
            resolve.apply(undefined, [value].slice(noValue));
          } // For Promises/A+, convert exceptions into rejections
          // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
          // Deferred#then to conditionally suppress rejection.

        } catch (value) {
          // Support: Android 4.0 only
          // Strict mode functions invoked without .call/.apply get global-object context
          reject.apply(undefined, [value]);
        }
      }

      jQuery.extend({
        Deferred: function Deferred(func) {
          var tuples = [// action, add listener, callbacks,
          // ... .then handlers, argument index, [final state]
          ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
              _state = "pending",
              _promise = {
            state: function state() {
              return _state;
            },
            always: function always() {
              deferred.done(arguments).fail(arguments);
              return this;
            },
            "catch": function _catch(fn) {
              return _promise.then(null, fn);
            },
            // Keep pipe for back-compat
            pipe: function pipe()
            /* fnDone, fnFail, fnProgress */
            {
              var fns = arguments;
              return jQuery.Deferred(function (newDefer) {
                jQuery.each(tuples, function (_i, tuple) {
                  // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
                  // deferred.done(function() { bind to newDefer or newDefer.resolve })
                  // deferred.fail(function() { bind to newDefer or newDefer.reject })

                  deferred[tuple[1]](function () {
                    var returned = fn && fn.apply(this, arguments);

                    if (returned && isFunction(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                    }
                  });
                });
                fns = null;
              }).promise();
            },
            then: function then(onFulfilled, onRejected, onProgress) {
              var maxDepth = 0;

              function resolve(depth, deferred, handler, special) {
                return function () {
                  var that = this,
                      args = arguments,
                      mightThrow = function mightThrow() {
                    var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts

                    if (depth < maxDepth) {
                      return;
                    }

                    returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48

                    if (returned === deferred.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    } // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once


                    then = returned && ( // Support: Promises/A+ section 2.3.4
                    // https://promisesaplus.com/#point-64
                    // Only check objects and functions for thenability
                    _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                      } // Handle all other returned values

                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      } // Process the value(s)
                      // Default process is resolve


                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                      // Only normal processors (resolve) catch and reject exceptions
                  process = special ? mightThrow : function () {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (jQuery.Deferred.exceptionHook) {
                        jQuery.Deferred.exceptionHook(e, process.stackTrace);
                      } // Support: Promises/A+ section 2.3.3.3.4.1
                      // https://promisesaplus.com/#point-61
                      // Ignore post-resolution exceptions


                      if (depth + 1 >= maxDepth) {
                        // Only substitute handlers pass on context
                        // and multiple values (non-spec behavior)
                        if (handler !== Thrower) {
                          that = undefined;
                          args = [e];
                        }

                        deferred.rejectWith(that, args);
                      }
                    }
                  }; // Support: Promises/A+ section 2.3.3.3.1
                  // https://promisesaplus.com/#point-57
                  // Re-resolve promises immediately to dodge false rejection from
                  // subsequent errors


                  if (depth) {
                    process();
                  } else {
                    // Call an optional hook to record the stack, in case of exception
                    // since it's otherwise lost when execution goes async
                    if (jQuery.Deferred.getStackHook) {
                      process.stackTrace = jQuery.Deferred.getStackHook();
                    }

                    window.setTimeout(process);
                  }
                };
              }

              return jQuery.Deferred(function (newDefer) {
                // progress_handlers.add( ... )
                tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

                tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

                tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
              }).promise();
            },
            // Get a promise for this deferred
            // If obj is provided, the promise aspect is added to the object
            promise: function promise(obj) {
              return obj != null ? jQuery.extend(obj, _promise) : _promise;
            }
          },
              deferred = {}; // Add list-specific methods

          jQuery.each(tuples, function (i, tuple) {
            var list = tuple[2],
                stateString = tuple[5]; // promise.progress = list.add
            // promise.done = list.add
            // promise.fail = list.add

            _promise[tuple[1]] = list.add; // Handle state

            if (stateString) {
              list.add(function () {
                // state = "resolved" (i.e., fulfilled)
                // state = "rejected"
                _state = stateString;
              }, // rejected_callbacks.disable
              // fulfilled_callbacks.disable
              tuples[3 - i][2].disable, // rejected_handlers.disable
              // fulfilled_handlers.disable
              tuples[3 - i][3].disable, // progress_callbacks.lock
              tuples[0][2].lock, // progress_handlers.lock
              tuples[0][3].lock);
            } // progress_handlers.fire
            // fulfilled_handlers.fire
            // rejected_handlers.fire


            list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
            // deferred.resolve = function() { deferred.resolveWith(...) }
            // deferred.reject = function() { deferred.rejectWith(...) }

            deferred[tuple[0]] = function () {
              deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
              return this;
            }; // deferred.notifyWith = list.fireWith
            // deferred.resolveWith = list.fireWith
            // deferred.rejectWith = list.fireWith


            deferred[tuple[0] + "With"] = list.fireWith;
          }); // Make the deferred a promise

          _promise.promise(deferred); // Call given func if any


          if (func) {
            func.call(deferred, deferred);
          } // All done!


          return deferred;
        },
        // Deferred helper
        when: function when(singleValue) {
          var // count of uncompleted subordinates
          remaining = arguments.length,
              // count of unprocessed arguments
          i = remaining,
              // subordinate fulfillment data
          resolveContexts = Array(i),
              resolveValues = _slice.call(arguments),
              // the primary Deferred
          primary = jQuery.Deferred(),
              // subordinate callback factory
          updateFunc = function updateFunc(i) {
            return function (value) {
              resolveContexts[i] = this;
              resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

              if (! --remaining) {
                primary.resolveWith(resolveContexts, resolveValues);
              }
            };
          }; // Single- and empty arguments are adopted like Promise.resolve


          if (remaining <= 1) {
            adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

            if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
              return primary.then();
            }
          } // Multiple arguments are aggregated like Promise.all array elements


          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), primary.reject);
          }

          return primary.promise();
        }
      }); // These usually indicate a programmer mistake during development,
      // warn about them ASAP rather than swallowing them by default.

      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

      jQuery.Deferred.exceptionHook = function (error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
          window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
      };

      jQuery.readyException = function (error) {
        window.setTimeout(function () {
          throw error;
        });
      }; // The deferred used on DOM ready


      var readyList = jQuery.Deferred();

      jQuery.fn.ready = function (fn) {
        readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
        // happens at the time of error handling instead of callback
        // registration.
        .catch(function (error) {
          jQuery.readyException(error);
        });
        return this;
      };

      jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Handle when the DOM is ready
        ready: function ready(wait) {
          // Abort if there are pending holds or we're already ready
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return;
          } // Remember that the DOM is ready


          jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

          if (wait !== true && --jQuery.readyWait > 0) {
            return;
          } // If there are functions bound, to execute


          readyList.resolveWith(document, [jQuery]);
        }
      });
      jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

      function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
      } // Catch cases where $(document).ready() is called
      // after the browser event has already occurred.
      // Support: IE <=9 - 10 only
      // Older IE sometimes signals "interactive" too soon


      if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready);
      } else {
        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

        window.addEventListener("load", completed);
      } // Multifunctional method to get and set values of a collection
      // The value/s can optionally be executed if it's a function


      var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
            len = elems.length,
            bulk = key == null; // Sets many values

        if (toType(key) === "object") {
          chainable = true;

          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw);
          } // Sets one value

        } else if (value !== undefined) {
          chainable = true;

          if (!isFunction(value)) {
            raw = true;
          }

          if (bulk) {
            // Bulk operations run against the entire set
            if (raw) {
              fn.call(elems, value);
              fn = null; // ...except when executing function values
            } else {
              bulk = fn;

              fn = function fn(elem, _key, value) {
                return bulk.call(jQuery(elem), value);
              };
            }
          }

          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
            }
          }
        }

        if (chainable) {
          return elems;
        } // Gets


        if (bulk) {
          return fn.call(elems);
        }

        return len ? fn(elems[0], key) : emptyGet;
      }; // Matches dashed string for camelizing


      var rmsPrefix = /^-ms-/,
          rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

      function fcamelCase(_all, letter) {
        return letter.toUpperCase();
      } // Convert dashed to camelCase; used by the css and data modules
      // Support: IE <=9 - 11, Edge 12 - 15
      // Microsoft forgot to hump their vendor prefix (#9572)


      function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
      }

      var acceptData = function acceptData(owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
      };

      function Data() {
        this.expando = jQuery.expando + Data.uid++;
      }

      Data.uid = 1;
      Data.prototype = {
        cache: function cache(owner) {
          // Check if the owner object already has a cache
          var value = owner[this.expando]; // If not, create one

          if (!value) {
            value = {}; // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return an empty object.

            if (acceptData(owner)) {
              // If it is a node unlikely to be stringify-ed or looped over
              // use plain assignment
              if (owner.nodeType) {
                owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
                // configurable must be true to allow the property to be
                // deleted when data is removed
              } else {
                Object.defineProperty(owner, this.expando, {
                  value: value,
                  configurable: true
                });
              }
            }
          }

          return value;
        },
        set: function set(owner, data, value) {
          var prop,
              cache = this.cache(owner); // Handle: [ owner, key, value ] args
          // Always use camelCase key (gh-2257)

          if (typeof data === "string") {
            cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
          } else {
            // Copy the properties one-by-one to the cache object
            for (prop in data) {
              cache[camelCase(prop)] = data[prop];
            }
          }

          return cache;
        },
        get: function get(owner, key) {
          return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function access(owner, key, value) {
          // In cases where either:
          //
          //   1. No key was specified
          //   2. A string key was specified, but no value provided
          //
          // Take the "read" path and allow the get method to determine
          // which value to return, respectively either:
          //
          //   1. The entire cache object
          //   2. The data stored at the key
          //
          if (key === undefined || key && typeof key === "string" && value === undefined) {
            return this.get(owner, key);
          } // When the key is not a string, or both a key and value
          // are specified, set or extend (existing objects) with either:
          //
          //   1. An object of properties
          //   2. A key and value
          //


          this.set(owner, key, value); // Since the "set" path can have two possible entry points
          // return the expected data based on which path was taken[*]

          return value !== undefined ? value : key;
        },
        remove: function remove(owner, key) {
          var i,
              cache = owner[this.expando];

          if (cache === undefined) {
            return;
          }

          if (key !== undefined) {
            // Support array or space separated string of keys
            if (Array.isArray(key)) {
              // If key is an array of keys...
              // We always set camelCase keys, so remove that.
              key = key.map(camelCase);
            } else {
              key = camelCase(key); // If a key with the spaces exists, use it.
              // Otherwise, create an array by matching non-whitespace

              key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
            }

            i = key.length;

            while (i--) {
              delete cache[key[i]];
            }
          } // Remove the expando if there's no more data


          if (key === undefined || jQuery.isEmptyObject(cache)) {
            // Support: Chrome <=35 - 45
            // Webkit & Blink performance suffers when deleting properties
            // from DOM nodes, so set to undefined instead
            // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
            if (owner.nodeType) {
              owner[this.expando] = undefined;
            } else {
              delete owner[this.expando];
            }
          }
        },
        hasData: function hasData(owner) {
          var cache = owner[this.expando];
          return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
      };
      var dataPriv = new Data();
      var dataUser = new Data(); //	Implementation Summary
      //
      //	1. Enforce API surface and semantic compatibility with 1.9.x branch
      //	2. Improve the module's maintainability by reducing the storage
      //		paths to a single mechanism.
      //	3. Use the same single mechanism to support "private" and "user" data.
      //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
      //	5. Avoid exposing implementation details on user objects (eg. expando properties)
      //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
          rmultiDash = /[A-Z]/g;

      function getData(data) {
        if (data === "true") {
          return true;
        }

        if (data === "false") {
          return false;
        }

        if (data === "null") {
          return null;
        } // Only convert to a number if it doesn't change the string


        if (data === +data + "") {
          return +data;
        }

        if (rbrace.test(data)) {
          return JSON.parse(data);
        }

        return data;
      }

      function dataAttr(elem, key, data) {
        var name; // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute

        if (data === undefined && elem.nodeType === 1) {
          name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
          data = elem.getAttribute(name);

          if (typeof data === "string") {
            try {
              data = getData(data);
            } catch (e) {} // Make sure we set the data so it isn't changed later


            dataUser.set(elem, key, data);
          } else {
            data = undefined;
          }
        }

        return data;
      }

      jQuery.extend({
        hasData: function hasData(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function data(elem, name, _data) {
          return dataUser.access(elem, name, _data);
        },
        removeData: function removeData(elem, name) {
          dataUser.remove(elem, name);
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function _data(elem, name, data) {
          return dataPriv.access(elem, name, data);
        },
        _removeData: function _removeData(elem, name) {
          dataPriv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data: function data(key, value) {
          var i,
              name,
              data,
              elem = this[0],
              attrs = elem && elem.attributes; // Gets all values

          if (key === undefined) {
            if (this.length) {
              data = dataUser.get(elem);

              if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                i = attrs.length;

                while (i--) {
                  // Support: IE 11 only
                  // The attrs elements can be null (#14894)
                  if (attrs[i]) {
                    name = attrs[i].name;

                    if (name.indexOf("data-") === 0) {
                      name = camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }

                dataPriv.set(elem, "hasDataAttrs", true);
              }
            }

            return data;
          } // Sets multiple values


          if (_typeof(key) === "object") {
            return this.each(function () {
              dataUser.set(this, key);
            });
          }

          return access(this, function (value) {
            var data; // The calling jQuery object (element matches) is not empty
            // (and therefore has an element appears at this[ 0 ]) and the
            // `value` parameter was not undefined. An empty jQuery object
            // will result in `undefined` for elem = this[ 0 ] which will
            // throw an exception if an attempt to read a data cache is made.

            if (elem && value === undefined) {
              // Attempt to get data from the cache
              // The key will always be camelCased in Data
              data = dataUser.get(elem, key);

              if (data !== undefined) {
                return data;
              } // Attempt to "discover" the data in
              // HTML5 custom data-* attrs


              data = dataAttr(elem, key);

              if (data !== undefined) {
                return data;
              } // We tried really hard, but the data doesn't exist.


              return;
            } // Set the data...


            this.each(function () {
              // We always store the camelCased key
              dataUser.set(this, key, value);
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function removeData(key) {
          return this.each(function () {
            dataUser.remove(this, key);
          });
        }
      });
      jQuery.extend({
        queue: function queue(elem, type, data) {
          var queue;

          if (elem) {
            type = (type || "fx") + "queue";
            queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

            if (data) {
              if (!queue || Array.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }

            return queue || [];
          }
        },
        dequeue: function dequeue(elem, type) {
          type = type || "fx";

          var queue = jQuery.queue(elem, type),
              startLength = queue.length,
              fn = queue.shift(),
              hooks = jQuery._queueHooks(elem, type),
              next = function next() {
            jQuery.dequeue(elem, type);
          }; // If the fx queue is dequeued, always remove the progress sentinel


          if (fn === "inprogress") {
            fn = queue.shift();
            startLength--;
          }

          if (fn) {
            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if (type === "fx") {
              queue.unshift("inprogress");
            } // Clear up the last queue stop function


            delete hooks.stop;
            fn.call(elem, next, hooks);
          }

          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function _queueHooks(elem, type) {
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks("once memory").add(function () {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });
      jQuery.fn.extend({
        queue: function queue(type, data) {
          var setter = 2;

          if (typeof type !== "string") {
            data = type;
            type = "fx";
            setter--;
          }

          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }

          return data === undefined ? this : this.each(function () {
            var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

            jQuery._queueHooks(this, type);

            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue: function dequeue(type) {
          return this.each(function () {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue: function clearQueue(type) {
          return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function promise(type, obj) {
          var tmp,
              count = 1,
              defer = jQuery.Deferred(),
              elements = this,
              i = this.length,
              resolve = function resolve() {
            if (! --count) {
              defer.resolveWith(elements, [elements]);
            }
          };

          if (typeof type !== "string") {
            obj = type;
            type = undefined;
          }

          type = type || "fx";

          while (i--) {
            tmp = dataPriv.get(elements[i], type + "queueHooks");

            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }

          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      var documentElement = document.documentElement;

      var isAttached = function isAttached(elem) {
        return jQuery.contains(elem.ownerDocument, elem);
      },
          composed = {
        composed: true
      }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
      // Check attachment across shadow DOM boundaries when possible (gh-3504)
      // Support: iOS 10.0-10.2 only
      // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
      // leading to errors. We need to check for `getRootNode`.


      if (documentElement.getRootNode) {
        isAttached = function isAttached(elem) {
          return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
      }

      var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem; // Inline style trumps all

        return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) && jQuery.css(elem, "display") === "none";
      };

      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted,
            scale,
            maxIterations = 20,
            currentValue = tween ? function () {
          return tween.cur();
        } : function () {
          return jQuery.css(elem, prop, "");
        },
            initial = currentValue(),
            unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
            // Starting value computation is required for potential unit mismatches
        initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

        if (initialInUnit && initialInUnit[3] !== unit) {
          // Support: Firefox <=54
          // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
          initial = initial / 2; // Trust units reported by jQuery.css

          unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

          initialInUnit = +initial || 1;

          while (maxIterations--) {
            // Evaluate and update our best guess (doubling guesses that zero out).
            // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
            jQuery.style(elem, prop, initialInUnit + unit);

            if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
              maxIterations = 0;
            }

            initialInUnit = initialInUnit / scale;
          }

          initialInUnit = initialInUnit * 2;
          jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

          valueParts = valueParts || [];
        }

        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted;
          }
        }

        return adjusted;
      }

      var defaultDisplayMap = {};

      function getDefaultDisplay(elem) {
        var temp,
            doc = elem.ownerDocument,
            nodeName = elem.nodeName,
            display = defaultDisplayMap[nodeName];

        if (display) {
          return display;
        }

        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);

        if (display === "none") {
          display = "block";
        }

        defaultDisplayMap[nodeName] = display;
        return display;
      }

      function showHide(elements, show) {
        var display,
            elem,
            values = [],
            index = 0,
            length = elements.length; // Determine new display value for elements that need to change

        for (; index < length; index++) {
          elem = elements[index];

          if (!elem.style) {
            continue;
          }

          display = elem.style.display;

          if (show) {
            // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
            // check is required in this first loop unless we have a nonempty display value (either
            // inline or about-to-be-restored)
            if (display === "none") {
              values[index] = dataPriv.get(elem, "display") || null;

              if (!values[index]) {
                elem.style.display = "";
              }
            }

            if (elem.style.display === "" && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem);
            }
          } else {
            if (display !== "none") {
              values[index] = "none"; // Remember what we're overwriting

              dataPriv.set(elem, "display", display);
            }
          }
        } // Set the display of the elements in a second loop to avoid constant reflow


        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index];
          }
        }

        return elements;
      }

      jQuery.fn.extend({
        show: function show() {
          return showHide(this, true);
        },
        hide: function hide() {
          return showHide(this);
        },
        toggle: function toggle(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }

          return this.each(function () {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
      var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

      (function () {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild(document.createElement("div")),
            input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)

        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input); // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments

        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned

        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only
        // IE <=9 replaces <option> tags with their contents when inserted outside of
        // the select element.

        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
      })(); // We have to close these tags to support XHTML (#13200)


      var wrapMap = {
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td; // Support: IE <=9 only

      if (!support.option) {
        wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
      }

      function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;

        if (typeof context.getElementsByTagName !== "undefined") {
          ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
          ret = context.querySelectorAll(tag || "*");
        } else {
          ret = [];
        }

        if (tag === undefined || tag && nodeName(context, tag)) {
          return jQuery.merge([context], ret);
        }

        return ret;
      } // Mark scripts as having already been evaluated


      function setGlobalEval(elems, refElements) {
        var i = 0,
            l = elems.length;

        for (; i < l; i++) {
          dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
      }

      var rhtml = /<|&#?\w+;/;

      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem,
            tmp,
            tag,
            wrap,
            attached,
            j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;

        for (; i < l; i++) {
          elem = elems[i];

          if (elem || elem === 0) {
            // Add nodes directly
            if (toType(elem) === "object") {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
            } else {
              tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

              tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

              j = wrap[0];

              while (j--) {
                tmp = tmp.lastChild;
              } // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit


              jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

              tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

              tmp.textContent = "";
            }
          }
        } // Remove wrapper from fragment


        fragment.textContent = "";
        i = 0;

        while (elem = nodes[i++]) {
          // Skip elements already in the context collection (trac-4087)
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem);
            }

            continue;
          }

          attached = isAttached(elem); // Append to fragment

          tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

          if (attached) {
            setGlobalEval(tmp);
          } // Capture executables


          if (scripts) {
            j = 0;

            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || "")) {
                scripts.push(elem);
              }
            }
          }
        }

        return fragment;
      }

      var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

      function returnTrue() {
        return true;
      }

      function returnFalse() {
        return false;
      } // Support: IE <=9 - 11+
      // focus() and blur() are asynchronous, except when they are no-op.
      // So expect focus to be synchronous when the element is already active,
      // and blur to be synchronous when the element is not already active.
      // (focus and blur are always synchronous in other supported browsers,
      // this just defines when we can count on it).


      function expectSync(elem, type) {
        return elem === safeActiveElement() === (type === "focus");
      } // Support: IE <=9 only
      // Accessing document.activeElement can throw unexpectedly
      // https://bugs.jquery.com/ticket/13393


      function safeActiveElement() {
        try {
          return document.activeElement;
        } catch (err) {}
      }

      function _on(elem, types, selector, data, fn, one) {
        var origFn, type; // Types can be a map of types/handlers

        if (_typeof(types) === "object") {
          // ( types-Object, selector, data )
          if (typeof selector !== "string") {
            // ( types-Object, data )
            data = data || selector;
            selector = undefined;
          }

          for (type in types) {
            _on(elem, type, selector, data, types[type], one);
          }

          return elem;
        }

        if (data == null && fn == null) {
          // ( types, fn )
          fn = selector;
          data = selector = undefined;
        } else if (fn == null) {
          if (typeof selector === "string") {
            // ( types, selector, fn )
            fn = data;
            data = undefined;
          } else {
            // ( types, data, fn )
            fn = data;
            data = selector;
            selector = undefined;
          }
        }

        if (fn === false) {
          fn = returnFalse;
        } else if (!fn) {
          return elem;
        }

        if (one === 1) {
          origFn = fn;

          fn = function fn(event) {
            // Can use an empty set, since event contains the info
            jQuery().off(event);
            return origFn.apply(this, arguments);
          }; // Use same guid so caller can remove using origFn


          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }

        return elem.each(function () {
          jQuery.event.add(this, types, fn, data, selector);
        });
      }
      /*
       * Helper functions for managing events -- not part of the public interface.
       * Props to Dean Edwards' addEvent library for many of the ideas.
       */


      jQuery.event = {
        global: {},
        add: function add(elem, types, handler, data, selector) {
          var handleObjIn,
              eventHandle,
              tmp,
              events,
              t,
              handleObj,
              special,
              handlers,
              type,
              namespaces,
              origType,
              elemData = dataPriv.get(elem); // Only attach events to objects that accept data

          if (!acceptData(elem)) {
            return;
          } // Caller can pass in an object of custom data in lieu of the handler


          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          } // Ensure that invalid selectors throw exceptions at attach time
          // Evaluate against documentElement in case elem is a non-element node (e.g., document)


          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector);
          } // Make sure that the handler has a unique ID, used to find/remove it later


          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          } // Init the element's event structure and main handler, if this is the first


          if (!(events = elemData.events)) {
            events = elemData.events = Object.create(null);
          }

          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function (e) {
              // Discard the second event of a jQuery.event.trigger() and
              // when an event is called after a page has unloaded
              return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
            };
          } // Handle multiple events separated by a space


          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;

          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

            if (!type) {
              continue;
            } // If event changes its type, use the special event handlers for the changed type


            special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

            type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

            special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn); // Init the event handler queue if we're the first

            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle);
                }
              }
            }

            if (special.add) {
              special.add.call(elem, handleObj);

              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            } // Add to the element's handler list, delegates in front


            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            } // Keep track of which events have ever been used, for event optimization


            jQuery.event.global[type] = true;
          }
        },
        // Detach an event or set of events from an element
        remove: function remove(elem, types, handler, selector, mappedTypes) {
          var j,
              origCount,
              tmp,
              events,
              t,
              handleObj,
              special,
              handlers,
              type,
              namespaces,
              origType,
              elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

          if (!elemData || !(events = elemData.events)) {
            return;
          } // Once for each type.namespace in types; type may be omitted


          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;

          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }

              continue;
            }

            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

            origCount = j = handlers.length;

            while (j--) {
              handleObj = handlers[j];

              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                handlers.splice(j, 1);

                if (handleObj.selector) {
                  handlers.delegateCount--;
                }

                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            } // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)


            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }

              delete events[type];
            }
          } // Remove data and the expando if it's no longer used


          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, "handle events");
          }
        },
        dispatch: function dispatch(nativeEvent) {
          var i,
              j,
              ret,
              matched,
              handleObj,
              handlerQueue,
              args = new Array(arguments.length),
              // Make a writable jQuery.Event from the native event object
          event = jQuery.event.fix(nativeEvent),
              handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
              special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

          args[0] = event;

          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i];
          }

          event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          } // Determine handlers


          handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

          i = 0;

          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;

            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              // If the event is namespaced, then each handler is only invoked if it is
              // specially universal or its namespaces are a superset of the event's.
              if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          } // Call the postDispatch hook for the mapped type


          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }

          return event.result;
        },
        handlers: function handlers(event, _handlers) {
          var i,
              handleObj,
              sel,
              matchedHandlers,
              matchedSelectors,
              handlerQueue = [],
              delegateCount = _handlers.delegateCount,
              cur = event.target; // Find delegate handlers

          if (delegateCount && // Support: IE <=9
          // Black-hole SVG <use> instance trees (trac-13180)
          cur.nodeType && // Support: Firefox <=42
          // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
          // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
          // Support: IE 11 only
          // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
          !(event.type === "click" && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              // Don't check non-elements (#13208)
              // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
              if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};

                for (i = 0; i < delegateCount; i++) {
                  handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

                  sel = handleObj.selector + " ";

                  if (matchedSelectors[sel] === undefined) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                  }

                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj);
                  }
                }

                if (matchedHandlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matchedHandlers
                  });
                }
              }
            }
          } // Add the remaining (directly-bound) handlers


          cur = this;

          if (delegateCount < _handlers.length) {
            handlerQueue.push({
              elem: cur,
              handlers: _handlers.slice(delegateCount)
            });
          }

          return handlerQueue;
        },
        addProp: function addProp(name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: isFunction(hook) ? function () {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            } : function () {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },
            set: function set(value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value: value
              });
            }
          });
        },
        fix: function fix(originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
          load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
          },
          click: {
            // Utilize native event to ensure correct state for checkable inputs
            setup: function setup(data) {
              // For mutual compressibility with _default, replace `this` access with a local var.
              // `|| data` is dead code meant only to preserve the variable through minification.
              var el = this || data; // Claim the first handler

              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                // dataPriv.set( el, "click", ... )
                leverageNative(el, "click", returnTrue);
              } // Return false to allow normal processing in the caller


              return false;
            },
            trigger: function trigger(data) {
              // For mutual compressibility with _default, replace `this` access with a local var.
              // `|| data` is dead code meant only to preserve the variable through minification.
              var el = this || data; // Force setup before triggering a click

              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click");
              } // Return non-false to allow normal event-path propagation


              return true;
            },
            // For cross-browser consistency, suppress native .click() on links
            // Also prevent it if we're currently inside a leveraged native-event stack
            _default: function _default(event) {
              var target = event.target;
              return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
            }
          },
          beforeunload: {
            postDispatch: function postDispatch(event) {
              // Support: Firefox 20+
              // Firefox doesn't alert if the returnValue field is not set.
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        }
      }; // Ensure the presence of an event listener that handles manually-triggered
      // synthetic events by interrupting progress until reinvoked in response to
      // *native* events that it fires directly, ensuring that state changes have
      // already occurred before other listeners are invoked.

      function leverageNative(el, type, expectSync) {
        // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
        if (!expectSync) {
          if (dataPriv.get(el, type) === undefined) {
            jQuery.event.add(el, type, returnTrue);
          }

          return;
        } // Register the controller as a special universal handler for all event namespaces


        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
          namespace: false,
          handler: function handler(event) {
            var notAsync,
                result,
                saved = dataPriv.get(this, type);

            if (event.isTrigger & 1 && this[type]) {
              // Interrupt processing of the outer synthetic .trigger()ed event
              // Saved data should be false in such cases, but might be a leftover capture object
              // from an async native handler (gh-4350)
              if (!saved.length) {
                // Store arguments for use when handling the inner native event
                // There will always be at least one argument (an event object), so this array
                // will not be confused with a leftover capture object.
                saved = _slice.call(arguments);
                dataPriv.set(this, type, saved); // Trigger the native event and capture its result
                // Support: IE <=9 - 11+
                // focus() and blur() are asynchronous

                notAsync = expectSync(this, type);
                this[type]();
                result = dataPriv.get(this, type);

                if (saved !== result || notAsync) {
                  dataPriv.set(this, type, false);
                } else {
                  result = {};
                }

                if (saved !== result) {
                  // Cancel the outer synthetic event
                  event.stopImmediatePropagation();
                  event.preventDefault(); // Support: Chrome 86+
                  // In Chrome, if an element having a focusout handler is blurred by
                  // clicking outside of it, it invokes the handler synchronously. If
                  // that handler calls `.remove()` on the element, the data is cleared,
                  // leaving `result` undefined. We need to guard against this.

                  return result && result.value;
                } // If this is an inner synthetic event for an event with a bubbling surrogate
                // (focus or blur), assume that the surrogate already propagated from triggering the
                // native event and prevent that from happening again here.
                // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                // less bad than duplication.

              } else if ((jQuery.event.special[type] || {}).delegateType) {
                event.stopPropagation();
              } // If this is a native event triggered above, everything is now in order
              // Fire an inner synthetic event with the original arguments

            } else if (saved.length) {
              // ...and capture the result
              dataPriv.set(this, type, {
                value: jQuery.event.trigger( // Support: IE <=9 - 11+
                // Extend with the prototype to reset the above stopImmediatePropagation()
                jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
              }); // Abort handling of the native event

              event.stopImmediatePropagation();
            }
          }
        });
      }

      jQuery.removeEvent = function (elem, type, handle) {
        // This "if" is needed for plain objects
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle);
        }
      };

      jQuery.Event = function (src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        } // Event object


        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type; // Events bubbling up the document may have been marked as prevented
          // by a handler lower down the tree; reflect the correct value.

          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
          src.returnValue === false ? returnTrue : returnFalse; // Create target properties
          // Support: Safari <=6 - 7 only
          // Target should not be a text node (#504, #13143)

          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget; // Event type
        } else {
          this.type = src;
        } // Put explicitly provided properties onto the event object


        if (props) {
          jQuery.extend(this, props);
        } // Create a timestamp if incoming event doesn't have one


        this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

        this[jQuery.expando] = true;
      }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
      // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function preventDefault() {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;

          if (e && !this.isSimulated) {
            e.preventDefault();
          }
        },
        stopPropagation: function stopPropagation() {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;

          if (e && !this.isSimulated) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function stopImmediatePropagation() {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;

          if (e && !this.isSimulated) {
            e.stopImmediatePropagation();
          }

          this.stopPropagation();
        }
      }; // Includes all common event props including KeyEvent and MouseEvent specific props

      jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
      }, jQuery.event.addProp);
      jQuery.each({
        focus: "focusin",
        blur: "focusout"
      }, function (type, delegateType) {
        jQuery.event.special[type] = {
          // Utilize native event if possible so blur/focus sequence is correct
          setup: function setup() {
            // Claim the first handler
            // dataPriv.set( this, "focus", ... )
            // dataPriv.set( this, "blur", ... )
            leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller

            return false;
          },
          trigger: function trigger() {
            // Force setup before trigger
            leverageNative(this, type); // Return non-false to allow normal event-path propagation

            return true;
          },
          // Suppress native focus or blur as it's already being fired
          // in leverageNative.
          _default: function _default() {
            return true;
          },
          delegateType: delegateType
        };
      }); // Create mouseenter/leave events using mouseover/out and event-time checks
      // so that event delegation works in jQuery.
      // Do the same for pointerenter/pointerleave and pointerover/pointerout
      //
      // Support: Safari 7 only
      // Safari sends mouseenter too often; see:
      // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
      // for the description of the bug (it existed in older Chrome versions as well).

      jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function (orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function handle(event) {
            var ret,
                target = this,
                related = event.relatedTarget,
                handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window

            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }

            return ret;
          }
        };
      });
      jQuery.fn.extend({
        on: function on(types, selector, data, fn) {
          return _on(this, types, selector, data, fn);
        },
        one: function one(types, selector, data, fn) {
          return _on(this, types, selector, data, fn, 1);
        },
        off: function off(types, selector, fn) {
          var handleObj, type;

          if (types && types.preventDefault && types.handleObj) {
            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this;
          }

          if (_typeof(types) === "object") {
            // ( types-object [, selector] )
            for (type in types) {
              this.off(type, selector, types[type]);
            }

            return this;
          }

          if (selector === false || typeof selector === "function") {
            // ( types [, fn] )
            fn = selector;
            selector = undefined;
          }

          if (fn === false) {
            fn = returnFalse;
          }

          return this.each(function () {
            jQuery.event.remove(this, types, fn, selector);
          });
        }
      });
      var // Support: IE <=10 - 11, Edge 12 - 13 only
      // In IE/Edge using regex groups here causes severe slowdowns.
      // See https://connect.microsoft.com/IE/feedback/details/1736512/
      rnoInnerhtml = /<script|<style|<link/i,
          // checked="checked" or checked
      rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
          rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

      function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
          return jQuery(elem).children("tbody")[0] || elem;
        }

        return elem;
      } // Replace/restore the type attribute of script elements for safe DOM manipulation


      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }

      function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
          elem.type = elem.type.slice(5);
        } else {
          elem.removeAttribute("type");
        }

        return elem;
      }

      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, udataOld, udataCur, events;

        if (dest.nodeType !== 1) {
          return;
        } // 1. Copy private data: events, handlers, etc.


        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.get(src);
          events = pdataOld.events;

          if (events) {
            dataPriv.remove(dest, "handle events");

            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        } // 2. Copy user data


        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);
          dataUser.set(dest, udataCur);
        }
      } // Fix IE bugs, see support tests


      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

        if (nodeName === "input" && rcheckableType.test(src.type)) {
          dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === "input" || nodeName === "textarea") {
          dest.defaultValue = src.defaultValue;
        }
      }

      function domManip(collection, args, callback, ignored) {
        // Flatten any nested arrays
        args = flat(args);
        var fragment,
            first,
            scripts,
            hasScripts,
            node,
            doc,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[0],
            valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
          return collection.each(function (index) {
            var self = collection.eq(index);

            if (valueIsFunction) {
              args[0] = value.call(this, index, self.html());
            }

            domManip(self, args, callback, ignored);
          });
        }

        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;

          if (fragment.childNodes.length === 1) {
            fragment = first;
          } // Require either new content or an interest in ignored elements to invoke the callback


          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
            hasScripts = scripts.length; // Use the original fragment for the last item
            // instead of the first because it can end up
            // being emptied incorrectly in certain situations (#8070).

            for (; i < l; i++) {
              node = fragment;

              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

                if (hasScripts) {
                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(scripts, getAll(node, "script"));
                }
              }

              callback.call(collection[i], node, i);
            }

            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

              jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];

                if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                  if (node.src && (node.type || "").toLowerCase() !== "module") {
                    // Optional AJAX dependency, but won't run scripts if not present
                    if (jQuery._evalUrl && !node.noModule) {
                      jQuery._evalUrl(node.src, {
                        nonce: node.nonce || node.getAttribute("nonce")
                      }, doc);
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                  }
                }
              }
            }
          }
        }

        return collection;
      }

      function _remove(elem, selector, keepData) {
        var node,
            nodes = selector ? jQuery.filter(selector, elem) : elem,
            i = 0;

        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node));
          }

          if (node.parentNode) {
            if (keepData && isAttached(node)) {
              setGlobalEval(getAll(node, "script"));
            }

            node.parentNode.removeChild(node);
          }
        }

        return elem;
      }

      jQuery.extend({
        htmlPrefilter: function htmlPrefilter(html) {
          return html;
        },
        clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
          var i,
              l,
              srcElements,
              destElements,
              clone = elem.cloneNode(true),
              inPage = isAttached(elem); // Fix IE cloning issues

          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
            destElements = getAll(clone);
            srcElements = getAll(elem);

            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          } // Copy the events from the original to the clone


          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);

              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          } // Preserve script evaluation history


          destElements = getAll(clone, "script");

          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          } // Return the cloned set


          return clone;
        },
        cleanData: function cleanData(elems) {
          var data,
              elem,
              type,
              special = jQuery.event.special,
              i = 0;

          for (; (elem = elems[i]) !== undefined; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                } // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove


                elem[dataPriv.expando] = undefined;
              }

              if (elem[dataUser.expando]) {
                // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined;
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach: function detach(selector) {
          return _remove(this, selector, true);
        },
        remove: function remove(selector) {
          return _remove(this, selector);
        },
        text: function text(value) {
          return access(this, function (value) {
            return value === undefined ? jQuery.text(this) : this.empty().each(function () {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value;
              }
            });
          }, null, value, arguments.length);
        },
        append: function append() {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function prepend() {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function before() {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function after() {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        empty: function empty() {
          var elem,
              i = 0;

          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              // Prevent memory leaks
              jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

              elem.textContent = "";
            }
          }

          return this;
        },
        clone: function clone(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function () {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function html(value) {
          return access(this, function (value) {
            var elem = this[0] || {},
                i = 0,
                l = this.length;

            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML;
            } // See if we can take a shortcut and just use innerHTML


            if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
              value = jQuery.htmlPrefilter(value);

              try {
                for (; i < l; i++) {
                  elem = this[i] || {}; // Remove element nodes and prevent memory leaks

                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value;
                  }
                }

                elem = 0; // If using innerHTML throws an exception, use the fallback method
              } catch (e) {}
            }

            if (elem) {
              this.empty().append(value);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function replaceWith() {
          var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

          return domManip(this, arguments, function (elem) {
            var parent = this.parentNode;

            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));

              if (parent) {
                parent.replaceChild(elem, this);
              }
            } // Force callback invocation

          }, ignored);
        }
      });
      jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function (name, original) {
        jQuery.fn[name] = function (selector) {
          var elems,
              ret = [],
              insert = jQuery(selector),
              last = insert.length - 1,
              i = 0;

          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
            // .get() because push.apply(_, arraylike) throws on ancient WebKit

            push.apply(ret, elems.get());
          }

          return this.pushStack(ret);
        };
      });
      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

      var getStyles = function getStyles(elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;

        if (!view || !view.opener) {
          view = window;
        }

        return view.getComputedStyle(elem);
      };

      var swap = function swap(elem, options, callback) {
        var ret,
            name,
            old = {}; // Remember the old values, and insert the new ones

        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }

        ret = callback.call(elem); // Revert the old values

        for (name in options) {
          elem.style[name] = old[name];
        }

        return ret;
      };

      var rboxStyle = new RegExp(cssExpand.join("|"), "i");

      (function () {
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
          // This is a singleton, we need to execute it only once
          if (!div) {
            return;
          }

          container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
          div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
          documentElement.appendChild(container).appendChild(div);
          var divStyle = window.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

          reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
          // Some styles come back with percentage values, even though they shouldn't

          div.style.right = "60%";
          pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
          // Detect misreporting of content dimensions for box-sizing:border-box elements

          boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
          // Detect overflow:scroll screwiness (gh-3699)
          // Support: Chrome <=64
          // Don't get tricked when zoom affects offsetWidth (gh-4029)

          div.style.position = "absolute";
          scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
          documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
          // it will also be a sign that checks already performed

          div = null;
        }

        function roundPixelMeasures(measure) {
          return Math.round(parseFloat(measure));
        }

        var pixelPositionVal,
            boxSizingReliableVal,
            scrollboxSizeVal,
            pixelBoxStylesVal,
            reliableTrDimensionsVal,
            reliableMarginLeftVal,
            container = document.createElement("div"),
            div = document.createElement("div"); // Finish early in limited (non-browser) environments

        if (!div.style) {
          return;
        } // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)


        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support, {
          boxSizingReliable: function boxSizingReliable() {
            computeStyleTests();
            return boxSizingReliableVal;
          },
          pixelBoxStyles: function pixelBoxStyles() {
            computeStyleTests();
            return pixelBoxStylesVal;
          },
          pixelPosition: function pixelPosition() {
            computeStyleTests();
            return pixelPositionVal;
          },
          reliableMarginLeft: function reliableMarginLeft() {
            computeStyleTests();
            return reliableMarginLeftVal;
          },
          scrollboxSize: function scrollboxSize() {
            computeStyleTests();
            return scrollboxSizeVal;
          },
          // Support: IE 9 - 11+, Edge 15 - 18+
          // IE/Edge misreport `getComputedStyle` of table rows with width/height
          // set in CSS while `offset*` properties report correct values.
          // Behavior in IE 9 is more subtle than in newer versions & it passes
          // some versions of this test; make sure not to make it pass there!
          //
          // Support: Firefox 70+
          // Only Firefox includes border widths
          // in computed dimensions. (gh-4529)
          reliableTrDimensions: function reliableTrDimensions() {
            var table, tr, trChild, trStyle;

            if (reliableTrDimensionsVal == null) {
              table = document.createElement("table");
              tr = document.createElement("tr");
              trChild = document.createElement("div");
              table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
              tr.style.cssText = "border:1px solid"; // Support: Chrome 86+
              // Height set through cssText does not get applied.
              // Computed height then comes back as 0.

              tr.style.height = "1px";
              trChild.style.height = "9px"; // Support: Android 8 Chrome 86+
              // In our bodyBackground.html iframe,
              // display for all div elements is set to "inline",
              // which causes a problem only in Android 8 Chrome 86.
              // Ensuring the div is display: block
              // gets around this issue.

              trChild.style.display = "block";
              documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
              trStyle = window.getComputedStyle(tr);
              reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
              documentElement.removeChild(table);
            }

            return reliableTrDimensionsVal;
          }
        });
      })();

      function curCSS(elem, name, computed) {
        var width,
            minWidth,
            maxWidth,
            ret,
            // Support: Firefox 51+
        // Retrieving style before computed somehow
        // fixes an issue with getting wrong values
        // on detached elements
        style = elem.style;
        computed = computed || getStyles(elem); // getPropertyValue is needed for:
        //   .css('filter') (IE 9 only, #12537)
        //   .css('--customProperty) (#3144)

        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];

          if (ret === "" && !isAttached(elem)) {
            ret = jQuery.style(elem, name);
          } // A tribute to the "awesome hack by Dean Edwards"
          // Android Browser returns percentage for some values,
          // but width seems to be reliably pixels.
          // This is against the CSSOM draft spec:
          // https://drafts.csswg.org/cssom/#resolved-values


          if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
            // Remember the original values
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth; // Put in the new values to get a computed value out

            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width; // Revert the changed values

            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }

        return ret !== undefined ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + "" : ret;
      }

      function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
          get: function get() {
            if (conditionFn()) {
              // Hook not needed (or it's not possible to use it due
              // to missing dependency), remove it.
              delete this.get;
              return;
            } // Hook needed; redefine it so that the support test is not executed again.


            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }

      var cssPrefixes = ["Webkit", "Moz", "ms"],
          emptyStyle = document.createElement("div").style,
          vendorProps = {}; // Return a vendor-prefixed property or undefined

      function vendorPropName(name) {
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1),
            i = cssPrefixes.length;

        while (i--) {
          name = cssPrefixes[i] + capName;

          if (name in emptyStyle) {
            return name;
          }
        }
      } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property


      function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];

        if (final) {
          return final;
        }

        if (name in emptyStyle) {
          return name;
        }

        return vendorProps[name] = vendorPropName(name) || name;
      }

      var // Swappable if display is none or starts with table
      // except "table", "table-cell", or "table-caption"
      // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
      rdisplayswap = /^(none|table(?!-c[ea]).+)/,
          rcustomProp = /^--/,
          cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
      },
          cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
      };

      function setPositiveNumber(_elem, value, subtract) {
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
      }

      function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0,
            extra = 0,
            delta = 0; // Adjustment may not be necessary

        if (box === (isBorderBox ? "border" : "content")) {
          return 0;
        }

        for (; i < 4; i += 2) {
          // Both box models exclude margin
          if (box === "margin") {
            delta += jQuery.css(elem, box + cssExpand[i], true, styles);
          } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


          if (!isBorderBox) {
            // Add padding
            delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

            if (box !== "padding") {
              delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
            } else {
              extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            } // If we get here with a border-box (content + padding + border), we're seeking "content" or
            // "padding" or "margin"

          } else {
            // For "content", subtract padding
            if (box === "content") {
              delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            } // For "content" or "padding", subtract border


            if (box !== "margin") {
              delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        } // Account for positive content-box scroll gutter when requested by providing computedVal


        if (!isBorderBox && computedVal >= 0) {
          // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
          // Assuming integer scroll gutter, subtract the rest and round down
          delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
          // Use an explicit zero to avoid NaN (gh-3964)
          )) || 0;
        }

        return delta;
      }

      function getWidthOrHeight(elem, dimension, extra) {
        // Start with computed style
        var styles = getStyles(elem),
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
        // Fake content-box until we know it's needed to know the true value.
        boxSizingNeeded = !support.boxSizingReliable() || extra,
            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            valueIsBorderBox = isBorderBox,
            val = curCSS(elem, dimension, styles),
            offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54
        // Return a confounding non-pixel value or feign ignorance, as appropriate.

        if (rnumnonpx.test(val)) {
          if (!extra) {
            return val;
          }

          val = "auto";
        } // Support: IE 9 - 11 only
        // Use offsetWidth/offsetHeight for when box sizing is unreliable.
        // In those cases, the computed value can be trusted to be border-box.


        if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === "auto" || // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
        elem.getClientRects().length) {
          isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.
          // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
          // retrieved value as a content box dimension.

          valueIsBorderBox = offsetProp in elem;

          if (valueIsBorderBox) {
            val = elem[offsetProp];
          }
        } // Normalize "" and auto


        val = parseFloat(val) || 0; // Adjust for the element's box model

        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val) + "px";
      }

      jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
          opacity: {
            get: function get(elem, computed) {
              if (computed) {
                // We should always get a number back from opacity
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }
          }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
          "animationIterationCount": true,
          "columnCount": true,
          "fillOpacity": true,
          "flexGrow": true,
          "flexShrink": true,
          "fontWeight": true,
          "gridArea": true,
          "gridColumn": true,
          "gridColumnEnd": true,
          "gridColumnStart": true,
          "gridRow": true,
          "gridRowEnd": true,
          "gridRowStart": true,
          "lineHeight": true,
          "opacity": true,
          "order": true,
          "orphans": true,
          "widows": true,
          "zIndex": true,
          "zoom": true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {},
        // Get and set the style property on a DOM Node
        style: function style(elem, name, value, extra) {
          // Don't set styles on text and comment nodes
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          } // Make sure that we're working with the right name


          var ret,
              type,
              hooks,
              origName = camelCase(name),
              isCustomProp = rcustomProp.test(name),
              style = elem.style; // Make sure that we're working with the right name. We don't
          // want to query the value if it is a CSS custom property
          // since they are user-defined.

          if (!isCustomProp) {
            name = finalPropName(origName);
          } // Gets hook for the prefixed version, then unprefixed version


          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

          if (value !== undefined) {
            type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret); // Fixes bug #9237

              type = "number";
            } // Make sure that null and NaN values aren't set (#7116)


            if (value == null || value !== value) {
              return;
            } // If a number was passed in, add the unit (except for certain CSS properties)
            // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
            // "px" to a few hardcoded values.


            if (type === "number" && !isCustomProp) {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
            } // background-* props affect original clone's values


            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
              style[name] = "inherit";
            } // If a hook was provided, use that value, otherwise just set the specified value


            if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
              if (isCustomProp) {
                style.setProperty(name, value);
              } else {
                style[name] = value;
              }
            }
          } else {
            // If a hook was provided get the non-computed value from there
            if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
              return ret;
            } // Otherwise just get the value from the style object


            return style[name];
          }
        },
        css: function css(elem, name, extra, styles) {
          var val,
              num,
              hooks,
              origName = camelCase(name),
              isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
          // want to modify the value if it is a CSS custom property
          // since they are user-defined.

          if (!isCustomProp) {
            name = finalPropName(origName);
          } // Try prefixed name followed by the unprefixed name


          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          } // Otherwise, if a way to get the computed value exists, use that


          if (val === undefined) {
            val = curCSS(elem, name, styles);
          } // Convert "normal" to computed value


          if (val === "normal" && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          } // Make numeric if forced or a qualifier was provided and val looks numeric


          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val;
          }

          return val;
        }
      });
      jQuery.each(["height", "width"], function (_i, dimension) {
        jQuery.cssHooks[dimension] = {
          get: function get(elem, computed, extra) {
            if (computed) {
              // Certain elements can have dimension info if we invisibly show them
              // but it must have a current display style that would benefit
              return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
              // Table columns in Safari have non-zero offsetWidth & zero
              // getBoundingClientRect().width unless display is changed.
              // Support: IE <=11 only
              // Running getBoundingClientRect on a disconnected node
              // in IE throws an error.
              !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, dimension, extra);
              }) : getWidthOrHeight(elem, dimension, extra);
            }
          },
          set: function set(elem, value, extra) {
            var matches,
                styles = getStyles(elem),
                // Only read styles.position if the test has a chance to fail
            // to avoid forcing a reflow.
            scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
                // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
            boxSizingNeeded = scrollboxSizeBuggy || extra,
                isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and
            // faking a content-box to get border and padding (gh-3699)

            if (isBorderBox && scrollboxSizeBuggy) {
              subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
            } // Convert to pixels if value adjustment is needed


            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
              elem.style[dimension] = value;
              value = jQuery.css(elem, dimension);
            }

            return setPositiveNumber(elem, value, subtract);
          }
        };
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
          return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
            marginLeft: 0
          }, function () {
            return elem.getBoundingClientRect().left;
          })) + "px";
        }
      }); // These hooks are used by animate to expand properties

      jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function expand(value) {
            var i = 0,
                expanded = {},
                // Assumes a single number if not a string
            parts = typeof value === "string" ? value.split(" ") : [value];

            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }

            return expanded;
          }
        };

        if (prefix !== "margin") {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery.fn.extend({
        css: function css(name, value) {
          return access(this, function (elem, name, value) {
            var styles,
                len,
                map = {},
                i = 0;

            if (Array.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;

              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles);
              }

              return map;
            }

            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
          }, name, value, arguments.length > 1);
        }
      });

      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }

      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function init(elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function cur() {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function run(percent) {
          var eased,
              hooks = Tween.propHooks[this.prop];

          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
          } else {
            this.pos = eased = percent;
          }

          this.now = (this.end - this.start) * eased + this.start;

          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }

          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }

          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function get(tween) {
            var result; // Use a property on the element directly when it is not a DOM element,
            // or when there is no matching style property that exists.

            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop];
            } // Passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails.
            // Simple values such as "10px" are parsed to Float;
            // complex values such as "rotate(1rad)" are returned as-is.


            result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

            return !result || result === "auto" ? 0 : result;
          },
          set: function set(tween) {
            // Use step hook for back compat.
            // Use cssHook if its there.
            // Use .style if available and use plain properties where available.
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      }; // Support: IE <=9 only
      // Panic based approach to setting things on disconnected nodes

      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function set(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery.easing = {
        linear: function linear(p) {
          return p;
        },
        swing: function swing(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
      };
      jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point

      jQuery.fx.step = {};
      var fxNow,
          inProgress,
          rfxtypes = /^(?:toggle|show|hide)$/,
          rrun = /queueHooks$/;

      function schedule() {
        if (inProgress) {
          if (document.hidden === false && window.requestAnimationFrame) {
            window.requestAnimationFrame(schedule);
          } else {
            window.setTimeout(schedule, jQuery.fx.interval);
          }

          jQuery.fx.tick();
        }
      } // Animations created synchronously will run synchronously


      function createFxNow() {
        window.setTimeout(function () {
          fxNow = undefined;
        });
        return fxNow = Date.now();
      } // Generate parameters to create a standard animation


      function genFx(type, includeWidth) {
        var which,
            i = 0,
            attrs = {
          height: type
        }; // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right

        includeWidth = includeWidth ? 1 : 0;

        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }

        return attrs;
      }

      function createTween(value, prop, animation) {
        var tween,
            collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
            index = 0,
            length = collection.length;

        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            // We're done with this property
            return tween;
          }
        }
      }

      function defaultPrefilter(elem, props, opts) {
        var prop,
            value,
            toggle,
            hooks,
            oldfire,
            propTween,
            restoreDisplay,
            display,
            isBox = "width" in props || "height" in props,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHiddenWithinTree(elem),
            dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks

        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, "fx");

          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;

            hooks.empty.fire = function () {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }

          hooks.unqueued++;
          anim.always(function () {
            // Ensure the complete handler is called before this completes
            anim.always(function () {
              hooks.unqueued--;

              if (!jQuery.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        } // Detect show/hide animations


        for (prop in props) {
          value = props[prop];

          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";

            if (value === (hidden ? "hide" : "show")) {
              // Pretend to be hidden if this is a "show" and
              // there is still data from a stopped show/hide
              if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                hidden = true; // Ignore all other no-op show/hide data
              } else {
                continue;
              }
            }

            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          }
        } // Bail out if this is a no-op like .hide().hide()


        propTween = !jQuery.isEmptyObject(props);

        if (!propTween && jQuery.isEmptyObject(orig)) {
          return;
        } // Restrict "overflow" and "display" styles during box animations


        if (isBox && elem.nodeType === 1) {
          // Support: IE <=9 - 11, Edge 12 - 15
          // Record all 3 overflow attributes because IE does not infer the shorthand
          // from identically-valued overflowX and overflowY and Edge just mirrors
          // the overflowX value there.
          opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade

          restoreDisplay = dataShow && dataShow.display;

          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, "display");
          }

          display = jQuery.css(elem, "display");

          if (display === "none") {
            if (restoreDisplay) {
              display = restoreDisplay;
            } else {
              // Get nonempty value(s) by temporarily forcing visibility
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery.css(elem, "display");
              showHide([elem]);
            }
          } // Animate inline elements as inline-block


          if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
            if (jQuery.css(elem, "float") === "none") {
              // Restore the original display value at the end of pure show/hide animations
              if (!propTween) {
                anim.done(function () {
                  style.display = restoreDisplay;
                });

                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === "none" ? "" : display;
                }
              }

              style.display = "inline-block";
            }
          }
        }

        if (opts.overflow) {
          style.overflow = "hidden";
          anim.always(function () {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        } // Implement show/hide animations


        propTween = false;

        for (prop in orig) {
          // General show/hide setup for this element animation
          if (!propTween) {
            if (dataShow) {
              if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
              }
            } else {
              dataShow = dataPriv.access(elem, "fxshow", {
                display: restoreDisplay
              });
            } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"


            if (toggle) {
              dataShow.hidden = !hidden;
            } // Show elements before animating them


            if (hidden) {
              showHide([elem], true);
            }
            /* eslint-disable no-loop-func */


            anim.done(function () {
              /* eslint-enable no-loop-func */
              // The final step of a "hide" animation is actually hiding the element
              if (!hidden) {
                showHide([elem]);
              }

              dataPriv.remove(elem, "fxshow");

              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop]);
              }
            });
          } // Per-property setup


          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;

            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0;
            }
          }
        }
      }

      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

        for (index in props) {
          name = camelCase(index);
          easing = specialEasing[name];
          value = props[index];

          if (Array.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }

          if (index !== name) {
            props[name] = value;
            delete props[index];
          }

          hooks = jQuery.cssHooks[name];

          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
            // Reusing 'index' because we have the correct "name"

            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }

      function Animation(elem, properties, options) {
        var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = jQuery.Deferred().always(function () {
          // Don't match elem in the :animated selector
          delete tick.elem;
        }),
            tick = function tick() {
          if (stopped) {
            return false;
          }

          var currentTime = fxNow || createFxNow(),
              remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
              // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
          temp = remaining / animation.duration || 0,
              percent = 1 - temp,
              index = 0,
              length = animation.tweens.length;

          for (; index < length; index++) {
            animation.tweens[index].run(percent);
          }

          deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield

          if (percent < 1 && length) {
            return remaining;
          } // If this was an empty animation, synthesize a final progress notification


          if (!length) {
            deferred.notifyWith(elem, [animation, 1, 0]);
          } // Resolve the animation and report its conclusion


          deferred.resolveWith(elem, [animation]);
          return false;
        },
            animation = deferred.promise({
          elem: elem,
          props: jQuery.extend({}, properties),
          opts: jQuery.extend(true, {
            specialEasing: {},
            easing: jQuery.easing._default
          }, options),
          originalProperties: properties,
          originalOptions: options,
          startTime: fxNow || createFxNow(),
          duration: options.duration,
          tweens: [],
          createTween: function createTween(prop, end) {
            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
            animation.tweens.push(tween);
            return tween;
          },
          stop: function stop(gotoEnd) {
            var index = 0,
                // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;

            if (stopped) {
              return this;
            }

            stopped = true;

            for (; index < length; index++) {
              animation.tweens[index].run(1);
            } // Resolve when we played the last frame; otherwise, reject


            if (gotoEnd) {
              deferred.notifyWith(elem, [animation, 1, 0]);
              deferred.resolveWith(elem, [animation, gotoEnd]);
            } else {
              deferred.rejectWith(elem, [animation, gotoEnd]);
            }

            return this;
          }
        }),
            props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

          if (result) {
            if (isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
            }

            return result;
          }
        }

        jQuery.map(props, createTween, animation);

        if (isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        } // Attach callbacks from options


        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        return animation;
      }

      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          "*": [function (prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween;
          }]
        },
        tweener: function tweener(props, callback) {
          if (isFunction(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.match(rnothtmlwhite);
          }

          var prop,
              index = 0,
              length = props.length;

          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback);
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function prefilter(callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback);
          } else {
            Animation.prefilters.push(callback);
          }
        }
      });

      jQuery.speed = function (speed, easing, fn) {
        var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !isFunction(easing) && easing
        }; // Go to the end state if fx are off

        if (jQuery.fx.off) {
          opt.duration = 0;
        } else {
          if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration];
            } else {
              opt.duration = jQuery.fx.speeds._default;
            }
          }
        } // Normalize opt.queue - true/undefined/null -> "fx"


        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        } // Queueing


        opt.old = opt.complete;

        opt.complete = function () {
          if (isFunction(opt.old)) {
            opt.old.call(this);
          }

          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };

        return opt;
      };

      jQuery.fn.extend({
        fadeTo: function fadeTo(speed, to, easing, callback) {
          // Show any hidden elements after setting opacity to 0
          return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified
          .end().animate({
            opacity: to
          }, speed, easing, callback);
        },
        animate: function animate(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop),
              optall = jQuery.speed(speed, easing, callback),
              doAnimation = function doAnimation() {
            // Operate on a copy of prop so per-property easing won't be lost
            var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

            if (empty || dataPriv.get(this, "finish")) {
              anim.stop(true);
            }
          };

          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function stop(type, clearQueue, gotoEnd) {
          var stopQueue = function stopQueue(hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };

          if (typeof type !== "string") {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
          }

          if (clearQueue) {
            this.queue(type || "fx", []);
          }

          return this.each(function () {
            var dequeue = true,
                index = type != null && type + "queueHooks",
                timers = jQuery.timers,
                data = dataPriv.get(this);

            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }

            for (index = timers.length; index--;) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            } // Start the next in the queue if the last step wasn't forced.
            // Timers currently will call their complete callbacks, which
            // will dequeue but only if they were gotoEnd.


            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function finish(type) {
          if (type !== false) {
            type = type || "fx";
          }

          return this.each(function () {
            var index,
                data = dataPriv.get(this),
                queue = data[type + "queue"],
                hooks = data[type + "queueHooks"],
                timers = jQuery.timers,
                length = queue ? queue.length : 0; // Enable finishing flag on private data

            data.finish = true; // Empty the queue first

            jQuery.queue(this, type, []);

            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            } // Look for any active animations, and finish them


            for (index = timers.length; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            } // Look for any animations in the old queue and finish them


            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            } // Turn off finishing flag


            delete data.finish;
          });
        }
      });
      jQuery.each(["toggle", "show", "hide"], function (_i, name) {
        var cssFn = jQuery.fn[name];

        jQuery.fn[name] = function (speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      }); // Generate shortcuts for custom animations

      jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
          opacity: "show"
        },
        fadeOut: {
          opacity: "hide"
        },
        fadeToggle: {
          opacity: "toggle"
        }
      }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery.timers = [];

      jQuery.fx.tick = function () {
        var timer,
            i = 0,
            timers = jQuery.timers;
        fxNow = Date.now();

        for (; i < timers.length; i++) {
          timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)

          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }

        if (!timers.length) {
          jQuery.fx.stop();
        }

        fxNow = undefined;
      };

      jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
      };

      jQuery.fx.interval = 13;

      jQuery.fx.start = function () {
        if (inProgress) {
          return;
        }

        inProgress = true;
        schedule();
      };

      jQuery.fx.stop = function () {
        inProgress = null;
      };

      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
      }; // Based off of the plugin by Clint Helfers, with permission.
      // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

      jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function (next, hooks) {
          var timeout = window.setTimeout(next, time);

          hooks.stop = function () {
            window.clearTimeout(timeout);
          };
        });
      };

      (function () {
        var input = document.createElement("input"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox"; // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"

        support.checkOn = input.value !== ""; // Support: IE <=11 only
        // Must access selectedIndex to make default options select

        support.optSelected = opt.selected; // Support: IE <=11 only
        // An input loses its value after becoming a radio

        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();

      var boolHook,
          attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function attr(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function removeAttr(name) {
          return this.each(function () {
            jQuery.removeAttr(this, name);
          });
        }
      });
      jQuery.extend({
        attr: function attr(elem, name, value) {
          var ret,
              hooks,
              nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          } // Fallback to prop when attributes are not supported


          if (typeof elem.getAttribute === "undefined") {
            return jQuery.prop(elem, name, value);
          } // Attribute hooks are determined by the lowercase version
          // Grab necessary hook if one is defined


          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
          }

          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return;
            }

            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            }

            elem.setAttribute(name, value + "");
            return value;
          }

          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }

          ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

          return ret == null ? undefined : ret;
        },
        attrHooks: {
          type: {
            set: function set(elem, value) {
              if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);

                if (val) {
                  elem.value = val;
                }

                return value;
              }
            }
          }
        },
        removeAttr: function removeAttr(elem, value) {
          var name,
              i = 0,
              // Attribute names can contain non-HTML whitespace characters
          // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
          attrNames = value && value.match(rnothtmlwhite);

          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name);
            }
          }
        }
      }); // Hooks for boolean attributes

      boolHook = {
        set: function set(elem, value, name) {
          if (value === false) {
            // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }

          return name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;

        attrHandle[name] = function (elem, name, isXML) {
          var ret,
              handle,
              lowercaseName = name.toLowerCase();

          if (!isXML) {
            // Avoid an infinite loop by temporarily removing this function from the getter
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle;
          }

          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i,
          rclickable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop: function prop(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function removeProp(name) {
          return this.each(function () {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });
      jQuery.extend({
        prop: function prop(elem, name, value) {
          var ret,
              hooks,
              nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }

          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            // Fix name and attach hooks
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }

          if (value !== undefined) {
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            }

            return elem[name] = value;
          }

          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }

          return elem[name];
        },
        propHooks: {
          tabIndex: {
            get: function get(elem) {
              // Support: IE <=9 - 11 only
              // elem.tabIndex doesn't always return the
              // correct value when it hasn't been explicitly set
              // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
              // Use proper attribute retrieval(#12072)
              var tabindex = jQuery.find.attr(elem, "tabindex");

              if (tabindex) {
                return parseInt(tabindex, 10);
              }

              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0;
              }

              return -1;
            }
          }
        },
        propFix: {
          "for": "htmlFor",
          "class": "className"
        }
      }); // Support: IE <=11 only
      // Accessing the selectedIndex property
      // forces the browser to respect setting selected
      // on the option
      // The getter ensures a default option is selected
      // when in an optgroup
      // eslint rule "no-unused-expressions" is disabled for this code
      // since it considers such accessions noop

      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function get(elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;

            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }

            return null;
          },
          set: function set(elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;

            if (parent) {
              parent.selectedIndex;

              if (parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
            }
          }
        };
      }

      jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
        jQuery.propFix[this.toLowerCase()] = this;
      }); // Strip and collapse whitespace according to HTML spec
      // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
      }

      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }

      function classesToArray(value) {
        if (Array.isArray(value)) {
          return value;
        }

        if (typeof value === "string") {
          return value.match(rnothtmlwhite) || [];
        }

        return [];
      }

      jQuery.fn.extend({
        addClass: function addClass(value) {
          var classes,
              elem,
              cur,
              curValue,
              clazz,
              j,
              finalValue,
              i = 0;

          if (isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
          }

          classes = classesToArray(value);

          if (classes.length) {
            while (elem = this[i++]) {
              curValue = getClass(elem);
              cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

              if (cur) {
                j = 0;

                while (clazz = classes[j++]) {
                  if (cur.indexOf(" " + clazz + " ") < 0) {
                    cur += clazz + " ";
                  }
                } // Only assign if different to avoid unneeded rendering.


                finalValue = stripAndCollapse(cur);

                if (curValue !== finalValue) {
                  elem.setAttribute("class", finalValue);
                }
              }
            }
          }

          return this;
        },
        removeClass: function removeClass(value) {
          var classes,
              elem,
              cur,
              curValue,
              clazz,
              j,
              finalValue,
              i = 0;

          if (isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
          }

          if (!arguments.length) {
            return this.attr("class", "");
          }

          classes = classesToArray(value);

          if (classes.length) {
            while (elem = this[i++]) {
              curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

              cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

              if (cur) {
                j = 0;

                while (clazz = classes[j++]) {
                  // Remove *all* instances
                  while (cur.indexOf(" " + clazz + " ") > -1) {
                    cur = cur.replace(" " + clazz + " ", " ");
                  }
                } // Only assign if different to avoid unneeded rendering.


                finalValue = stripAndCollapse(cur);

                if (curValue !== finalValue) {
                  elem.setAttribute("class", finalValue);
                }
              }
            }
          }

          return this;
        },
        toggleClass: function toggleClass(value, stateVal) {
          var type = _typeof(value),
              isValidValue = type === "string" || Array.isArray(value);

          if (typeof stateVal === "boolean" && isValidValue) {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }

          if (isFunction(value)) {
            return this.each(function (i) {
              jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
            });
          }

          return this.each(function () {
            var className, i, self, classNames;

            if (isValidValue) {
              // Toggle individual class names
              i = 0;
              self = jQuery(this);
              classNames = classesToArray(value);

              while (className = classNames[i++]) {
                // Check each className given, space separated list
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              } // Toggle whole class name

            } else if (value === undefined || type === "boolean") {
              className = getClass(this);

              if (className) {
                // Store className if set
                dataPriv.set(this, "__className__", className);
              } // If the element has a class name or if we're passed `false`,
              // then remove the whole classname (if there was one, the above saved it).
              // Otherwise bring back whatever was previously saved (if anything),
              // falling back to the empty string if nothing was stored.


              if (this.setAttribute) {
                this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
              }
            }
          });
        },
        hasClass: function hasClass(selector) {
          var className,
              elem,
              i = 0;
          className = " " + selector + " ";

          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
              return true;
            }
          }

          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function val(value) {
          var hooks,
              ret,
              valueIsFunction,
              elem = this[0];

          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

              if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                return ret;
              }

              ret = elem.value; // Handle most common string cases

              if (typeof ret === "string") {
                return ret.replace(rreturn, "");
              } // Handle cases where value is null/undef or number


              return ret == null ? "" : ret;
            }

            return;
          }

          valueIsFunction = isFunction(value);
          return this.each(function (i) {
            var val;

            if (this.nodeType !== 1) {
              return;
            }

            if (valueIsFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            } // Treat null/undefined as ""; convert numbers to string


            if (val == null) {
              val = "";
            } else if (typeof val === "number") {
              val += "";
            } else if (Array.isArray(val)) {
              val = jQuery.map(val, function (value) {
                return value == null ? "" : value + "";
              });
            }

            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
              this.value = val;
            }
          });
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function get(elem) {
              var val = jQuery.find.attr(elem, "value");
              return val != null ? val : // Support: IE <=10 - 11 only
              // option.text throws exceptions (#14686, #14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem));
            }
          },
          select: {
            get: function get(elem) {
              var value,
                  option,
                  i,
                  options = elem.options,
                  index = elem.selectedIndex,
                  one = elem.type === "select-one",
                  values = one ? null : [],
                  max = one ? index + 1 : options.length;

              if (index < 0) {
                i = max;
              } else {
                i = one ? index : 0;
              } // Loop through all the selected options


              for (; i < max; i++) {
                option = options[i]; // Support: IE <=9 only
                // IE8-9 doesn't update selected after form reset (#2551)

                if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                  // Get the specific value for the option
                  value = jQuery(option).val(); // We don't need an array for one selects

                  if (one) {
                    return value;
                  } // Multi-Selects return an array


                  values.push(value);
                }
              }

              return values;
            },
            set: function set(elem, value) {
              var optionSet,
                  option,
                  options = elem.options,
                  values = jQuery.makeArray(value),
                  i = options.length;

              while (i--) {
                option = options[i];
                /* eslint-disable no-cond-assign */

                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                  optionSet = true;
                }
                /* eslint-enable no-cond-assign */

              } // Force browsers to behave consistently when non-matching value is set


              if (!optionSet) {
                elem.selectedIndex = -1;
              }

              return values;
            }
          }
        }
      }); // Radios and checkboxes getter/setter

      jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
          set: function set(elem, value) {
            if (Array.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
          }
        };

        if (!support.checkOn) {
          jQuery.valHooks[this].get = function (elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      }); // Return jQuery for attributes-only inclusion

      support.focusin = "onfocusin" in window;

      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
          stopPropagationCallback = function stopPropagationCallback(e) {
        e.stopPropagation();
      };

      jQuery.extend(jQuery.event, {
        trigger: function trigger(event, data, elem, onlyHandlers) {
          var i,
              cur,
              tmp,
              bubbleType,
              ontype,
              handle,
              special,
              lastElement,
              eventPath = [elem || document],
              type = hasOwn.call(event, "type") ? event.type : event,
              namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
          cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          } // focus/blur morphs to focusin/out; ensure we're not firing them right now


          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return;
          }

          if (type.indexOf(".") > -1) {
            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }

          ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

          event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join(".");
          event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

          event.result = undefined;

          if (!event.target) {
            event.target = elem;
          } // Clone any incoming data and prepend the event, creating the handler arg list


          data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

          special = jQuery.event.special[type] || {};

          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          } // Determine event propagation path in advance, per W3C events spec (#9951)
          // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


          if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
            bubbleType = special.delegateType || type;

            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }

            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            } // Only add window if we got to document (e.g., not plain obj or detached DOM)


            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window);
            }
          } // Fire handlers on the event path


          i = 0;

          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            lastElement = cur;
            event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

            handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");

            if (handle) {
              handle.apply(cur, data);
            } // Native handler


            handle = ontype && cur[ontype];

            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);

              if (event.result === false) {
                event.preventDefault();
              }
            }
          }

          event.type = type; // If nobody prevented the default action, do it now

          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              // Call a native DOM method on the target with the same name as the event.
              // Don't do default actions on window, that's where global variables be (#6170)
              if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                // Don't re-trigger an onFOO event when we call its FOO() method
                tmp = elem[ontype];

                if (tmp) {
                  elem[ontype] = null;
                } // Prevent re-triggering of the same event, since we already bubbled it above


                jQuery.event.triggered = type;

                if (event.isPropagationStopped()) {
                  lastElement.addEventListener(type, stopPropagationCallback);
                }

                elem[type]();

                if (event.isPropagationStopped()) {
                  lastElement.removeEventListener(type, stopPropagationCallback);
                }

                jQuery.event.triggered = undefined;

                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }

          return event.result;
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function simulate(type, elem, event) {
          var e = jQuery.extend(new jQuery.Event(), event, {
            type: type,
            isSimulated: true
          });
          jQuery.event.trigger(e, null, elem);
        }
      });
      jQuery.fn.extend({
        trigger: function trigger(type, data) {
          return this.each(function () {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function triggerHandler(type, data) {
          var elem = this[0];

          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      }); // Support: Firefox <=44
      // Firefox doesn't have focus(in | out) events
      // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
      //
      // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
      // focus(in | out) events fire after focus & blur events,
      // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
      // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

      if (!support.focusin) {
        jQuery.each({
          focus: "focusin",
          blur: "focusout"
        }, function (orig, fix) {
          // Attach a single capturing handler on the document while someone wants focusin/focusout
          var handler = function handler(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
          };

          jQuery.event.special[fix] = {
            setup: function setup() {
              // Handle: regular nodes (via `this.ownerDocument`), window
              // (via `this.document`) & document (via `this`).
              var doc = this.ownerDocument || this.document || this,
                  attaches = dataPriv.access(doc, fix);

              if (!attaches) {
                doc.addEventListener(orig, handler, true);
              }

              dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function teardown() {
              var doc = this.ownerDocument || this.document || this,
                  attaches = dataPriv.access(doc, fix) - 1;

              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix);
              } else {
                dataPriv.access(doc, fix, attaches);
              }
            }
          };
        });
      }

      var location = window.location;
      var nonce = {
        guid: Date.now()
      };
      var rquery = /\?/; // Cross-browser xml parsing

      jQuery.parseXML = function (data) {
        var xml, parserErrorElem;

        if (!data || typeof data !== "string") {
          return null;
        } // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.


        try {
          xml = new window.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {}

        parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];

        if (!xml || parserErrorElem) {
          jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {
            return el.textContent;
          }).join("\n") : data));
        }

        return xml;
      };

      var rbracket = /\[\]$/,
          rCRLF = /\r?\n/g,
          rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
          rsubmittable = /^(?:input|select|textarea|keygen)/i;

      function buildParams(prefix, obj, traditional, add) {
        var name;

        if (Array.isArray(obj)) {
          // Serialize array item.
          jQuery.each(obj, function (i, v) {
            if (traditional || rbracket.test(prefix)) {
              // Treat each array item as a scalar.
              add(prefix, v);
            } else {
              // Item is non-scalar (array or object), encode its numeric index.
              buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
            }
          });
        } else if (!traditional && toType(obj) === "object") {
          // Serialize object item.
          for (name in obj) {
            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
          }
        } else {
          // Serialize scalar item.
          add(prefix, obj);
        }
      } // Serialize an array of form elements or a set of
      // key/values into a query string


      jQuery.param = function (a, traditional) {
        var prefix,
            s = [],
            add = function add(key, valueOrFunction) {
          // If value is a function, invoke it and use its return value
          var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
          s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };

        if (a == null) {
          return "";
        } // If an array was passed in, assume that it is an array of form elements.


        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          // Serialize the form elements
          jQuery.each(a, function () {
            add(this.name, this.value);
          });
        } else {
          // If traditional, encode the "old" way (the way 1.3.2 or older
          // did it), otherwise encode params recursively.
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        } // Return the resulting serialization


        return s.join("&");
      };

      jQuery.fn.extend({
        serialize: function serialize() {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function serializeArray() {
          return this.map(function () {
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop(this, "elements");
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function () {
            var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

            return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function (_i, elem) {
            var val = jQuery(this).val();

            if (val == null) {
              return null;
            }

            if (Array.isArray(val)) {
              return jQuery.map(val, function (val) {
                return {
                  name: elem.name,
                  value: val.replace(rCRLF, "\r\n")
                };
              });
            }

            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          }).get();
        }
      });
      var r20 = /%20/g,
          rhash = /#.*$/,
          rantiCache = /([?&])_=[^&]*/,
          rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
          // #7653, #8125, #8152: local protocol detection
      rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
          rnoContent = /^(?:GET|HEAD)$/,
          rprotocol = /^\/\//,

      /* Prefilters
       * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
       * 2) These are called:
       *    - BEFORE asking for a transport
       *    - AFTER param serialization (s.data is a string if s.processData is true)
       * 3) key is the dataType
       * 4) the catchall symbol "*" can be used
       * 5) execution will start with transport dataType and THEN continue down to "*" if needed
       */
      prefilters = {},

      /* Transports bindings
       * 1) key is the dataType
       * 2) the catchall symbol "*" can be used
       * 3) selection will start with transport dataType and THEN go to "*" if needed
       */
      transports = {},
          // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
      allTypes = "*/".concat("*"),
          // Anchor tag for parsing the document origin
      originAnchor = document.createElement("a");
      originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

      function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {
          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }

          var dataType,
              i = 0,
              dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

          if (isFunction(func)) {
            // For each dataType in the dataTypeExpression
            while (dataType = dataTypes[i++]) {
              // Prepend if requested
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      } // Base inspection function for prefilters and transports


      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {},
            seekingTransport = structure === transports;

        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

            if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      } // A special extend for ajax options
      // that takes "flat" options (not to be deep extended)
      // Fixes #9887


      function ajaxExtend(target, src) {
        var key,
            deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
          }
        }

        if (deep) {
          jQuery.extend(true, target, deep);
        }

        return target;
      }
      /* Handles responses to an ajax request:
       * - finds the right dataType (mediates between content-type and expected dataType)
       * - returns the corresponding response
       */


      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct,
            type,
            finalDataType,
            firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

        while (dataTypes[0] === "*") {
          dataTypes.shift();

          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        } // Check if we're dealing with a known content-type


        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        } // Check to see if we have a response for the expected dataType


        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          // Try convertible dataTypes
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }

            if (!firstDataType) {
              firstDataType = type;
            }
          } // Or just use first one


          finalDataType = finalDataType || firstDataType;
        } // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response


        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }

          return responses[finalDataType];
        }
      }
      /* Chain conversions given the request and the original response
       * Also sets the responseXXX fields on the jqXHR instance
       */


      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2,
            current,
            conv,
            tmp,
            prev,
            converters = {},
            // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }

        current = dataTypes.shift(); // Convert to each sequential dataType

        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          } // Apply the dataFilter if provided


          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }

          prev = current;
          current = dataTypes.shift();

          if (current) {
            // There's only work to do if current dataType is non-auto
            if (current === "*") {
              current = prev; // Convert response if prev dataType is non-auto and differs from current
            } else if (prev !== "*" && prev !== current) {
              // Seek a direct converter
              conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

              if (!conv) {
                for (conv2 in converters) {
                  // If conv2 outputs current
                  tmp = conv2.split(" ");

                  if (tmp[1] === current) {
                    // If prev can be converted to accepted input
                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                    if (conv) {
                      // Condense equivalence converters
                      if (conv === true) {
                        conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }

                      break;
                    }
                  }
                }
              } // Apply converter (if not an equivalence)


              if (conv !== true) {
                // Unless errors are allowed to bubble, catch and return them
                if (conv && s.throws) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: "parsererror",
                      error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }

        return {
          state: "success",
          data: response
        };
      }

      jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: "GET",
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",

          /*
          timeout: 0,
          data: null,
          dataType: null,
          username: null,
          password: null,
          cache: null,
          throws: false,
          traditional: false,
          headers: {},
          */
          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },
          // Data converters
          // Keys separate source (or catchall "*") and destination types with a single space
          converters: {
            // Convert anything to text
            "* text": String,
            // Text to html (true = no transformation)
            "text html": true,
            // Evaluate text as a json expression
            "text json": JSON.parse,
            // Parse text as xml
            "text xml": jQuery.parseXML
          },
          // For options that shouldn't be deep extended:
          // you can add your own custom options here if
          // and when you create one that shouldn't be
          // deep extended (see ajaxExtend)
          flatOptions: {
            url: true,
            context: true
          }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function ajaxSetup(target, settings) {
          return settings ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function ajax(url, options) {
          // If url is an object, simulate pre-1.5 signature
          if (_typeof(url) === "object") {
            options = url;
            url = undefined;
          } // Force options to be an object


          options = options || {};

          var transport,
              // URL without anti-cache param
          cacheURL,
              // Response headers
          responseHeadersString,
              responseHeaders,
              // timeout handle
          timeoutTimer,
              // Url cleanup var
          urlAnchor,
              // Request state (becomes false upon send and true upon completion)
          completed,
              // To know if global events are to be dispatched
          fireGlobals,
              // Loop variable
          i,
              // uncached part of the url
          uncached,
              // Create the final options object
          s = jQuery.ajaxSetup({}, options),
              // Callbacks context
          callbackContext = s.context || s,
              // Context for global events is callbackContext if it is a DOM node or jQuery collection
          globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
              // Deferreds
          deferred = jQuery.Deferred(),
              completeDeferred = jQuery.Callbacks("once memory"),
              // Status-dependent callbacks
          _statusCode = s.statusCode || {},
              // Headers (they are sent all at once)
          requestHeaders = {},
              requestHeadersNames = {},
              // Default abort message
          strAbort = "canceled",
              // Fake xhr
          jqXHR = {
            readyState: 0,
            // Builds headers hashtable if needed
            getResponseHeader: function getResponseHeader(key) {
              var match;

              if (completed) {
                if (!responseHeaders) {
                  responseHeaders = {};

                  while (match = rheaders.exec(responseHeadersString)) {
                    responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                  }
                }

                match = responseHeaders[key.toLowerCase() + " "];
              }

              return match == null ? null : match.join(", ");
            },
            // Raw string
            getAllResponseHeaders: function getAllResponseHeaders() {
              return completed ? responseHeadersString : null;
            },
            // Caches the header
            setRequestHeader: function setRequestHeader(name, value) {
              if (completed == null) {
                name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                requestHeaders[name] = value;
              }

              return this;
            },
            // Overrides response content-type header
            overrideMimeType: function overrideMimeType(type) {
              if (completed == null) {
                s.mimeType = type;
              }

              return this;
            },
            // Status-dependent callbacks
            statusCode: function statusCode(map) {
              var code;

              if (map) {
                if (completed) {
                  // Execute the appropriate callbacks
                  jqXHR.always(map[jqXHR.status]);
                } else {
                  // Lazy-add the new callbacks in a way that preserves old ones
                  for (code in map) {
                    _statusCode[code] = [_statusCode[code], map[code]];
                  }
                }
              }

              return this;
            },
            // Cancel the request
            abort: function abort(statusText) {
              var finalText = statusText || strAbort;

              if (transport) {
                transport.abort(finalText);
              }

              done(0, finalText);
              return this;
            }
          }; // Attach deferreds


          deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)
          // Handle falsy url in the settings object (#10093: consistency with old signature)
          // We also use the url parameter if available

          s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004

          s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

          s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

          if (s.crossDomain == null) {
            urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15
            // IE throws exception on accessing the href property if url is malformed,
            // e.g. http://example.com:80x/

            try {
              urlAnchor.href = s.url; // Support: IE <=8 - 11 only
              // Anchor's host property isn't correctly set when s.url is relative

              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (e) {
              // If there is an error parsing the URL, assume it is crossDomain,
              // it can be rejected by the transport if it is invalid
              s.crossDomain = true;
            }
          } // Convert data if not already a string


          if (s.data && s.processData && typeof s.data !== "string") {
            s.data = jQuery.param(s.data, s.traditional);
          } // Apply prefilters


          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

          if (completed) {
            return jqXHR;
          } // We can fire global events as of now if asked to
          // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


          fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger("ajaxStart");
          } // Uppercase the type


          s.type = s.type.toUpperCase(); // Determine if request has content

          s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
          // and/or If-None-Match header later on
          // Remove hash to simplify url manipulation

          cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content

          if (!s.hasContent) {
            // Remember the hash so we can put it back
            uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url

            if (s.data && (s.processData || typeof s.data === "string")) {
              cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

              delete s.data;
            } // Add or update anti-cache param if needed


            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, "$1");
              uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
            } // Put hash and anti-cache on the URL that will be requested (gh-1732)


            s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)
          } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
            s.data = s.data.replace(r20, "+");
          } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
            }

            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
          } // Set the correct header, if data is being sent


          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          } // Set the Accepts header for the server, depending on the dataType


          jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          } // Allow custom headers/mimetypes and early abort


          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
            // Abort if not done already and return
            return jqXHR.abort();
          } // Aborting is no longer a cancellation


          strAbort = "abort"; // Install callbacks on deferreds

          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error); // Get transport

          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1; // Send global event

            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s]);
            } // If request was aborted inside ajaxSend, stop there


            if (completed) {
              return jqXHR;
            } // Timeout


            if (s.async && s.timeout > 0) {
              timeoutTimer = window.setTimeout(function () {
                jqXHR.abort("timeout");
              }, s.timeout);
            }

            try {
              completed = false;
              transport.send(requestHeaders, done);
            } catch (e) {
              // Rethrow post-completion exceptions
              if (completed) {
                throw e;
              } // Propagate others as results


              done(-1, e);
            }
          } // Callback for when everything is done


          function done(status, nativeStatusText, responses, headers) {
            var isSuccess,
                success,
                error,
                response,
                modified,
                statusText = nativeStatusText; // Ignore repeat invocations

            if (completed) {
              return;
            }

            completed = true; // Clear timeout if it exists

            if (timeoutTimer) {
              window.clearTimeout(timeoutTimer);
            } // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)


            transport = undefined; // Cache response headers

            responseHeadersString = headers || ""; // Set readyState

            jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

            isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            } // Use a noop converter for missing script but not if jsonp


            if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
              s.converters["text script"] = function () {};
            } // Convert no matter what (that way responseXXX fields are always set)


            response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

            if (isSuccess) {
              // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");

                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }

                modified = jqXHR.getResponseHeader("etag");

                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              } // if no content


              if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent"; // if not modified
              } else if (status === 304) {
                statusText = "notmodified"; // If we have data, let's convert it
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              // Extract error from statusText and normalize for non-aborts
              error = statusText;

              if (status || !statusText) {
                statusText = "error";

                if (status < 0) {
                  status = 0;
                }
              }
            } // Set data for the fake xhr object


            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

            if (isSuccess) {
              deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
            } // Status-dependent callbacks


            jqXHR.statusCode(_statusCode);
            _statusCode = undefined;

            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
            } // Complete


            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

              if (! --jQuery.active) {
                jQuery.event.trigger("ajaxStop");
              }
            }
          }

          return jqXHR;
        },
        getJSON: function getJSON(url, data, callback) {
          return jQuery.get(url, data, callback, "json");
        },
        getScript: function getScript(url, callback) {
          return jQuery.get(url, undefined, callback, "script");
        }
      });
      jQuery.each(["get", "post"], function (_i, method) {
        jQuery[method] = function (url, data, callback, type) {
          // Shift arguments if data argument was omitted
          if (isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined;
          } // The url can be an options object (which then must have .url)


          return jQuery.ajax(jQuery.extend({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          }, jQuery.isPlainObject(url) && url));
        };
      });
      jQuery.ajaxPrefilter(function (s) {
        var i;

        for (i in s.headers) {
          if (i.toLowerCase() === "content-type") {
            s.contentType = s.headers[i] || "";
          }
        }
      });

      jQuery._evalUrl = function (url, options, doc) {
        return jQuery.ajax({
          url: url,
          // Make this explicit, since user can override this through ajaxSetup (#11264)
          type: "GET",
          dataType: "script",
          cache: true,
          async: false,
          global: false,
          // Only evaluate the response if it is successful (gh-4126)
          // dataFilter is not invoked for failure responses, so using it instead
          // of the default converter is kludgy but it works.
          converters: {
            "text script": function textScript() {}
          },
          dataFilter: function dataFilter(response) {
            jQuery.globalEval(response, options, doc);
          }
        });
      };

      jQuery.fn.extend({
        wrapAll: function wrapAll(html) {
          var wrap;

          if (this[0]) {
            if (isFunction(html)) {
              html = html.call(this[0]);
            } // The elements to wrap the target around


            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }

            wrap.map(function () {
              var elem = this;

              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }

              return elem;
            }).append(this);
          }

          return this;
        },
        wrapInner: function wrapInner(html) {
          if (isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }

          return this.each(function () {
            var self = jQuery(this),
                contents = self.contents();

            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self.append(html);
            }
          });
        },
        wrap: function wrap(html) {
          var htmlIsFunction = isFunction(html);
          return this.each(function (i) {
            jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function unwrap(selector) {
          this.parent(selector).not("body").each(function () {
            jQuery(this).replaceWith(this.childNodes);
          });
          return this;
        }
      });

      jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem);
      };

      jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
      };

      jQuery.ajaxSettings.xhr = function () {
        try {
          return new window.XMLHttpRequest();
        } catch (e) {}
      };

      var xhrSuccessStatus = {
        // File protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE <=9 only
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
      },
          xhrSupported = jQuery.ajaxSettings.xhr();
      support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function (options) {
        var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest


        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function send(headers, complete) {
              var i,
                  xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              } // Override mime type if needed


              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              } // X-Requested-With header
              // For cross-domain requests, seeing as conditions for a preflight are
              // akin to a jigsaw puzzle, we simply never set it to be sure.
              // (it can always be set on a per-request basis or even using ajaxSetup)
              // For same-domain requests, won't change header if already provided.


              if (!options.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              } // Set headers


              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              } // Callback


              _callback = function callback(type) {
                return function () {
                  if (_callback) {
                    _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {
                      // Support: IE <=9 only
                      // On a manual native abort, IE9 throws
                      // errors on any property access that is not readyState
                      if (typeof xhr.status !== "number") {
                        complete(0, "error");
                      } else {
                        complete( // File: protocol always yields status 0; see #8605, #14207
                        xhr.status, xhr.statusText);
                      }
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                      // IE9 has no XHR2 but throws on binary (trac-11426)
                      // For XHR2 non-text, let the caller handle it (gh-2498)
                      (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                        binary: xhr.response
                      } : {
                        text: xhr.responseText
                      }, xhr.getAllResponseHeaders());
                    }
                  }
                };
              }; // Listen to events


              xhr.onload = _callback();
              errorCallback = xhr.onerror = xhr.ontimeout = _callback("error"); // Support: IE 9 only
              // Use onreadystatechange to replace onabort
              // to handle uncaught aborts

              if (xhr.onabort !== undefined) {
                xhr.onabort = errorCallback;
              } else {
                xhr.onreadystatechange = function () {
                  // Check readyState before timeout as it changes
                  if (xhr.readyState === 4) {
                    // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window.setTimeout(function () {
                      if (_callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              } // Create the abort callback


              _callback = _callback("abort");

              try {
                // Do send the request (this may raise an exception)
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {
                // #14683: Only rethrow if this hasn't been notified as an error yet
                if (_callback) {
                  throw e;
                }
              }
            },
            abort: function abort() {
              if (_callback) {
                _callback();
              }
            }
          };
        }
      }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

      jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
          s.contents.script = false;
        }
      }); // Install script dataType

      jQuery.ajaxSetup({
        accepts: {
          script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          "text script": function textScript(text) {
            jQuery.globalEval(text);
            return text;
          }
        }
      }); // Handle cache's special case and crossDomain

      jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) {
          s.cache = false;
        }

        if (s.crossDomain) {
          s.type = "GET";
        }
      }); // Bind script tag hack transport

      jQuery.ajaxTransport("script", function (s) {
        // This transport only deals with cross domain or forced-by-attrs requests
        if (s.crossDomain || s.scriptAttrs) {
          var script, _callback2;

          return {
            send: function send(_, complete) {
              script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({
                charset: s.scriptCharset,
                src: s.url
              }).on("load error", _callback2 = function callback(evt) {
                script.remove();
                _callback2 = null;

                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              }); // Use native DOM manipulation to avoid our domManip AJAX trickery

              document.head.appendChild(script[0]);
            },
            abort: function abort() {
              if (_callback2) {
                _callback2();
              }
            }
          };
        }
      });
      var oldCallbacks = [],
          rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

      jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function jsonpCallback() {
          var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
          this[callback] = true;
          return callback;
        }
      }); // Detect, normalize options and install callbacks for jsonp requests

      jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName,
            overwritten,
            responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

        if (jsonProp || s.dataTypes[0] === "jsonp") {
          // Get callback name, remembering preexisting value associated with it
          callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
          } // Use data converter to retrieve json after script execution


          s.converters["script json"] = function () {
            if (!responseContainer) {
              jQuery.error(callbackName + " was not called");
            }

            return responseContainer[0];
          }; // Force json dataType


          s.dataTypes[0] = "json"; // Install callback

          overwritten = window[callbackName];

          window[callbackName] = function () {
            responseContainer = arguments;
          }; // Clean-up function (fires after converters)


          jqXHR.always(function () {
            // If previous value didn't exist - remove it
            if (overwritten === undefined) {
              jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
            } else {
              window[callbackName] = overwritten;
            } // Save back as free


            if (s[callbackName]) {
              // Make sure that re-using the options doesn't screw things around
              s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

              oldCallbacks.push(callbackName);
            } // Call if it was a function and we have a response


            if (responseContainer && isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }

            responseContainer = overwritten = undefined;
          }); // Delegate to script

          return "script";
        }
      }); // Support: Safari 8 only
      // In Safari 8 documents created via document.implementation.createHTMLDocument
      // collapse sibling forms: the second one becomes a child of the first one.
      // Because of that, this security measure has to be disabled in Safari 8.
      // https://bugs.webkit.org/show_bug.cgi?id=137337

      support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
      }(); // Argument "data" should be string of html
      // context (optional): If specified, the fragment will be created in this context,
      // defaults to document
      // keepScripts (optional): If true, will include scripts passed in the html string


      jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== "string") {
          return [];
        }

        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }

        var base, parsed, scripts;

        if (!context) {
          // Stop scripts or inline event handlers from being executed immediately
          // by using document.implementation
          if (support.createHTMLDocument) {
            context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
            // so any parsed elements with URLs
            // are based on the document's URL (gh-2965)

            base = context.createElement("base");
            base.href = document.location.href;
            context.head.appendChild(base);
          } else {
            context = document;
          }
        }

        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && []; // Single tag

        if (parsed) {
          return [context.createElement(parsed[1])];
        }

        parsed = buildFragment([data], context, scripts);

        if (scripts && scripts.length) {
          jQuery(scripts).remove();
        }

        return jQuery.merge([], parsed.childNodes);
      };
      /**
       * Load a url into a page
       */


      jQuery.fn.load = function (url, params, callback) {
        var selector,
            type,
            response,
            self = this,
            off = url.indexOf(" ");

        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off);
        } // If it's a function


        if (isFunction(params)) {
          // We assume that it's the callback
          callback = params;
          params = undefined; // Otherwise, build a param string
        } else if (params && _typeof(params) === "object") {
          type = "POST";
        } // If we have elements to modify, make the request


        if (self.length > 0) {
          jQuery.ajax({
            url: url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || "GET",
            dataType: "html",
            data: params
          }).done(function (responseText) {
            // Save response for use in complete callback
            response = arguments;
            self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
            responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
            // but they are ignored because response was set above.
            // If it fails, this function gets "jqXHR", "status", "error"
          }).always(callback && function (jqXHR, status) {
            self.each(function () {
              callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
            });
          });
        }

        return this;
      };

      jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
          return elem === fn.elem;
        }).length;
      };

      jQuery.offset = {
        setOffset: function setOffset(elem, options, i) {
          var curPosition,
              curLeft,
              curCSSTop,
              curTop,
              curOffset,
              curCSSLeft,
              calculatePosition,
              position = jQuery.css(elem, "position"),
              curElem = jQuery(elem),
              props = {}; // Set position first, in-case top/left are set even on static elem

          if (position === "static") {
            elem.style.position = "relative";
          }

          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, "top");
          curCSSLeft = jQuery.css(elem, "left");
          calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
          // top or left is auto and position is either absolute or fixed

          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }

          if (isFunction(options)) {
            // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({}, curOffset));
          }

          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop;
          }

          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft;
          }

          if ("using" in options) {
            options.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }
      };
      jQuery.fn.extend({
        // offset() relates an element's border box to the document origin
        offset: function offset(options) {
          // Preserve chaining for setter
          if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i);
            });
          }

          var rect,
              win,
              elem = this[0];

          if (!elem) {
            return;
          } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
          // Support: IE <=11 only
          // Running getBoundingClientRect on a
          // disconnected node in IE throws an error


          if (!elem.getClientRects().length) {
            return {
              top: 0,
              left: 0
            };
          } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


          rect = elem.getBoundingClientRect();
          win = elem.ownerDocument.defaultView;
          return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
          };
        },
        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function position() {
          if (!this[0]) {
            return;
          }

          var offsetParent,
              offset,
              doc,
              elem = this[0],
              parentOffset = {
            top: 0,
            left: 0
          }; // position:fixed elements are offset from the viewport, which itself always has zero offset

          if (jQuery.css(elem, "position") === "fixed") {
            // Assume position:fixed implies availability of getBoundingClientRect
            offset = elem.getBoundingClientRect();
          } else {
            offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
            // when a statically positioned element is identified

            doc = elem.ownerDocument;
            offsetParent = elem.offsetParent || doc.documentElement;

            while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.parentNode;
            }

            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
              // Incorporate borders into its offset, since they are outside its content origin
              parentOffset = jQuery(offsetParent).offset();
              parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
              parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
            }
          } // Subtract parent offsets and element margins


          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
          };
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function offsetParent() {
          return this.map(function () {
            var offsetParent = this.offsetParent;

            while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.offsetParent;
            }

            return offsetParent || documentElement;
          });
        }
      }); // Create scrollLeft and scrollTop methods

      jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
      }, function (method, prop) {
        var top = "pageYOffset" === prop;

        jQuery.fn[method] = function (val) {
          return access(this, function (elem, method, val) {
            // Coalesce documents and windows
            var win;

            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }

            if (val === undefined) {
              return win ? win[prop] : elem[method];
            }

            if (win) {
              win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
            } else {
              elem[method] = val;
            }
          }, method, val, arguments.length);
        };
      }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
      // Add the top/left cssHooks using jQuery.fn.position
      // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
      // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
      // getComputedStyle returns percent when specified for top/left/bottom/right;
      // rather than make the css module depend on the offset module, just check for it here

      jQuery.each(["top", "left"], function (_i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
          }
        });
      }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

      jQuery.each({
        Height: "height",
        Width: "width"
      }, function (name, type) {
        jQuery.each({
          padding: "inner" + name,
          content: type,
          "": "outer" + name
        }, function (defaultExtra, funcName) {
          // Margin is only for outerHeight, outerWidth
          jQuery.fn[funcName] = function (margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
            return access(this, function (elem, type, value) {
              var doc;

              if (isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
              } // Get document width or height


              if (elem.nodeType === 9) {
                doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest

                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
              }

              return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
              jQuery.css(elem, type, extra) : // Set width or height on the element
              jQuery.style(elem, type, value, extra);
            }, type, chainable ? margin : undefined, chainable);
          };
        });
      });
      jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
        jQuery.fn[type] = function (fn) {
          return this.on(type, fn);
        };
      });
      jQuery.fn.extend({
        bind: function bind(types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function unbind(types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function delegate(selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function undelegate(selector, types, fn) {
          // ( namespace ) or ( selector, types [, fn] )
          return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function hover(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });
      jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
        // Handle event binding
        jQuery.fn[name] = function (data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
      }); // Support: Android <=4.0 only
      // Make sure we trim BOM and NBSP

      var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g; // Bind a function to a context, optionally partially applying any
      // arguments.
      // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
      // However, it is not slated for removal any time soon

      jQuery.proxy = function (fn, context) {
        var tmp, args, proxy;

        if (typeof context === "string") {
          tmp = fn[context];
          context = fn;
          fn = tmp;
        } // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.


        if (!isFunction(fn)) {
          return undefined;
        } // Simulated bind


        args = _slice.call(arguments, 2);

        proxy = function proxy() {
          return fn.apply(context || this, args.concat(_slice.call(arguments)));
        }; // Set the guid of unique handler to the same of original handler, so it can be removed


        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
      };

      jQuery.holdReady = function (hold) {
        if (hold) {
          jQuery.readyWait++;
        } else {
          jQuery.ready(true);
        }
      };

      jQuery.isArray = Array.isArray;
      jQuery.parseJSON = JSON.parse;
      jQuery.nodeName = nodeName;
      jQuery.isFunction = isFunction;
      jQuery.isWindow = isWindow;
      jQuery.camelCase = camelCase;
      jQuery.type = toType;
      jQuery.now = Date.now;

      jQuery.isNumeric = function (obj) {
        // As of jQuery 3.0, isNumeric is limited to
        // strings and numbers (primitives or objects)
        // that can be coerced to finite numbers (gh-2662)
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        !isNaN(obj - parseFloat(obj));
      };

      jQuery.trim = function (text) {
        return text == null ? "" : (text + "").replace(rtrim, "");
      }; // Register as a named AMD module, since jQuery can be concatenated with other

      var // Map over jQuery in case of overwrite
      _jQuery = window.jQuery,
          // Map over the $ in case of overwrite
      _$ = window.$;

      jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
          window.$ = _$;
        }

        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery;
        }

        return jQuery;
      }; // Expose jQuery and $ identifiers, even in AMD
      // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
      // and CommonJS for browser emulators (#13566)


      if (typeof noGlobal === "undefined") {
        window.jQuery = window.$ = jQuery;
      }

      return jQuery;
    });
  });

  window.$ = window.jQuery = jquery;

  /**!
   * @fileOverview Kickass library to create and place poppers near their reference elements.
   * @version 1.16.1
   * @license
   * Copyright (c) 2016 Federico Zivolo and contributors
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

  var timeoutDuration = function () {
    var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];

    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
      if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
        return 1;
      }
    }

    return 0;
  }();

  function microtaskDebounce(fn) {
    var called = false;
    return function () {
      if (called) {
        return;
      }

      called = true;
      window.Promise.resolve().then(function () {
        called = false;
        fn();
      });
    };
  }

  function taskDebounce(fn) {
    var scheduled = false;
    return function () {
      if (!scheduled) {
        scheduled = true;
        setTimeout(function () {
          scheduled = false;
          fn();
        }, timeoutDuration);
      }
    };
  }

  var supportsMicroTasks = isBrowser && window.Promise;
  /**
  * Create a debounced version of a method, that's asynchronously deferred
  * but called in the minimum time possible.
  *
  * @method
  * @memberof Popper.Utils
  * @argument {Function} fn
  * @returns {Function}
  */

  var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
  /**
   * Check if the given variable is a function
   * @method
   * @memberof Popper.Utils
   * @argument {Any} functionToCheck - variable to check
   * @returns {Boolean} answer to: is a function?
   */

  function isFunction(functionToCheck) {
    var getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
  }
  /**
   * Get CSS computed property of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Eement} element
   * @argument {String} property
   */


  function getStyleComputedProperty(element, property) {
    if (element.nodeType !== 1) {
      return [];
    } // NOTE: 1 DOM access here


    var window = element.ownerDocument.defaultView;
    var css = window.getComputedStyle(element, null);
    return property ? css[property] : css;
  }
  /**
   * Returns the parentNode or the host of the element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} parent
   */


  function getParentNode(element) {
    if (element.nodeName === 'HTML') {
      return element;
    }

    return element.parentNode || element.host;
  }
  /**
   * Returns the scrolling parent of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} scroll parent
   */


  function getScrollParent(element) {
    // Return body, `getScroll` will take care to get the correct `scrollTop` from it
    if (!element) {
      return document.body;
    }

    switch (element.nodeName) {
      case 'HTML':
      case 'BODY':
        return element.ownerDocument.body;

      case '#document':
        return element.body;
    } // Firefox want us to check `-x` and `-y` variations as well


    var _getStyleComputedProp = getStyleComputedProperty(element),
        overflow = _getStyleComputedProp.overflow,
        overflowX = _getStyleComputedProp.overflowX,
        overflowY = _getStyleComputedProp.overflowY;

    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
      return element;
    }

    return getScrollParent(getParentNode(element));
  }
  /**
   * Returns the reference node of the reference object, or the reference object itself.
   * @method
   * @memberof Popper.Utils
   * @param {Element|Object} reference - the reference element (the popper will be relative to this)
   * @returns {Element} parent
   */


  function getReferenceNode(reference) {
    return reference && reference.referenceNode ? reference.referenceNode : reference;
  }

  var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
  var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
  /**
   * Determines if the browser is Internet Explorer
   * @method
   * @memberof Popper.Utils
   * @param {Number} version to check
   * @returns {Boolean} isIE
   */

  function isIE(version) {
    if (version === 11) {
      return isIE11;
    }

    if (version === 10) {
      return isIE10;
    }

    return isIE11 || isIE10;
  }
  /**
   * Returns the offset parent of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} offset parent
   */


  function getOffsetParent(element) {
    if (!element) {
      return document.documentElement;
    }

    var noOffsetParent = isIE(10) ? document.body : null; // NOTE: 1 DOM access here

    var offsetParent = element.offsetParent || null; // Skip hidden elements which don't have an offsetParent

    while (offsetParent === noOffsetParent && element.nextElementSibling) {
      offsetParent = (element = element.nextElementSibling).offsetParent;
    }

    var nodeName = offsetParent && offsetParent.nodeName;

    if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
      return element ? element.ownerDocument.documentElement : document.documentElement;
    } // .offsetParent will return the closest TH, TD or TABLE in case
    // no offsetParent is present, I hate this job...


    if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
      return getOffsetParent(offsetParent);
    }

    return offsetParent;
  }

  function isOffsetContainer(element) {
    var nodeName = element.nodeName;

    if (nodeName === 'BODY') {
      return false;
    }

    return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
  }
  /**
   * Finds the root node (document, shadowDOM root) of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} node
   * @returns {Element} root node
   */


  function getRoot(node) {
    if (node.parentNode !== null) {
      return getRoot(node.parentNode);
    }

    return node;
  }
  /**
   * Finds the offset parent common to the two provided nodes
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element1
   * @argument {Element} element2
   * @returns {Element} common offset parent
   */


  function findCommonOffsetParent(element1, element2) {
    // This check is needed to avoid errors in case one of the elements isn't defined for any reason
    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
      return document.documentElement;
    } // Here we make sure to give as "start" the element that comes first in the DOM


    var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
    var start = order ? element1 : element2;
    var end = order ? element2 : element1; // Get common ancestor container

    var range = document.createRange();
    range.setStart(start, 0);
    range.setEnd(end, 0);
    var commonAncestorContainer = range.commonAncestorContainer; // Both nodes are inside #document

    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
      if (isOffsetContainer(commonAncestorContainer)) {
        return commonAncestorContainer;
      }

      return getOffsetParent(commonAncestorContainer);
    } // one of the nodes is inside shadowDOM, find which one


    var element1root = getRoot(element1);

    if (element1root.host) {
      return findCommonOffsetParent(element1root.host, element2);
    } else {
      return findCommonOffsetParent(element1, getRoot(element2).host);
    }
  }
  /**
   * Gets the scroll value of the given element in the given side (top and left)
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @argument {String} side `top` or `left`
   * @returns {number} amount of scrolled pixels
   */


  function getScroll(element) {
    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
    var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
    var nodeName = element.nodeName;

    if (nodeName === 'BODY' || nodeName === 'HTML') {
      var html = element.ownerDocument.documentElement;
      var scrollingElement = element.ownerDocument.scrollingElement || html;
      return scrollingElement[upperSide];
    }

    return element[upperSide];
  }
  /*
   * Sum or subtract the element scroll values (left and top) from a given rect object
   * @method
   * @memberof Popper.Utils
   * @param {Object} rect - Rect object you want to change
   * @param {HTMLElement} element - The element from the function reads the scroll values
   * @param {Boolean} subtract - set to true if you want to subtract the scroll values
   * @return {Object} rect - The modifier rect object
   */


  function includeScroll(rect, element) {
    var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var scrollTop = getScroll(element, 'top');
    var scrollLeft = getScroll(element, 'left');
    var modifier = subtract ? -1 : 1;
    rect.top += scrollTop * modifier;
    rect.bottom += scrollTop * modifier;
    rect.left += scrollLeft * modifier;
    rect.right += scrollLeft * modifier;
    return rect;
  }
  /*
   * Helper to detect borders of a given element
   * @method
   * @memberof Popper.Utils
   * @param {CSSStyleDeclaration} styles
   * Result of `getStyleComputedProperty` on the given element
   * @param {String} axis - `x` or `y`
   * @return {number} borders - The borders size of the given axis
   */


  function getBordersSize(styles, axis) {
    var sideA = axis === 'x' ? 'Left' : 'Top';
    var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
    return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
  }

  function getSize(axis, body, html, computedStyle) {
    return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
  }

  function getWindowSizes(document) {
    var body = document.body;
    var html = document.documentElement;
    var computedStyle = isIE(10) && getComputedStyle(html);
    return {
      height: getSize('Height', body, html, computedStyle),
      width: getSize('Width', body, html, computedStyle)
    };
  }

  var classCallCheck = function classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var defineProperty = function defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  /**
   * Given element offsets, generate an output similar to getBoundingClientRect
   * @method
   * @memberof Popper.Utils
   * @argument {Object} offsets
   * @returns {Object} ClientRect like output
   */


  function getClientRect(offsets) {
    return _extends({}, offsets, {
      right: offsets.left + offsets.width,
      bottom: offsets.top + offsets.height
    });
  }
  /**
   * Get bounding client rect of given element
   * @method
   * @memberof Popper.Utils
   * @param {HTMLElement} element
   * @return {Object} client rect
   */


  function getBoundingClientRect(element) {
    var rect = {}; // IE10 10 FIX: Please, don't ask, the element isn't
    // considered in DOM in some circumstances...
    // This isn't reproducible in IE10 compatibility mode of IE11

    try {
      if (isIE(10)) {
        rect = element.getBoundingClientRect();
        var scrollTop = getScroll(element, 'top');
        var scrollLeft = getScroll(element, 'left');
        rect.top += scrollTop;
        rect.left += scrollLeft;
        rect.bottom += scrollTop;
        rect.right += scrollLeft;
      } else {
        rect = element.getBoundingClientRect();
      }
    } catch (e) {}

    var result = {
      left: rect.left,
      top: rect.top,
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    }; // subtract scrollbar size from sizes

    var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
    var width = sizes.width || element.clientWidth || result.width;
    var height = sizes.height || element.clientHeight || result.height;
    var horizScrollbar = element.offsetWidth - width;
    var vertScrollbar = element.offsetHeight - height; // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
    // we make this check conditional for performance reasons

    if (horizScrollbar || vertScrollbar) {
      var styles = getStyleComputedProperty(element);
      horizScrollbar -= getBordersSize(styles, 'x');
      vertScrollbar -= getBordersSize(styles, 'y');
      result.width -= horizScrollbar;
      result.height -= vertScrollbar;
    }

    return getClientRect(result);
  }

  function getOffsetRectRelativeToArbitraryNode(children, parent) {
    var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var isIE10 = isIE(10);
    var isHTML = parent.nodeName === 'HTML';
    var childrenRect = getBoundingClientRect(children);
    var parentRect = getBoundingClientRect(parent);
    var scrollParent = getScrollParent(children);
    var styles = getStyleComputedProperty(parent);
    var borderTopWidth = parseFloat(styles.borderTopWidth);
    var borderLeftWidth = parseFloat(styles.borderLeftWidth); // In cases where the parent is fixed, we must ignore negative scroll in offset calc

    if (fixedPosition && isHTML) {
      parentRect.top = Math.max(parentRect.top, 0);
      parentRect.left = Math.max(parentRect.left, 0);
    }

    var offsets = getClientRect({
      top: childrenRect.top - parentRect.top - borderTopWidth,
      left: childrenRect.left - parentRect.left - borderLeftWidth,
      width: childrenRect.width,
      height: childrenRect.height
    });
    offsets.marginTop = 0;
    offsets.marginLeft = 0; // Subtract margins of documentElement in case it's being used as parent
    // we do this only on HTML because it's the only element that behaves
    // differently when margins are applied to it. The margins are included in
    // the box of the documentElement, in the other cases not.

    if (!isIE10 && isHTML) {
      var marginTop = parseFloat(styles.marginTop);
      var marginLeft = parseFloat(styles.marginLeft);
      offsets.top -= borderTopWidth - marginTop;
      offsets.bottom -= borderTopWidth - marginTop;
      offsets.left -= borderLeftWidth - marginLeft;
      offsets.right -= borderLeftWidth - marginLeft; // Attach marginTop and marginLeft because in some circumstances we may need them

      offsets.marginTop = marginTop;
      offsets.marginLeft = marginLeft;
    }

    if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
      offsets = includeScroll(offsets, parent);
    }

    return offsets;
  }

  function getViewportOffsetRectRelativeToArtbitraryNode(element) {
    var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var html = element.ownerDocument.documentElement;
    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
    var width = Math.max(html.clientWidth, window.innerWidth || 0);
    var height = Math.max(html.clientHeight, window.innerHeight || 0);
    var scrollTop = !excludeScroll ? getScroll(html) : 0;
    var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
    var offset = {
      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
      width: width,
      height: height
    };
    return getClientRect(offset);
  }
  /**
   * Check if the given element is fixed or is inside a fixed parent
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @argument {Element} customContainer
   * @returns {Boolean} answer to "isFixed?"
   */


  function isFixed(element) {
    var nodeName = element.nodeName;

    if (nodeName === 'BODY' || nodeName === 'HTML') {
      return false;
    }

    if (getStyleComputedProperty(element, 'position') === 'fixed') {
      return true;
    }

    var parentNode = getParentNode(element);

    if (!parentNode) {
      return false;
    }

    return isFixed(parentNode);
  }
  /**
   * Finds the first parent of an element that has a transformed property defined
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} first transformed parent or documentElement
   */


  function getFixedPositionOffsetParent(element) {
    // This check is needed to avoid errors in case one of the elements isn't defined for any reason
    if (!element || !element.parentElement || isIE()) {
      return document.documentElement;
    }

    var el = element.parentElement;

    while (el && getStyleComputedProperty(el, 'transform') === 'none') {
      el = el.parentElement;
    }

    return el || document.documentElement;
  }
  /**
   * Computed the boundaries limits and return them
   * @method
   * @memberof Popper.Utils
   * @param {HTMLElement} popper
   * @param {HTMLElement} reference
   * @param {number} padding
   * @param {HTMLElement} boundariesElement - Element used to define the boundaries
   * @param {Boolean} fixedPosition - Is in fixed position mode
   * @returns {Object} Coordinates of the boundaries
   */


  function getBoundaries(popper, reference, padding, boundariesElement) {
    var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false; // NOTE: 1 DOM access here

    var boundaries = {
      top: 0,
      left: 0
    };
    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference)); // Handle viewport case

    if (boundariesElement === 'viewport') {
      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
    } else {
      // Handle other cases based on DOM element used as boundaries
      var boundariesNode = void 0;

      if (boundariesElement === 'scrollParent') {
        boundariesNode = getScrollParent(getParentNode(reference));

        if (boundariesNode.nodeName === 'BODY') {
          boundariesNode = popper.ownerDocument.documentElement;
        }
      } else if (boundariesElement === 'window') {
        boundariesNode = popper.ownerDocument.documentElement;
      } else {
        boundariesNode = boundariesElement;
      }

      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition); // In case of HTML, we need a different computation

      if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
        var _getWindowSizes = getWindowSizes(popper.ownerDocument),
            height = _getWindowSizes.height,
            width = _getWindowSizes.width;

        boundaries.top += offsets.top - offsets.marginTop;
        boundaries.bottom = height + offsets.top;
        boundaries.left += offsets.left - offsets.marginLeft;
        boundaries.right = width + offsets.left;
      } else {
        // for all the other DOM elements, this one is good
        boundaries = offsets;
      }
    } // Add paddings


    padding = padding || 0;
    var isPaddingNumber = typeof padding === 'number';
    boundaries.left += isPaddingNumber ? padding : padding.left || 0;
    boundaries.top += isPaddingNumber ? padding : padding.top || 0;
    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
    return boundaries;
  }

  function getArea(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width * height;
  }
  /**
   * Utility used to transform the `auto` placement to the placement with more
   * available space.
   * @method
   * @memberof Popper.Utils
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */


  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
    var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

    if (placement.indexOf('auto') === -1) {
      return placement;
    }

    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
    var rects = {
      top: {
        width: boundaries.width,
        height: refRect.top - boundaries.top
      },
      right: {
        width: boundaries.right - refRect.right,
        height: boundaries.height
      },
      bottom: {
        width: boundaries.width,
        height: boundaries.bottom - refRect.bottom
      },
      left: {
        width: refRect.left - boundaries.left,
        height: boundaries.height
      }
    };
    var sortedAreas = Object.keys(rects).map(function (key) {
      return _extends({
        key: key
      }, rects[key], {
        area: getArea(rects[key])
      });
    }).sort(function (a, b) {
      return b.area - a.area;
    });
    var filteredAreas = sortedAreas.filter(function (_ref2) {
      var width = _ref2.width,
          height = _ref2.height;
      return width >= popper.clientWidth && height >= popper.clientHeight;
    });
    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
    var variation = placement.split('-')[1];
    return computedPlacement + (variation ? '-' + variation : '');
  }
  /**
   * Get offsets to the reference element
   * @method
   * @memberof Popper.Utils
   * @param {Object} state
   * @param {Element} popper - the popper element
   * @param {Element} reference - the reference element (the popper will be relative to this)
   * @param {Element} fixedPosition - is in fixed position mode
   * @returns {Object} An object containing the offsets which will be applied to the popper
   */


  function getReferenceOffsets(state, popper, reference) {
    var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
  }
  /**
   * Get the outer sizes of the given element (offset size + margins)
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Object} object containing width and height properties
   */


  function getOuterSizes(element) {
    var window = element.ownerDocument.defaultView;
    var styles = window.getComputedStyle(element);
    var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
    var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
    var result = {
      width: element.offsetWidth + y,
      height: element.offsetHeight + x
    };
    return result;
  }
  /**
   * Get the opposite placement of the given one
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement
   * @returns {String} flipped placement
   */


  function getOppositePlacement(placement) {
    var hash = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash[matched];
    });
  }
  /**
   * Get offsets to the popper
   * @method
   * @memberof Popper.Utils
   * @param {Object} position - CSS position the Popper will get applied
   * @param {HTMLElement} popper - the popper element
   * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
   * @param {String} placement - one of the valid placement options
   * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
   */


  function getPopperOffsets(popper, referenceOffsets, placement) {
    placement = placement.split('-')[0]; // Get popper node sizes

    var popperRect = getOuterSizes(popper); // Add position, width and height to our offsets object

    var popperOffsets = {
      width: popperRect.width,
      height: popperRect.height
    }; // depending by the popper placement we have to compute its offsets slightly differently

    var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
    var mainSide = isHoriz ? 'top' : 'left';
    var secondarySide = isHoriz ? 'left' : 'top';
    var measurement = isHoriz ? 'height' : 'width';
    var secondaryMeasurement = !isHoriz ? 'height' : 'width';
    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;

    if (placement === secondarySide) {
      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
    } else {
      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
    }

    return popperOffsets;
  }
  /**
   * Mimics the `find` method of Array
   * @method
   * @memberof Popper.Utils
   * @argument {Array} arr
   * @argument prop
   * @argument value
   * @returns index or -1
   */


  function find(arr, check) {
    // use native find if supported
    if (Array.prototype.find) {
      return arr.find(check);
    } // use `filter` to obtain the same behavior of `find`


    return arr.filter(check)[0];
  }
  /**
   * Return the index of the matching object
   * @method
   * @memberof Popper.Utils
   * @argument {Array} arr
   * @argument prop
   * @argument value
   * @returns index or -1
   */


  function findIndex(arr, prop, value) {
    // use native findIndex if supported
    if (Array.prototype.findIndex) {
      return arr.findIndex(function (cur) {
        return cur[prop] === value;
      });
    } // use `find` + `indexOf` if `findIndex` isn't supported


    var match = find(arr, function (obj) {
      return obj[prop] === value;
    });
    return arr.indexOf(match);
  }
  /**
   * Loop trough the list of modifiers and run them in order,
   * each of them will then edit the data object.
   * @method
   * @memberof Popper.Utils
   * @param {dataObject} data
   * @param {Array} modifiers
   * @param {String} ends - Optional modifier name used as stopper
   * @returns {dataObject}
   */


  function runModifiers(modifiers, data, ends) {
    var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
    modifiersToRun.forEach(function (modifier) {
      if (modifier['function']) {
        // eslint-disable-line dot-notation
        console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
      }

      var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation

      if (modifier.enabled && isFunction(fn)) {
        // Add properties to offsets to make them a complete clientRect object
        // we do this before each modifier to make sure the previous one doesn't
        // mess with these values
        data.offsets.popper = getClientRect(data.offsets.popper);
        data.offsets.reference = getClientRect(data.offsets.reference);
        data = fn(data, modifier);
      }
    });
    return data;
  }
  /**
   * Updates the position of the popper, computing the new offsets and applying
   * the new style.<br />
   * Prefer `scheduleUpdate` over `update` because of performance reasons.
   * @method
   * @memberof Popper
   */


  function update() {
    // if popper is destroyed, don't perform any further update
    if (this.state.isDestroyed) {
      return;
    }

    var data = {
      instance: this,
      styles: {},
      arrowStyles: {},
      attributes: {},
      flipped: false,
      offsets: {}
    }; // compute reference element offsets

    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed); // compute auto placement, store placement inside the data object,
    // modifiers will be able to edit `placement` if needed
    // and refer to originalPlacement to know the original value

    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding); // store the computed placement inside `originalPlacement`

    data.originalPlacement = data.placement;
    data.positionFixed = this.options.positionFixed; // compute the popper offsets

    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
    data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute'; // run the modifiers

    data = runModifiers(this.modifiers, data); // the first `update` will call `onCreate` callback
    // the other ones will call `onUpdate` callback

    if (!this.state.isCreated) {
      this.state.isCreated = true;
      this.options.onCreate(data);
    } else {
      this.options.onUpdate(data);
    }
  }
  /**
   * Helper used to know if the given modifier is enabled.
   * @method
   * @memberof Popper.Utils
   * @returns {Boolean}
   */


  function isModifierEnabled(modifiers, modifierName) {
    return modifiers.some(function (_ref) {
      var name = _ref.name,
          enabled = _ref.enabled;
      return enabled && name === modifierName;
    });
  }
  /**
   * Get the prefixed supported property name
   * @method
   * @memberof Popper.Utils
   * @argument {String} property (camelCase)
   * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
   */


  function getSupportedPropertyName(property) {
    var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

    for (var i = 0; i < prefixes.length; i++) {
      var prefix = prefixes[i];
      var toCheck = prefix ? '' + prefix + upperProp : property;

      if (typeof document.body.style[toCheck] !== 'undefined') {
        return toCheck;
      }
    }

    return null;
  }
  /**
   * Destroys the popper.
   * @method
   * @memberof Popper
   */


  function destroy() {
    this.state.isDestroyed = true; // touch DOM only if `applyStyle` modifier is enabled

    if (isModifierEnabled(this.modifiers, 'applyStyle')) {
      this.popper.removeAttribute('x-placement');
      this.popper.style.position = '';
      this.popper.style.top = '';
      this.popper.style.left = '';
      this.popper.style.right = '';
      this.popper.style.bottom = '';
      this.popper.style.willChange = '';
      this.popper.style[getSupportedPropertyName('transform')] = '';
    }

    this.disableEventListeners(); // remove the popper if user explicitly asked for the deletion on destroy
    // do not use `remove` because IE11 doesn't support it

    if (this.options.removeOnDestroy) {
      this.popper.parentNode.removeChild(this.popper);
    }

    return this;
  }
  /**
   * Get the window associated with the element
   * @argument {Element} element
   * @returns {Window}
   */


  function getWindow(element) {
    var ownerDocument = element.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView : window;
  }

  function attachToScrollParents(scrollParent, event, callback, scrollParents) {
    var isBody = scrollParent.nodeName === 'BODY';
    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
    target.addEventListener(event, callback, {
      passive: true
    });

    if (!isBody) {
      attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
    }

    scrollParents.push(target);
  }
  /**
   * Setup needed event listeners used to update the popper position
   * @method
   * @memberof Popper.Utils
   * @private
   */


  function setupEventListeners(reference, options, state, updateBound) {
    // Resize event listener on window
    state.updateBound = updateBound;
    getWindow(reference).addEventListener('resize', state.updateBound, {
      passive: true
    }); // Scroll event listener on scroll parents

    var scrollElement = getScrollParent(reference);
    attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
    state.scrollElement = scrollElement;
    state.eventsEnabled = true;
    return state;
  }
  /**
   * It will add resize/scroll events and start recalculating
   * position of the popper element when they are triggered.
   * @method
   * @memberof Popper
   */


  function enableEventListeners() {
    if (!this.state.eventsEnabled) {
      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
    }
  }
  /**
   * Remove event listeners used to update the popper position
   * @method
   * @memberof Popper.Utils
   * @private
   */


  function removeEventListeners(reference, state) {
    // Remove resize event listener on window
    getWindow(reference).removeEventListener('resize', state.updateBound); // Remove scroll event listener on scroll parents

    state.scrollParents.forEach(function (target) {
      target.removeEventListener('scroll', state.updateBound);
    }); // Reset state

    state.updateBound = null;
    state.scrollParents = [];
    state.scrollElement = null;
    state.eventsEnabled = false;
    return state;
  }
  /**
   * It will remove resize/scroll events and won't recalculate popper position
   * when they are triggered. It also won't trigger `onUpdate` callback anymore,
   * unless you call `update` method manually.
   * @method
   * @memberof Popper
   */


  function disableEventListeners() {
    if (this.state.eventsEnabled) {
      cancelAnimationFrame(this.scheduleUpdate);
      this.state = removeEventListeners(this.reference, this.state);
    }
  }
  /**
   * Tells if a given input is a number
   * @method
   * @memberof Popper.Utils
   * @param {*} input to check
   * @return {Boolean}
   */


  function isNumeric(n) {
    return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
  }
  /**
   * Set the style to the given popper
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element - Element to apply the style to
   * @argument {Object} styles
   * Object with a list of properties and values which will be applied to the element
   */


  function setStyles(element, styles) {
    Object.keys(styles).forEach(function (prop) {
      var unit = ''; // add unit if the value is numeric and is one of the following

      if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
        unit = 'px';
      }

      element.style[prop] = styles[prop] + unit;
    });
  }
  /**
   * Set the attributes to the given popper
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element - Element to apply the attributes to
   * @argument {Object} styles
   * Object with a list of properties and values which will be applied to the element
   */


  function setAttributes(element, attributes) {
    Object.keys(attributes).forEach(function (prop) {
      var value = attributes[prop];

      if (value !== false) {
        element.setAttribute(prop, attributes[prop]);
      } else {
        element.removeAttribute(prop);
      }
    });
  }
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} data.styles - List of style properties - values to apply to popper element
   * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The same data object
   */


  function applyStyle(data) {
    // any property present in `data.styles` will be applied to the popper,
    // in this way we can make the 3rd party modifiers add custom styles to it
    // Be aware, modifiers could override the properties defined in the previous
    // lines of this modifier!
    setStyles(data.instance.popper, data.styles); // any property present in `data.attributes` will be applied to the popper,
    // they will be set as HTML attributes of the element

    setAttributes(data.instance.popper, data.attributes); // if arrowElement is defined and arrowStyles has some properties

    if (data.arrowElement && Object.keys(data.arrowStyles).length) {
      setStyles(data.arrowElement, data.arrowStyles);
    }

    return data;
  }
  /**
   * Set the x-placement attribute before everything else because it could be used
   * to add margins to the popper margins needs to be calculated to get the
   * correct popper offsets.
   * @method
   * @memberof Popper.modifiers
   * @param {HTMLElement} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as popper
   * @param {Object} options - Popper.js options
   */


  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
    // compute reference element offsets
    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed); // compute auto placement, store placement inside the data object,
    // modifiers will be able to edit `placement` if needed
    // and refer to originalPlacement to know the original value

    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
    popper.setAttribute('x-placement', placement); // Apply `position` to popper before anything else because
    // without the position applied we can't guarantee correct computations

    setStyles(popper, {
      position: options.positionFixed ? 'fixed' : 'absolute'
    });
    return options;
  }
  /**
   * @function
   * @memberof Popper.Utils
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Boolean} shouldRound - If the offsets should be rounded at all
   * @returns {Object} The popper's position offsets rounded
   *
   * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
   * good as it can be within reason.
   * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
   *
   * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
   * as well on High DPI screens).
   *
   * Firefox prefers no rounding for positioning and does not have blurriness on
   * high DPI screens.
   *
   * Only horizontal placement and left/right values need to be considered.
   */


  function getRoundedOffsets(data, shouldRound) {
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;
    var round = Math.round,
        floor = Math.floor;

    var noRound = function noRound(v) {
      return v;
    };

    var referenceWidth = round(reference.width);
    var popperWidth = round(popper.width);
    var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
    var isVariation = data.placement.indexOf('-') !== -1;
    var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
    var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
    var verticalToInteger = !shouldRound ? noRound : round;
    return {
      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
      top: verticalToInteger(popper.top),
      bottom: verticalToInteger(popper.bottom),
      right: horizontalToInteger(popper.right)
    };
  }

  var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */

  function computeStyle(data, options) {
    var x = options.x,
        y = options.y;
    var popper = data.offsets.popper; // Remove this legacy support in Popper.js v2

    var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
      return modifier.name === 'applyStyle';
    }).gpuAcceleration;

    if (legacyGpuAccelerationOption !== undefined) {
      console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
    }

    var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
    var offsetParent = getOffsetParent(data.instance.popper);
    var offsetParentRect = getBoundingClientRect(offsetParent); // Styles

    var styles = {
      position: popper.position
    };
    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
    var sideA = x === 'bottom' ? 'top' : 'bottom';
    var sideB = y === 'right' ? 'left' : 'right'; // if gpuAcceleration is set to `true` and transform is supported,
    //  we use `translate3d` to apply the position to the popper we
    // automatically use the supported prefixed version if needed

    var prefixedProperty = getSupportedPropertyName('transform'); // now, let's make a step back and look at this code closely (wtf?)
    // If the content of the popper grows once it's been positioned, it
    // may happen that the popper gets misplaced because of the new content
    // overflowing its reference element
    // To avoid this problem, we provide two options (x and y), which allow
    // the consumer to define the offset origin.
    // If we position a popper on top of a reference element, we can set
    // `x` to `top` to make the popper grow towards its top instead of
    // its bottom.

    var left = void 0,
        top = void 0;

    if (sideA === 'bottom') {
      // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
      // and not the bottom of the html element
      if (offsetParent.nodeName === 'HTML') {
        top = -offsetParent.clientHeight + offsets.bottom;
      } else {
        top = -offsetParentRect.height + offsets.bottom;
      }
    } else {
      top = offsets.top;
    }

    if (sideB === 'right') {
      if (offsetParent.nodeName === 'HTML') {
        left = -offsetParent.clientWidth + offsets.right;
      } else {
        left = -offsetParentRect.width + offsets.right;
      }
    } else {
      left = offsets.left;
    }

    if (gpuAcceleration && prefixedProperty) {
      styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
      styles[sideA] = 0;
      styles[sideB] = 0;
      styles.willChange = 'transform';
    } else {
      // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
      var invertTop = sideA === 'bottom' ? -1 : 1;
      var invertLeft = sideB === 'right' ? -1 : 1;
      styles[sideA] = top * invertTop;
      styles[sideB] = left * invertLeft;
      styles.willChange = sideA + ', ' + sideB;
    } // Attributes


    var attributes = {
      'x-placement': data.placement
    }; // Update `data` attributes, styles and arrowStyles

    data.attributes = _extends({}, attributes, data.attributes);
    data.styles = _extends({}, styles, data.styles);
    data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
    return data;
  }
  /**
   * Helper used to know if the given modifier depends from another one.<br />
   * It checks if the needed modifier is listed and enabled.
   * @method
   * @memberof Popper.Utils
   * @param {Array} modifiers - list of modifiers
   * @param {String} requestingName - name of requesting modifier
   * @param {String} requestedName - name of requested modifier
   * @returns {Boolean}
   */


  function isModifierRequired(modifiers, requestingName, requestedName) {
    var requesting = find(modifiers, function (_ref) {
      var name = _ref.name;
      return name === requestingName;
    });
    var isRequired = !!requesting && modifiers.some(function (modifier) {
      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
    });

    if (!isRequired) {
      var _requesting = '`' + requestingName + '`';

      var requested = '`' + requestedName + '`';
      console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
    }

    return isRequired;
  }
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */


  function arrow(data, options) {
    var _data$offsets$arrow; // arrow depends on keepTogether in order to work


    if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
      return data;
    }

    var arrowElement = options.element; // if arrowElement is a string, suppose it's a CSS selector

    if (typeof arrowElement === 'string') {
      arrowElement = data.instance.popper.querySelector(arrowElement); // if arrowElement is not found, don't run the modifier

      if (!arrowElement) {
        return data;
      }
    } else {
      // if the arrowElement isn't a query selector we must check that the
      // provided DOM node is child of its popper node
      if (!data.instance.popper.contains(arrowElement)) {
        console.warn('WARNING: `arrow.element` must be child of its popper element!');
        return data;
      }
    }

    var placement = data.placement.split('-')[0];
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;
    var isVertical = ['left', 'right'].indexOf(placement) !== -1;
    var len = isVertical ? 'height' : 'width';
    var sideCapitalized = isVertical ? 'Top' : 'Left';
    var side = sideCapitalized.toLowerCase();
    var altSide = isVertical ? 'left' : 'top';
    var opSide = isVertical ? 'bottom' : 'right';
    var arrowElementSize = getOuterSizes(arrowElement)[len]; //
    // extends keepTogether behavior making sure the popper and its
    // reference have enough pixels in conjunction
    //
    // top/left side

    if (reference[opSide] - arrowElementSize < popper[side]) {
      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
    } // bottom/right side


    if (reference[side] + arrowElementSize > popper[opSide]) {
      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
    }

    data.offsets.popper = getClientRect(data.offsets.popper); // compute center of the popper

    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2; // Compute the sideValue using the updated popper offsets
    // take popper margin in account because we don't have this info available

    var css = getStyleComputedProperty(data.instance.popper);
    var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
    var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide; // prevent arrowElement from being placed not contiguously to its popper

    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
    data.arrowElement = arrowElement;
    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
    return data;
  }
  /**
   * Get the opposite placement variation of the given one
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement variation
   * @returns {String} flipped placement variation
   */


  function getOppositeVariation(variation) {
    if (variation === 'end') {
      return 'start';
    } else if (variation === 'start') {
      return 'end';
    }

    return variation;
  }
  /**
   * List of accepted placements to use as values of the `placement` option.<br />
   * Valid placements are:
   * - `auto`
   * - `top`
   * - `right`
   * - `bottom`
   * - `left`
   *
   * Each placement can have a variation from this list:
   * - `-start`
   * - `-end`
   *
   * Variations are interpreted easily if you think of them as the left to right
   * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
   * is right.<br />
   * Vertically (`left` and `right`), `start` is top and `end` is bottom.
   *
   * Some valid examples are:
   * - `top-end` (on top of reference, right aligned)
   * - `right-start` (on right of reference, top aligned)
   * - `bottom` (on bottom, centered)
   * - `auto-end` (on the side with more space available, alignment depends by placement)
   *
   * @static
   * @type {Array}
   * @enum {String}
   * @readonly
   * @method placements
   * @memberof Popper
   */


  var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']; // Get rid of `auto` `auto-start` and `auto-end`

  var validPlacements = placements.slice(3);
  /**
   * Given an initial placement, returns all the subsequent placements
   * clockwise (or counter-clockwise).
   *
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement - A valid placement (it accepts variations)
   * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
   * @returns {Array} placements including their variations
   */

  function clockwise(placement) {
    var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var index = validPlacements.indexOf(placement);
    var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
    return counter ? arr.reverse() : arr;
  }

  var BEHAVIORS = {
    FLIP: 'flip',
    CLOCKWISE: 'clockwise',
    COUNTERCLOCKWISE: 'counterclockwise'
  };
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */

  function flip(data, options) {
    // if `inner` modifier is enabled, we can't use the `flip` modifier
    if (isModifierEnabled(data.instance.modifiers, 'inner')) {
      return data;
    }

    if (data.flipped && data.placement === data.originalPlacement) {
      // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
      return data;
    }

    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
    var placement = data.placement.split('-')[0];
    var placementOpposite = getOppositePlacement(placement);
    var variation = data.placement.split('-')[1] || '';
    var flipOrder = [];

    switch (options.behavior) {
      case BEHAVIORS.FLIP:
        flipOrder = [placement, placementOpposite];
        break;

      case BEHAVIORS.CLOCKWISE:
        flipOrder = clockwise(placement);
        break;

      case BEHAVIORS.COUNTERCLOCKWISE:
        flipOrder = clockwise(placement, true);
        break;

      default:
        flipOrder = options.behavior;
    }

    flipOrder.forEach(function (step, index) {
      if (placement !== step || flipOrder.length === index + 1) {
        return data;
      }

      placement = data.placement.split('-')[0];
      placementOpposite = getOppositePlacement(placement);
      var popperOffsets = data.offsets.popper;
      var refOffsets = data.offsets.reference; // using floor because the reference offsets may contain decimals we are not going to consider here

      var floor = Math.floor;
      var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
      var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom; // flip the variation if required

      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1; // flips variation if reference element overflows boundaries

      var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom); // flips variation if popper content overflows boundaries

      var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);
      var flippedVariation = flippedVariationByRef || flippedVariationByContent;

      if (overlapsRef || overflowsBoundaries || flippedVariation) {
        // this boolean to detect any flip loop
        data.flipped = true;

        if (overlapsRef || overflowsBoundaries) {
          placement = flipOrder[index + 1];
        }

        if (flippedVariation) {
          variation = getOppositeVariation(variation);
        }

        data.placement = placement + (variation ? '-' + variation : ''); // this object contains `position`, we want to preserve it along with
        // any additional property we may add in the future

        data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
        data = runModifiers(data.instance.modifiers, data, 'flip');
      }
    });
    return data;
  }
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */


  function keepTogether(data) {
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;
    var placement = data.placement.split('-')[0];
    var floor = Math.floor;
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var side = isVertical ? 'right' : 'bottom';
    var opSide = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    if (popper[side] < floor(reference[opSide])) {
      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
    }

    if (popper[opSide] > floor(reference[side])) {
      data.offsets.popper[opSide] = floor(reference[side]);
    }

    return data;
  }
  /**
   * Converts a string containing value + unit into a px value number
   * @function
   * @memberof {modifiers~offset}
   * @private
   * @argument {String} str - Value + unit string
   * @argument {String} measurement - `height` or `width`
   * @argument {Object} popperOffsets
   * @argument {Object} referenceOffsets
   * @returns {Number|String}
   * Value in pixels, or original string if no values were extracted
   */


  function toValue(str, measurement, popperOffsets, referenceOffsets) {
    // separate value from unit
    var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
    var value = +split[1];
    var unit = split[2]; // If it's not a number it's an operator, I guess

    if (!value) {
      return str;
    }

    if (unit.indexOf('%') === 0) {
      var element = void 0;

      switch (unit) {
        case '%p':
          element = popperOffsets;
          break;

        case '%':
        case '%r':
        default:
          element = referenceOffsets;
      }

      var rect = getClientRect(element);
      return rect[measurement] / 100 * value;
    } else if (unit === 'vh' || unit === 'vw') {
      // if is a vh or vw, we calculate the size based on the viewport
      var size = void 0;

      if (unit === 'vh') {
        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
      } else {
        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      }

      return size / 100 * value;
    } else {
      // if is an explicit pixel unit, we get rid of the unit and keep the value
      // if is an implicit unit, it's px, and we return just the value
      return value;
    }
  }
  /**
   * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
   * @function
   * @memberof {modifiers~offset}
   * @private
   * @argument {String} offset
   * @argument {Object} popperOffsets
   * @argument {Object} referenceOffsets
   * @argument {String} basePlacement
   * @returns {Array} a two cells array with x and y offsets in numbers
   */


  function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
    var offsets = [0, 0]; // Use height if placement is left or right and index is 0 otherwise use width
    // in this way the first offset will use an axis and the second one
    // will use the other one

    var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1; // Split the offset string to obtain a list of values and operands
    // The regex addresses values with the plus or minus sign in front (+10, -20, etc)

    var fragments = offset.split(/(\+|\-)/).map(function (frag) {
      return frag.trim();
    }); // Detect if the offset string contains a pair of values or a single one
    // they could be separated by comma or space

    var divider = fragments.indexOf(find(fragments, function (frag) {
      return frag.search(/,|\s/) !== -1;
    }));

    if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
      console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
    } // If divider is found, we divide the list of values and operands to divide
    // them by ofset X and Y.


    var splitRegex = /\s*,\s*|\s+/;
    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments]; // Convert the values with units to absolute pixels to allow our computations

    ops = ops.map(function (op, index) {
      // Most of the units rely on the orientation of the popper
      var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
      var mergeWithPrevious = false;
      return op // This aggregates any `+` or `-` sign that aren't considered operators
      // e.g.: 10 + +5 => [10, +, +5]
      .reduce(function (a, b) {
        if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
          a[a.length - 1] = b;
          mergeWithPrevious = true;
          return a;
        } else if (mergeWithPrevious) {
          a[a.length - 1] += b;
          mergeWithPrevious = false;
          return a;
        } else {
          return a.concat(b);
        }
      }, []) // Here we convert the string values into number values (in px)
      .map(function (str) {
        return toValue(str, measurement, popperOffsets, referenceOffsets);
      });
    }); // Loop trough the offsets arrays and execute the operations

    ops.forEach(function (op, index) {
      op.forEach(function (frag, index2) {
        if (isNumeric(frag)) {
          offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
        }
      });
    });
    return offsets;
  }
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @argument {Number|String} options.offset=0
   * The offset value as described in the modifier description
   * @returns {Object} The data object, properly modified
   */


  function offset(data, _ref) {
    var offset = _ref.offset;
    var placement = data.placement,
        _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;
    var basePlacement = placement.split('-')[0];
    var offsets = void 0;

    if (isNumeric(+offset)) {
      offsets = [+offset, 0];
    } else {
      offsets = parseOffset(offset, popper, reference, basePlacement);
    }

    if (basePlacement === 'left') {
      popper.top += offsets[0];
      popper.left -= offsets[1];
    } else if (basePlacement === 'right') {
      popper.top += offsets[0];
      popper.left += offsets[1];
    } else if (basePlacement === 'top') {
      popper.left += offsets[0];
      popper.top -= offsets[1];
    } else if (basePlacement === 'bottom') {
      popper.left += offsets[0];
      popper.top += offsets[1];
    }

    data.popper = popper;
    return data;
  }
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */


  function preventOverflow(data, options) {
    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper); // If offsetParent is the reference element, we really want to
    // go one step up and use the next offsetParent as reference to
    // avoid to make this modifier completely useless and look like broken

    if (data.instance.reference === boundariesElement) {
      boundariesElement = getOffsetParent(boundariesElement);
    } // NOTE: DOM access here
    // resets the popper's position so that the document size can be calculated excluding
    // the size of the popper element itself


    var transformProp = getSupportedPropertyName('transform');
    var popperStyles = data.instance.popper.style; // assignment to help minification

    var top = popperStyles.top,
        left = popperStyles.left,
        transform = popperStyles[transformProp];
    popperStyles.top = '';
    popperStyles.left = '';
    popperStyles[transformProp] = '';
    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed); // NOTE: DOM access here
    // restores the original style properties after the offsets have been computed

    popperStyles.top = top;
    popperStyles.left = left;
    popperStyles[transformProp] = transform;
    options.boundaries = boundaries;
    var order = options.priority;
    var popper = data.offsets.popper;
    var check = {
      primary: function primary(placement) {
        var value = popper[placement];

        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
          value = Math.max(popper[placement], boundaries[placement]);
        }

        return defineProperty({}, placement, value);
      },
      secondary: function secondary(placement) {
        var mainSide = placement === 'right' ? 'left' : 'top';
        var value = popper[mainSide];

        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
          value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
        }

        return defineProperty({}, mainSide, value);
      }
    };
    order.forEach(function (placement) {
      var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
      popper = _extends({}, popper, check[side](placement));
    });
    data.offsets.popper = popper;
    return data;
  }
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */


  function shift(data) {
    var placement = data.placement;
    var basePlacement = placement.split('-')[0];
    var shiftvariation = placement.split('-')[1]; // if shift shiftvariation is specified, run the modifier

    if (shiftvariation) {
      var _data$offsets = data.offsets,
          reference = _data$offsets.reference,
          popper = _data$offsets.popper;
      var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
      var side = isVertical ? 'left' : 'top';
      var measurement = isVertical ? 'width' : 'height';
      var shiftOffsets = {
        start: defineProperty({}, side, reference[side]),
        end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
      };
      data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
    }

    return data;
  }
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */


  function hide(data) {
    if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
      return data;
    }

    var refRect = data.offsets.reference;
    var bound = find(data.instance.modifiers, function (modifier) {
      return modifier.name === 'preventOverflow';
    }).boundaries;

    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
      // Avoid unnecessary DOM access if visibility hasn't changed
      if (data.hide === true) {
        return data;
      }

      data.hide = true;
      data.attributes['x-out-of-boundaries'] = '';
    } else {
      // Avoid unnecessary DOM access if visibility hasn't changed
      if (data.hide === false) {
        return data;
      }

      data.hide = false;
      data.attributes['x-out-of-boundaries'] = false;
    }

    return data;
  }
  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */


  function inner(data) {
    var placement = data.placement;
    var basePlacement = placement.split('-')[0];
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;
    var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
    var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
    popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
    data.placement = getOppositePlacement(placement);
    data.offsets.popper = getClientRect(popper);
    return data;
  }
  /**
   * Modifier function, each modifier can have a function of this type assigned
   * to its `fn` property.<br />
   * These functions will be called on each update, this means that you must
   * make sure they are performant enough to avoid performance bottlenecks.
   *
   * @function ModifierFn
   * @argument {dataObject} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {dataObject} The data object, properly modified
   */

  /**
   * Modifiers are plugins used to alter the behavior of your poppers.<br />
   * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
   * needed by the library.
   *
   * Usually you don't want to override the `order`, `fn` and `onLoad` props.
   * All the other properties are configurations that could be tweaked.
   * @namespace modifiers
   */


  var modifiers = {
    /**
     * Modifier used to shift the popper on the start or end of its reference
     * element.<br />
     * It will read the variation of the `placement` property.<br />
     * It can be one either `-end` or `-start`.
     * @memberof modifiers
     * @inner
     */
    shift: {
      /** @prop {number} order=100 - Index used to define the order of execution */
      order: 100,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: shift
    },

    /**
     * The `offset` modifier can shift your popper on both its axis.
     *
     * It accepts the following units:
     * - `px` or unit-less, interpreted as pixels
     * - `%` or `%r`, percentage relative to the length of the reference element
     * - `%p`, percentage relative to the length of the popper element
     * - `vw`, CSS viewport width unit
     * - `vh`, CSS viewport height unit
     *
     * For length is intended the main axis relative to the placement of the popper.<br />
     * This means that if the placement is `top` or `bottom`, the length will be the
     * `width`. In case of `left` or `right`, it will be the `height`.
     *
     * You can provide a single value (as `Number` or `String`), or a pair of values
     * as `String` divided by a comma or one (or more) white spaces.<br />
     * The latter is a deprecated method because it leads to confusion and will be
     * removed in v2.<br />
     * Additionally, it accepts additions and subtractions between different units.
     * Note that multiplications and divisions aren't supported.
     *
     * Valid examples are:
     * ```
     * 10
     * '10%'
     * '10, 10'
     * '10%, 10'
     * '10 + 10%'
     * '10 - 5vh + 3%'
     * '-10px + 5vh, 5px - 6%'
     * ```
     * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
     * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
     * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
     *
     * @memberof modifiers
     * @inner
     */
    offset: {
      /** @prop {number} order=200 - Index used to define the order of execution */
      order: 200,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: offset,

      /** @prop {Number|String} offset=0
       * The offset value as described in the modifier description
       */
      offset: 0
    },

    /**
     * Modifier used to prevent the popper from being positioned outside the boundary.
     *
     * A scenario exists where the reference itself is not within the boundaries.<br />
     * We can say it has "escaped the boundaries" — or just "escaped".<br />
     * In this case we need to decide whether the popper should either:
     *
     * - detach from the reference and remain "trapped" in the boundaries, or
     * - if it should ignore the boundary and "escape with its reference"
     *
     * When `escapeWithReference` is set to`true` and reference is completely
     * outside its boundaries, the popper will overflow (or completely leave)
     * the boundaries in order to remain attached to the edge of the reference.
     *
     * @memberof modifiers
     * @inner
     */
    preventOverflow: {
      /** @prop {number} order=300 - Index used to define the order of execution */
      order: 300,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: preventOverflow,

      /**
       * @prop {Array} [priority=['left','right','top','bottom']]
       * Popper will try to prevent overflow following these priorities by default,
       * then, it could overflow on the left and on top of the `boundariesElement`
       */
      priority: ['left', 'right', 'top', 'bottom'],

      /**
       * @prop {number} padding=5
       * Amount of pixel used to define a minimum distance between the boundaries
       * and the popper. This makes sure the popper always has a little padding
       * between the edges of its container
       */
      padding: 5,

      /**
       * @prop {String|HTMLElement} boundariesElement='scrollParent'
       * Boundaries used by the modifier. Can be `scrollParent`, `window`,
       * `viewport` or any DOM element.
       */
      boundariesElement: 'scrollParent'
    },

    /**
     * Modifier used to make sure the reference and its popper stay near each other
     * without leaving any gap between the two. Especially useful when the arrow is
     * enabled and you want to ensure that it points to its reference element.
     * It cares only about the first axis. You can still have poppers with margin
     * between the popper and its reference element.
     * @memberof modifiers
     * @inner
     */
    keepTogether: {
      /** @prop {number} order=400 - Index used to define the order of execution */
      order: 400,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: keepTogether
    },

    /**
     * This modifier is used to move the `arrowElement` of the popper to make
     * sure it is positioned between the reference element and its popper element.
     * It will read the outer size of the `arrowElement` node to detect how many
     * pixels of conjunction are needed.
     *
     * It has no effect if no `arrowElement` is provided.
     * @memberof modifiers
     * @inner
     */
    arrow: {
      /** @prop {number} order=500 - Index used to define the order of execution */
      order: 500,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: arrow,

      /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
      element: '[x-arrow]'
    },

    /**
     * Modifier used to flip the popper's placement when it starts to overlap its
     * reference element.
     *
     * Requires the `preventOverflow` modifier before it in order to work.
     *
     * **NOTE:** this modifier will interrupt the current update cycle and will
     * restart it if it detects the need to flip the placement.
     * @memberof modifiers
     * @inner
     */
    flip: {
      /** @prop {number} order=600 - Index used to define the order of execution */
      order: 600,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: flip,

      /**
       * @prop {String|Array} behavior='flip'
       * The behavior used to change the popper's placement. It can be one of
       * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
       * placements (with optional variations)
       */
      behavior: 'flip',

      /**
       * @prop {number} padding=5
       * The popper will flip if it hits the edges of the `boundariesElement`
       */
      padding: 5,

      /**
       * @prop {String|HTMLElement} boundariesElement='viewport'
       * The element which will define the boundaries of the popper position.
       * The popper will never be placed outside of the defined boundaries
       * (except if `keepTogether` is enabled)
       */
      boundariesElement: 'viewport',

      /**
       * @prop {Boolean} flipVariations=false
       * The popper will switch placement variation between `-start` and `-end` when
       * the reference element overlaps its boundaries.
       *
       * The original placement should have a set variation.
       */
      flipVariations: false,

      /**
       * @prop {Boolean} flipVariationsByContent=false
       * The popper will switch placement variation between `-start` and `-end` when
       * the popper element overlaps its reference boundaries.
       *
       * The original placement should have a set variation.
       */
      flipVariationsByContent: false
    },

    /**
     * Modifier used to make the popper flow toward the inner of the reference element.
     * By default, when this modifier is disabled, the popper will be placed outside
     * the reference element.
     * @memberof modifiers
     * @inner
     */
    inner: {
      /** @prop {number} order=700 - Index used to define the order of execution */
      order: 700,

      /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
      enabled: false,

      /** @prop {ModifierFn} */
      fn: inner
    },

    /**
     * Modifier used to hide the popper when its reference element is outside of the
     * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
     * be used to hide with a CSS selector the popper when its reference is
     * out of boundaries.
     *
     * Requires the `preventOverflow` modifier before it in order to work.
     * @memberof modifiers
     * @inner
     */
    hide: {
      /** @prop {number} order=800 - Index used to define the order of execution */
      order: 800,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: hide
    },

    /**
     * Computes the style that will be applied to the popper element to gets
     * properly positioned.
     *
     * Note that this modifier will not touch the DOM, it just prepares the styles
     * so that `applyStyle` modifier can apply it. This separation is useful
     * in case you need to replace `applyStyle` with a custom implementation.
     *
     * This modifier has `850` as `order` value to maintain backward compatibility
     * with previous versions of Popper.js. Expect the modifiers ordering method
     * to change in future major versions of the library.
     *
     * @memberof modifiers
     * @inner
     */
    computeStyle: {
      /** @prop {number} order=850 - Index used to define the order of execution */
      order: 850,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: computeStyle,

      /**
       * @prop {Boolean} gpuAcceleration=true
       * If true, it uses the CSS 3D transformation to position the popper.
       * Otherwise, it will use the `top` and `left` properties
       */
      gpuAcceleration: true,

      /**
       * @prop {string} [x='bottom']
       * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
       * Change this if your popper should grow in a direction different from `bottom`
       */
      x: 'bottom',

      /**
       * @prop {string} [x='left']
       * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
       * Change this if your popper should grow in a direction different from `right`
       */
      y: 'right'
    },

    /**
     * Applies the computed styles to the popper element.
     *
     * All the DOM manipulations are limited to this modifier. This is useful in case
     * you want to integrate Popper.js inside a framework or view library and you
     * want to delegate all the DOM manipulations to it.
     *
     * Note that if you disable this modifier, you must make sure the popper element
     * has its position set to `absolute` before Popper.js can do its work!
     *
     * Just disable this modifier and define your own to achieve the desired effect.
     *
     * @memberof modifiers
     * @inner
     */
    applyStyle: {
      /** @prop {number} order=900 - Index used to define the order of execution */
      order: 900,

      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,

      /** @prop {ModifierFn} */
      fn: applyStyle,

      /** @prop {Function} */
      onLoad: applyStyleOnLoad,

      /**
       * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
       * @prop {Boolean} gpuAcceleration=true
       * If true, it uses the CSS 3D transformation to position the popper.
       * Otherwise, it will use the `top` and `left` properties
       */
      gpuAcceleration: undefined
    }
  };
  /**
   * The `dataObject` is an object containing all the information used by Popper.js.
   * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
   * @name dataObject
   * @property {Object} data.instance The Popper.js instance
   * @property {String} data.placement Placement applied to popper
   * @property {String} data.originalPlacement Placement originally defined on init
   * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
   * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
   * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
   * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
   * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
   * @property {Object} data.boundaries Offsets of the popper boundaries
   * @property {Object} data.offsets The measurements of popper, reference and arrow elements
   * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
   * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
   * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
   */

  /**
   * Default options provided to Popper.js constructor.<br />
   * These can be overridden using the `options` argument of Popper.js.<br />
   * To override an option, simply pass an object with the same
   * structure of the `options` object, as the 3rd argument. For example:
   * ```
   * new Popper(ref, pop, {
   *   modifiers: {
   *     preventOverflow: { enabled: false }
   *   }
   * })
   * ```
   * @type {Object}
   * @static
   * @memberof Popper
   */

  var Defaults = {
    /**
     * Popper's placement.
     * @prop {Popper.placements} placement='bottom'
     */
    placement: 'bottom',

    /**
     * Set this to true if you want popper to position it self in 'fixed' mode
     * @prop {Boolean} positionFixed=false
     */
    positionFixed: false,

    /**
     * Whether events (resize, scroll) are initially enabled.
     * @prop {Boolean} eventsEnabled=true
     */
    eventsEnabled: true,

    /**
     * Set to true if you want to automatically remove the popper when
     * you call the `destroy` method.
     * @prop {Boolean} removeOnDestroy=false
     */
    removeOnDestroy: false,

    /**
     * Callback called when the popper is created.<br />
     * By default, it is set to no-op.<br />
     * Access Popper.js instance with `data.instance`.
     * @prop {onCreate}
     */
    onCreate: function onCreate() {},

    /**
     * Callback called when the popper is updated. This callback is not called
     * on the initialization/creation of the popper, but only on subsequent
     * updates.<br />
     * By default, it is set to no-op.<br />
     * Access Popper.js instance with `data.instance`.
     * @prop {onUpdate}
     */
    onUpdate: function onUpdate() {},

    /**
     * List of modifiers used to modify the offsets before they are applied to the popper.
     * They provide most of the functionalities of Popper.js.
     * @prop {modifiers}
     */
    modifiers: modifiers
  };
  /**
   * @callback onCreate
   * @param {dataObject} data
   */

  /**
   * @callback onUpdate
   * @param {dataObject} data
   */
  // Utils
  // Methods

  var Popper$1 = function () {
    /**
     * Creates a new Popper.js instance.
     * @class Popper
     * @param {Element|referenceObject} reference - The reference element used to position the popper
     * @param {Element} popper - The HTML / XML element used as the popper
     * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
     * @return {Object} instance - The generated Popper.js instance
     */
    function Popper(reference, popper) {
      var _this = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      classCallCheck(this, Popper);

      this.scheduleUpdate = function () {
        return requestAnimationFrame(_this.update);
      }; // make update() debounced, so that it only runs at most once-per-tick


      this.update = debounce(this.update.bind(this)); // with {} we create a new object with the options inside it

      this.options = _extends({}, Popper.Defaults, options); // init state

      this.state = {
        isDestroyed: false,
        isCreated: false,
        scrollParents: []
      }; // get reference and popper elements (allow jQuery wrappers)

      this.reference = reference && reference.jquery ? reference[0] : reference;
      this.popper = popper && popper.jquery ? popper[0] : popper; // Deep merge modifiers options

      this.options.modifiers = {};
      Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
        _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
      }); // Refactoring modifiers' list (Object => Array)

      this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
        return _extends({
          name: name
        }, _this.options.modifiers[name]);
      }) // sort the modifiers by order
      .sort(function (a, b) {
        return a.order - b.order;
      }); // modifiers have the ability to execute arbitrary code when Popper.js get inited
      // such code is executed in the same order of its modifier
      // they could add new properties to their options configuration
      // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

      this.modifiers.forEach(function (modifierOptions) {
        if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
        }
      }); // fire the first update to position the popper in the right place

      this.update();
      var eventsEnabled = this.options.eventsEnabled;

      if (eventsEnabled) {
        // setup event listeners, they will take care of update the position in specific situations
        this.enableEventListeners();
      }

      this.state.eventsEnabled = eventsEnabled;
    } // We can't use class properties because they don't get listed in the
    // class prototype and break stuff like Sinon stubs


    createClass(Popper, [{
      key: 'update',
      value: function update$$1() {
        return update.call(this);
      }
    }, {
      key: 'destroy',
      value: function destroy$$1() {
        return destroy.call(this);
      }
    }, {
      key: 'enableEventListeners',
      value: function enableEventListeners$$1() {
        return enableEventListeners.call(this);
      }
    }, {
      key: 'disableEventListeners',
      value: function disableEventListeners$$1() {
        return disableEventListeners.call(this);
      }
      /**
       * Schedules an update. It will run on the next UI update available.
       * @method scheduleUpdate
       * @memberof Popper
       */

      /**
       * Collection of utilities useful when writing custom modifiers.
       * Starting from version 1.7, this method is available only if you
       * include `popper-utils.js` before `popper.js`.
       *
       * **DEPRECATION**: This way to access PopperUtils is deprecated
       * and will be removed in v2! Use the PopperUtils module directly instead.
       * Due to the high instability of the methods contained in Utils, we can't
       * guarantee them to follow semver. Use them at your own risk!
       * @static
       * @private
       * @type {Object}
       * @deprecated since version 1.8
       * @member Utils
       * @memberof Popper
       */

    }]);
    return Popper;
  }();
  /**
   * The `referenceObject` is an object that provides an interface compatible with Popper.js
   * and lets you use it as replacement of a real DOM node.<br />
   * You can use this method to position a popper relatively to a set of coordinates
   * in case you don't have a DOM node to use as reference.
   *
   * ```
   * new Popper(referenceObject, popperNode);
   * ```
   *
   * NB: This feature isn't supported in Internet Explorer 10.
   * @name referenceObject
   * @property {Function} data.getBoundingClientRect
   * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
   * @property {number} data.clientWidth
   * An ES6 getter that will return the width of the virtual reference element.
   * @property {number} data.clientHeight
   * An ES6 getter that will return the height of the virtual reference element.
   */


  Popper$1.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
  Popper$1.placements = placements;
  Popper$1.Defaults = Defaults;

  window.Popper = Popper$1;

  var velocity = createCommonjsModule(function (module) {
    /*! VelocityJS.org (1.5.2). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License */

    /*************************
     Velocity jQuery Shim
     *************************/

    /*! VelocityJS.org jQuery Shim (1.0.1). (C) 2014 The jQuery Foundation. MIT @license: en.wikipedia.org/wiki/MIT_License. */

    /* This file contains the jQuery functions that Velocity relies on, thereby removing Velocity's dependency on a full copy of jQuery, and allowing it to work in any environment. */

    /* These shimmed functions are only used if jQuery isn't present. If both this shim and jQuery are loaded, Velocity defaults to jQuery proper. */

    /* Browser support: Using this shim instead of jQuery proper removes support for IE8. */
    (function (window) {
      /***************
       Setup
       ***************/

      /* If jQuery is already loaded, there's no point in loading this shim. */

      if (window.jQuery) {
        return;
      }
      /* jQuery base. */


      var $ = function $(selector, context) {
        return new $.fn.init(selector, context);
      };
      /********************
       Private Methods
       ********************/

      /* jQuery */


      $.isWindow = function (obj) {
        /* jshint eqeqeq: false */
        return obj && obj === obj.window;
      };
      /* jQuery */


      $.type = function (obj) {
        if (!obj) {
          return obj + "";
        }

        return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
      };
      /* jQuery */


      $.isArray = Array.isArray || function (obj) {
        return $.type(obj) === "array";
      };
      /* jQuery */


      function isArraylike(obj) {
        var length = obj.length,
            type = $.type(obj);

        if (type === "function" || $.isWindow(obj)) {
          return false;
        }

        if (obj.nodeType === 1 && length) {
          return true;
        }

        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
      }
      /***************
       $ Methods
       ***************/

      /* jQuery: Support removed for IE<9. */


      $.isPlainObject = function (obj) {
        var key;

        if (!obj || $.type(obj) !== "object" || obj.nodeType || $.isWindow(obj)) {
          return false;
        }

        try {
          if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
            return false;
          }
        } catch (e) {
          return false;
        }

        for (key in obj) {}

        return key === undefined || hasOwn.call(obj, key);
      };
      /* jQuery */


      $.each = function (obj, callback, args) {
        var value,
            i = 0,
            length = obj.length,
            isArray = isArraylike(obj);

        if (args) {
          if (isArray) {
            for (; i < length; i++) {
              value = callback.apply(obj[i], args);

              if (value === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (!obj.hasOwnProperty(i)) {
                continue;
              }

              value = callback.apply(obj[i], args);

              if (value === false) {
                break;
              }
            }
          }
        } else {
          if (isArray) {
            for (; i < length; i++) {
              value = callback.call(obj[i], i, obj[i]);

              if (value === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (!obj.hasOwnProperty(i)) {
                continue;
              }

              value = callback.call(obj[i], i, obj[i]);

              if (value === false) {
                break;
              }
            }
          }
        }

        return obj;
      };
      /* Custom */


      $.data = function (node, key, value) {
        /* $.getData() */
        if (value === undefined) {
          var getId = node[$.expando],
              store = getId && cache[getId];

          if (key === undefined) {
            return store;
          } else if (store) {
            if (key in store) {
              return store[key];
            }
          }
          /* $.setData() */

        } else if (key !== undefined) {
          var setId = node[$.expando] || (node[$.expando] = ++$.uuid);
          cache[setId] = cache[setId] || {};
          cache[setId][key] = value;
          return value;
        }
      };
      /* Custom */


      $.removeData = function (node, keys) {
        var id = node[$.expando],
            store = id && cache[id];

        if (store) {
          // Cleanup the entire store if no keys are provided.
          if (!keys) {
            delete cache[id];
          } else {
            $.each(keys, function (_, key) {
              delete store[key];
            });
          }
        }
      };
      /* jQuery */


      $.extend = function () {
        var src,
            copyIsArray,
            copy,
            name,
            options,
            clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        if (typeof target === "boolean") {
          deep = target;
          target = arguments[i] || {};
          i++;
        }

        if (_typeof(target) !== "object" && $.type(target) !== "function") {
          target = {};
        }

        if (i === length) {
          target = this;
          i--;
        }

        for (; i < length; i++) {
          if (options = arguments[i]) {
            for (name in options) {
              if (!options.hasOwnProperty(name)) {
                continue;
              }

              src = target[name];
              copy = options[name];

              if (target === copy) {
                continue;
              }

              if (deep && copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && $.isArray(src) ? src : [];
                } else {
                  clone = src && $.isPlainObject(src) ? src : {};
                }

                target[name] = $.extend(deep, clone, copy);
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        }

        return target;
      };
      /* jQuery 1.4.3 */


      $.queue = function (elem, type, data) {
        function $makeArray(arr, results) {
          var ret = results || [];

          if (arr) {
            if (isArraylike(Object(arr))) {
              /* $.merge */
              (function (first, second) {
                var len = +second.length,
                    j = 0,
                    i = first.length;

                while (j < len) {
                  first[i++] = second[j++];
                }

                if (len !== len) {
                  while (second[j] !== undefined) {
                    first[i++] = second[j++];
                  }
                }

                first.length = i;
                return first;
              })(ret, typeof arr === "string" ? [arr] : arr);
            } else {
              [].push.call(ret, arr);
            }
          }

          return ret;
        }

        if (!elem) {
          return;
        }

        type = (type || "fx") + "queue";
        var q = $.data(elem, type);

        if (!data) {
          return q || [];
        }

        if (!q || $.isArray(data)) {
          q = $.data(elem, type, $makeArray(data));
        } else {
          q.push(data);
        }

        return q;
      };
      /* jQuery 1.4.3 */


      $.dequeue = function (elems, type) {
        /* Custom: Embed element iteration. */
        $.each(elems.nodeType ? [elems] : elems, function (i, elem) {
          type = type || "fx";
          var queue = $.queue(elem, type),
              fn = queue.shift();

          if (fn === "inprogress") {
            fn = queue.shift();
          }

          if (fn) {
            if (type === "fx") {
              queue.unshift("inprogress");
            }

            fn.call(elem, function () {
              $.dequeue(elem, type);
            });
          }
        });
      };
      /******************
       $.fn Methods
       ******************/

      /* jQuery */


      $.fn = $.prototype = {
        init: function init(selector) {
          /* Just return the element wrapped inside an array; don't proceed with the actual jQuery node wrapping process. */
          if (selector.nodeType) {
            this[0] = selector;
            return this;
          } else {
            throw new Error("Not a DOM node.");
          }
        },
        offset: function offset() {
          /* jQuery altered code: Dropped disconnected DOM node checking. */
          var box = this[0].getBoundingClientRect ? this[0].getBoundingClientRect() : {
            top: 0,
            left: 0
          };
          return {
            top: box.top + (window.pageYOffset || document.scrollTop || 0) - (document.clientTop || 0),
            left: box.left + (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || 0)
          };
        },
        position: function position() {
          /* jQuery */
          function offsetParentFn(elem) {
            var offsetParent = elem.offsetParent;

            while (offsetParent && offsetParent.nodeName.toLowerCase() !== "html" && offsetParent.style && offsetParent.style.position.toLowerCase() === "static") {
              offsetParent = offsetParent.offsetParent;
            }

            return offsetParent || document;
          }
          /* Zepto */


          var elem = this[0],
              offsetParent = offsetParentFn(elem),
              offset = this.offset(),
              parentOffset = /^(?:body|html)$/i.test(offsetParent.nodeName) ? {
            top: 0,
            left: 0
          } : $(offsetParent).offset();
          offset.top -= parseFloat(elem.style.marginTop) || 0;
          offset.left -= parseFloat(elem.style.marginLeft) || 0;

          if (offsetParent.style) {
            parentOffset.top += parseFloat(offsetParent.style.borderTopWidth) || 0;
            parentOffset.left += parseFloat(offsetParent.style.borderLeftWidth) || 0;
          }

          return {
            top: offset.top - parentOffset.top,
            left: offset.left - parentOffset.left
          };
        }
      };
      /**********************
       Private Variables
       **********************/

      /* For $.data() */

      var cache = {};
      $.expando = "velocity" + new Date().getTime();
      $.uuid = 0;
      /* For $.queue() */

      var class2type = {},
          hasOwn = class2type.hasOwnProperty,
          toString = class2type.toString;
      var types = "Boolean Number String Function Array Date RegExp Object Error".split(" ");

      for (var i = 0; i < types.length; i++) {
        class2type["[object " + types[i] + "]"] = types[i].toLowerCase();
      }
      /* Makes $(node) possible, without having to call init. */


      $.fn.init.prototype = $.fn;
      /* Globalize Velocity onto the window, and assign its Utilities property. */

      window.Velocity = {
        Utilities: $
      };
    })(window);
    /******************
     Velocity.js
     ******************/


    (function (factory) {
      /* CommonJS module. */

      {
        module.exports = factory();
        /* AMD module. */
      }
    })(function () {

      return function (global, window, document, undefined$1) {
        /***************
         Summary
         ***************/

        /*
         - CSS: CSS stack that works independently from the rest of Velocity.
         - animate(): Core animation method that iterates over the targeted elements and queues the incoming call onto each element individually.
         - Pre-Queueing: Prepare the element for animation by instantiating its data cache and processing the call's options.
         - Queueing: The logic that runs once the call has reached its point of execution in the element's $.queue() stack.
         Most logic is placed here to avoid risking it becoming stale (if the element's properties have changed).
         - Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
         - tick(): The single requestAnimationFrame loop responsible for tweening all in-progress calls.
         - completeCall(): Handles the cleanup process for each Velocity call.
         */

        /*********************
         Helper Functions
         *********************/

        /* IE detection. Gist: https://gist.github.com/julianshapiro/9098609 */
        var IE = function () {
          if (document.documentMode) {
            return document.documentMode;
          } else {
            for (var i = 7; i > 4; i--) {
              var div = document.createElement("div");
              div.innerHTML = "<!--[if IE " + i + "]><span></span><![endif]-->";

              if (div.getElementsByTagName("span").length) {
                div = null;
                return i;
              }
            }
          }

          return undefined$1;
        }();
        /* rAF shim. Gist: https://gist.github.com/julianshapiro/9497513 */


        var rAFShim = function () {
          var timeLast = 0;
          return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
            var timeCurrent = new Date().getTime(),
                timeDelta;
            /* Dynamically set delay on a per-tick basis to match 60fps. */

            /* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */

            timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));
            timeLast = timeCurrent + timeDelta;
            return setTimeout(function () {
              callback(timeCurrent + timeDelta);
            }, timeDelta);
          };
        }();

        var performance = function () {
          var perf = window.performance || {};

          if (typeof perf.now !== "function") {
            var nowOffset = perf.timing && perf.timing.navigationStart ? perf.timing.navigationStart : new Date().getTime();

            perf.now = function () {
              return new Date().getTime() - nowOffset;
            };
          }

          return perf;
        }();
        /* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */


        function compactSparseArray(array) {
          var index = -1,
              length = array ? array.length : 0,
              result = [];

          while (++index < length) {
            var value = array[index];

            if (value) {
              result.push(value);
            }
          }

          return result;
        }
        /**
         * Shim for "fixing" IE's lack of support (IE < 9) for applying slice
         * on host objects like NamedNodeMap, NodeList, and HTMLCollection
         * (technically, since host objects have been implementation-dependent,
         * at least before ES2015, IE hasn't needed to work this way).
         * Also works on strings, fixes IE < 9 to allow an explicit undefined
         * for the 2nd argument (as in Firefox), and prevents errors when
         * called on other DOM objects.
         */


        var _slice = function () {
          var slice = Array.prototype.slice;

          try {
            // Can't be used with DOM elements in IE < 9
            slice.call(document.documentElement);
            return slice;
          } catch (e) {
            // Fails in IE < 9
            // This will work for genuine arrays, array-like objects, 
            // NamedNodeMap (attributes, entities, notations),
            // NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),
            // and will not fail on other DOM objects (as do DOM elements in IE < 9)
            return function (begin, end) {
              var len = this.length;

              if (typeof begin !== "number") {
                begin = 0;
              } // IE < 9 gets unhappy with an undefined end argument


              if (typeof end !== "number") {
                end = len;
              } // For native Array objects, we use the native slice function


              if (this.slice) {
                return slice.call(this, begin, end);
              } // For array like object we handle it ourselves.


              var i,
                  cloned = [],
                  // Handle negative value for "begin"
              start = begin >= 0 ? begin : Math.max(0, len + begin),
                  // Handle negative value for "end"
              upTo = end < 0 ? len + end : Math.min(end, len),
                  // Actual expected size of the slice
              size = upTo - start;

              if (size > 0) {
                cloned = new Array(size);

                if (this.charAt) {
                  for (i = 0; i < size; i++) {
                    cloned[i] = this.charAt(start + i);
                  }
                } else {
                  for (i = 0; i < size; i++) {
                    cloned[i] = this[start + i];
                  }
                }
              }

              return cloned;
            };
          }
        }();
        /* .indexOf doesn't exist in IE<9 */


        var _inArray = function _inArray() {
          if (Array.prototype.includes) {
            return function (arr, val) {
              return arr.includes(val);
            };
          }

          if (Array.prototype.indexOf) {
            return function (arr, val) {
              return arr.indexOf(val) >= 0;
            };
          }

          return function (arr, val) {
            for (var i = 0; i < arr.length; i++) {
              if (arr[i] === val) {
                return true;
              }
            }

            return false;
          };
        };

        function sanitizeElements(elements) {
          /* Unwrap jQuery/Zepto objects. */
          if (Type.isWrapped(elements)) {
            elements = _slice.call(elements);
            /* Wrap a single element in an array so that $.each() can iterate with the element instead of its node's children. */
          } else if (Type.isNode(elements)) {
            elements = [elements];
          }

          return elements;
        }

        var Type = {
          isNumber: function isNumber(variable) {
            return typeof variable === "number";
          },
          isString: function isString(variable) {
            return typeof variable === "string";
          },
          isArray: Array.isArray || function (variable) {
            return Object.prototype.toString.call(variable) === "[object Array]";
          },
          isFunction: function isFunction(variable) {
            return Object.prototype.toString.call(variable) === "[object Function]";
          },
          isNode: function isNode(variable) {
            return variable && variable.nodeType;
          },

          /* Determine if variable is an array-like wrapped jQuery, Zepto or similar element, or even a NodeList etc. */

          /* NOTE: HTMLFormElements also have a length. */
          isWrapped: function isWrapped(variable) {
            return variable && variable !== window && Type.isNumber(variable.length) && !Type.isString(variable) && !Type.isFunction(variable) && !Type.isNode(variable) && (variable.length === 0 || Type.isNode(variable[0]));
          },
          isSVG: function isSVG(variable) {
            return window.SVGElement && variable instanceof window.SVGElement;
          },
          isEmptyObject: function isEmptyObject(variable) {
            for (var name in variable) {
              if (variable.hasOwnProperty(name)) {
                return false;
              }
            }

            return true;
          }
        };
        /*****************
         Dependencies
         *****************/

        var $,
            isJQuery = false;

        if (global.fn && global.fn.jquery) {
          $ = global;
          isJQuery = true;
        } else {
          $ = window.Velocity.Utilities;
        }

        if (IE <= 8 && !isJQuery) {
          throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");
        } else if (IE <= 7) {
          /* Revert to jQuery's $.animate(), and lose Velocity's extra features. */
          jQuery.fn.velocity = jQuery.fn.animate;
          /* Now that $.fn.velocity is aliased, abort this Velocity declaration. */

          return;
        }
        /*****************
         Constants
         *****************/


        var DURATION_DEFAULT = 400,
            EASING_DEFAULT = "swing";
        /*************
         State
         *************/

        var Velocity = {
          /* Container for page-wide Velocity state data. */
          State: {
            /* Detect mobile devices to determine if mobileHA should be turned on. */
            isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent),

            /* The mobileHA option's behavior changes on older Android devices (Gingerbread, versions 2.3.3-2.3.7). */
            isAndroid: /Android/i.test(window.navigator.userAgent),
            isGingerbread: /Android 2\.3\.[3-7]/i.test(window.navigator.userAgent),
            isChrome: window.chrome,
            isFirefox: /Firefox/i.test(window.navigator.userAgent),

            /* Create a cached element for re-use when checking for CSS property prefixes. */
            prefixElement: document.createElement("div"),

            /* Cache every prefix match to avoid repeating lookups. */
            prefixMatches: {},

            /* Cache the anchor used for animating window scrolling. */
            scrollAnchor: null,

            /* Cache the browser-specific property names associated with the scroll anchor. */
            scrollPropertyLeft: null,
            scrollPropertyTop: null,

            /* Keep track of whether our RAF tick is running. */
            isTicking: false,

            /* Container for every in-progress call to Velocity. */
            calls: [],
            delayedElements: {
              count: 0
            }
          },

          /* Velocity's custom CSS stack. Made global for unit testing. */
          CSS: {
            /* Defined below. */
          },

          /* A shim of the jQuery utility functions used by Velocity -- provided by Velocity's optional jQuery shim. */
          Utilities: $,

          /* Container for the user's custom animation redirects that are referenced by name in place of the properties map argument. */
          Redirects: {
            /* Manually registered by the user. */
          },
          Easings: {
            /* Defined below. */
          },

          /* Attempt to use ES6 Promises by default. Users can override this with a third-party promises library. */
          Promise: window.Promise,

          /* Velocity option defaults, which can be overriden by the user. */
          defaults: {
            queue: "",
            duration: DURATION_DEFAULT,
            easing: EASING_DEFAULT,
            begin: undefined$1,
            complete: undefined$1,
            progress: undefined$1,
            display: undefined$1,
            visibility: undefined$1,
            loop: false,
            delay: false,
            mobileHA: true,

            /* Advanced: Set to false to prevent property values from being cached between consecutive Velocity-initiated chain calls. */
            _cacheValues: true,

            /* Advanced: Set to false if the promise should always resolve on empty element lists. */
            promiseRejectEmpty: true
          },

          /* A design goal of Velocity is to cache data wherever possible in order to avoid DOM requerying. Accordingly, each element has a data cache. */
          init: function init(element) {
            $.data(element, "velocity", {
              /* Store whether this is an SVG element, since its properties are retrieved and updated differently than standard HTML elements. */
              isSVG: Type.isSVG(element),

              /* Keep track of whether the element is currently being animated by Velocity.
               This is used to ensure that property values are not transferred between non-consecutive (stale) calls. */
              isAnimating: false,

              /* A reference to the element's live computedStyle object. Learn more here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
              computedStyle: null,

              /* Tween data is cached for each animation on the element so that data can be passed across calls --
               in particular, end values are used as subsequent start values in consecutive Velocity calls. */
              tweensContainer: null,

              /* The full root property values of each CSS hook being animated on this element are cached so that:
               1) Concurrently-animating hooks sharing the same root can have their root values' merged into one while tweening.
               2) Post-hook-injection root values can be transferred over to consecutively chained Velocity calls as starting root values. */
              rootPropertyValueCache: {},

              /* A cache for transform updates, which must be manually flushed via CSS.flushTransformCache(). */
              transformCache: {}
            });
          },

          /* A parallel to jQuery's $.css(), used for getting/setting Velocity's hooked CSS properties. */
          hook: null,

          /* Defined below. */

          /* Velocity-wide animation time remapping for testing purposes. */
          mock: false,
          version: {
            major: 1,
            minor: 5,
            patch: 2
          },

          /* Set to 1 or 2 (most verbose) to output debug info to console. */
          debug: false,

          /* Use rAF high resolution timestamp when available */
          timestamp: true,

          /* Pause all animations */
          pauseAll: function pauseAll(queueName) {
            var currentTime = new Date().getTime();
            $.each(Velocity.State.calls, function (i, activeCall) {
              if (activeCall) {
                /* If we have a queueName and this call is not on that queue, skip */
                if (queueName !== undefined$1 && (activeCall[2].queue !== queueName || activeCall[2].queue === false)) {
                  return true;
                }
                /* Set call to paused */


                activeCall[5] = {
                  resume: false
                };
              }
            });
            /* Pause timers on any currently delayed calls */

            $.each(Velocity.State.delayedElements, function (k, element) {
              if (!element) {
                return;
              }

              pauseDelayOnElement(element, currentTime);
            });
          },

          /* Resume all animations */
          resumeAll: function resumeAll(queueName) {
            var currentTime = new Date().getTime();
            $.each(Velocity.State.calls, function (i, activeCall) {
              if (activeCall) {
                /* If we have a queueName and this call is not on that queue, skip */
                if (queueName !== undefined$1 && (activeCall[2].queue !== queueName || activeCall[2].queue === false)) {
                  return true;
                }
                /* Set call to resumed if it was paused */


                if (activeCall[5]) {
                  activeCall[5].resume = true;
                }
              }
            });
            /* Resume timers on any currently delayed calls */

            $.each(Velocity.State.delayedElements, function (k, element) {
              if (!element) {
                return;
              }

              resumeDelayOnElement(element);
            });
          }
        };
        /* Retrieve the appropriate scroll anchor and property name for the browser: https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY */

        if (window.pageYOffset !== undefined$1) {
          Velocity.State.scrollAnchor = window;
          Velocity.State.scrollPropertyLeft = "pageXOffset";
          Velocity.State.scrollPropertyTop = "pageYOffset";
        } else {
          Velocity.State.scrollAnchor = document.documentElement || document.body.parentNode || document.body;
          Velocity.State.scrollPropertyLeft = "scrollLeft";
          Velocity.State.scrollPropertyTop = "scrollTop";
        }
        /* Shorthand alias for jQuery's $.data() utility. */


        function Data(element) {
          /* Hardcode a reference to the plugin name. */
          var response = $.data(element, "velocity");
          /* jQuery <=1.4.2 returns null instead of undefined when no match is found. We normalize this behavior. */

          return response === null ? undefined$1 : response;
        }
        /**************
         Delay Timer
         **************/


        function pauseDelayOnElement(element, currentTime) {
          /* Check for any delay timers, and pause the set timeouts (while preserving time data)
           to be resumed when the "resume" command is issued */
          var data = Data(element);

          if (data && data.delayTimer && !data.delayPaused) {
            data.delayRemaining = data.delay - currentTime + data.delayBegin;
            data.delayPaused = true;
            clearTimeout(data.delayTimer.setTimeout);
          }
        }

        function resumeDelayOnElement(element, currentTime) {
          /* Check for any paused timers and resume */
          var data = Data(element);

          if (data && data.delayTimer && data.delayPaused) {
            /* If the element was mid-delay, re initiate the timeout with the remaining delay */
            data.delayPaused = false;
            data.delayTimer.setTimeout = setTimeout(data.delayTimer.next, data.delayRemaining);
          }
        }
        /**************
         Easing
         **************/

        /* Step easing generator. */


        function generateStep(steps) {
          return function (p) {
            return Math.round(p * steps) * (1 / steps);
          };
        }
        /* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */


        function generateBezier(mX1, mY1, mX2, mY2) {
          var NEWTON_ITERATIONS = 4,
              NEWTON_MIN_SLOPE = 0.001,
              SUBDIVISION_PRECISION = 0.0000001,
              SUBDIVISION_MAX_ITERATIONS = 10,
              kSplineTableSize = 11,
              kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
              float32ArraySupported = ("Float32Array" in window);
          /* Must contain four arguments. */

          if (arguments.length !== 4) {
            return false;
          }
          /* Arguments must be numbers. */


          for (var i = 0; i < 4; ++i) {
            if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
              return false;
            }
          }
          /* X values must be in the [0, 1] range. */


          mX1 = Math.min(mX1, 1);
          mX2 = Math.min(mX2, 1);
          mX1 = Math.max(mX1, 0);
          mX2 = Math.max(mX2, 0);
          var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

          function A(aA1, aA2) {
            return 1.0 - 3.0 * aA2 + 3.0 * aA1;
          }

          function B(aA1, aA2) {
            return 3.0 * aA2 - 6.0 * aA1;
          }

          function C(aA1) {
            return 3.0 * aA1;
          }

          function calcBezier(aT, aA1, aA2) {
            return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
          }

          function getSlope(aT, aA1, aA2) {
            return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
          }

          function newtonRaphsonIterate(aX, aGuessT) {
            for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
              var currentSlope = getSlope(aGuessT, mX1, mX2);

              if (currentSlope === 0.0) {
                return aGuessT;
              }

              var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
              aGuessT -= currentX / currentSlope;
            }

            return aGuessT;
          }

          function calcSampleValues() {
            for (var i = 0; i < kSplineTableSize; ++i) {
              mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
            }
          }

          function binarySubdivide(aX, aA, aB) {
            var currentX,
                currentT,
                i = 0;

            do {
              currentT = aA + (aB - aA) / 2.0;
              currentX = calcBezier(currentT, mX1, mX2) - aX;

              if (currentX > 0.0) {
                aB = currentT;
              } else {
                aA = currentT;
              }
            } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

            return currentT;
          }

          function getTForX(aX) {
            var intervalStart = 0.0,
                currentSample = 1,
                lastSample = kSplineTableSize - 1;

            for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
              intervalStart += kSampleStepSize;
            }

            --currentSample;
            var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
                guessForT = intervalStart + dist * kSampleStepSize,
                initialSlope = getSlope(guessForT, mX1, mX2);

            if (initialSlope >= NEWTON_MIN_SLOPE) {
              return newtonRaphsonIterate(aX, guessForT);
            } else if (initialSlope === 0.0) {
              return guessForT;
            } else {
              return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
            }
          }

          var _precomputed = false;

          function precompute() {
            _precomputed = true;

            if (mX1 !== mY1 || mX2 !== mY2) {
              calcSampleValues();
            }
          }

          var f = function f(aX) {
            if (!_precomputed) {
              precompute();
            }

            if (mX1 === mY1 && mX2 === mY2) {
              return aX;
            }

            if (aX === 0) {
              return 0;
            }

            if (aX === 1) {
              return 1;
            }

            return calcBezier(getTForX(aX), mY1, mY2);
          };

          f.getControlPoints = function () {
            return [{
              x: mX1,
              y: mY1
            }, {
              x: mX2,
              y: mY2
            }];
          };

          var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";

          f.toString = function () {
            return str;
          };

          return f;
        }
        /* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */

        /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
         then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */


        var generateSpringRK4 = function () {
          function springAccelerationForState(state) {
            return -state.tension * state.x - state.friction * state.v;
          }

          function springEvaluateStateWithDerivative(initialState, dt, derivative) {
            var state = {
              x: initialState.x + derivative.dx * dt,
              v: initialState.v + derivative.dv * dt,
              tension: initialState.tension,
              friction: initialState.friction
            };
            return {
              dx: state.v,
              dv: springAccelerationForState(state)
            };
          }

          function springIntegrateState(state, dt) {
            var a = {
              dx: state.v,
              dv: springAccelerationForState(state)
            },
                b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
                c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
                d = springEvaluateStateWithDerivative(state, dt, c),
                dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
                dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
            state.x = state.x + dxdt * dt;
            state.v = state.v + dvdt * dt;
            return state;
          }

          return function springRK4Factory(tension, friction, duration) {
            var initState = {
              x: -1,
              v: 0,
              tension: null,
              friction: null
            },
                path = [0],
                time_lapsed = 0,
                tolerance = 1 / 10000,
                DT = 16 / 1000,
                have_duration,
                dt,
                last_state;
            tension = parseFloat(tension) || 500;
            friction = parseFloat(friction) || 20;
            duration = duration || null;
            initState.tension = tension;
            initState.friction = friction;
            have_duration = duration !== null;
            /* Calculate the actual time it takes for this animation to complete with the provided conditions. */

            if (have_duration) {
              /* Run the simulation without a duration. */
              time_lapsed = springRK4Factory(tension, friction);
              /* Compute the adjusted time delta. */

              dt = time_lapsed / duration * DT;
            } else {
              dt = DT;
            }

            while (true) {
              /* Next/step function .*/
              last_state = springIntegrateState(last_state || initState, dt);
              /* Store the position. */

              path.push(1 + last_state.x);
              time_lapsed += 16;
              /* If the change threshold is reached, break. */

              if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
                break;
              }
            }
            /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
             computed path and returns a snapshot of the position according to a given percentComplete. */


            return !have_duration ? time_lapsed : function (percentComplete) {
              return path[percentComplete * (path.length - 1) | 0];
            };
          };
        }();
        /* jQuery easings. */


        Velocity.Easings = {
          linear: function linear(p) {
            return p;
          },
          swing: function swing(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          },

          /* Bonus "spring" easing, which is a less exaggerated version of easeInOutElastic. */
          spring: function spring(p) {
            return 1 - Math.cos(p * 4.5 * Math.PI) * Math.exp(-p * 6);
          }
        };
        /* CSS3 and Robert Penner easings. */

        $.each([["ease", [0.25, 0.1, 0.25, 1.0]], ["ease-in", [0.42, 0.0, 1.00, 1.0]], ["ease-out", [0.00, 0.0, 0.58, 1.0]], ["ease-in-out", [0.42, 0.0, 0.58, 1.0]], ["easeInSine", [0.47, 0, 0.745, 0.715]], ["easeOutSine", [0.39, 0.575, 0.565, 1]], ["easeInOutSine", [0.445, 0.05, 0.55, 0.95]], ["easeInQuad", [0.55, 0.085, 0.68, 0.53]], ["easeOutQuad", [0.25, 0.46, 0.45, 0.94]], ["easeInOutQuad", [0.455, 0.03, 0.515, 0.955]], ["easeInCubic", [0.55, 0.055, 0.675, 0.19]], ["easeOutCubic", [0.215, 0.61, 0.355, 1]], ["easeInOutCubic", [0.645, 0.045, 0.355, 1]], ["easeInQuart", [0.895, 0.03, 0.685, 0.22]], ["easeOutQuart", [0.165, 0.84, 0.44, 1]], ["easeInOutQuart", [0.77, 0, 0.175, 1]], ["easeInQuint", [0.755, 0.05, 0.855, 0.06]], ["easeOutQuint", [0.23, 1, 0.32, 1]], ["easeInOutQuint", [0.86, 0, 0.07, 1]], ["easeInExpo", [0.95, 0.05, 0.795, 0.035]], ["easeOutExpo", [0.19, 1, 0.22, 1]], ["easeInOutExpo", [1, 0, 0, 1]], ["easeInCirc", [0.6, 0.04, 0.98, 0.335]], ["easeOutCirc", [0.075, 0.82, 0.165, 1]], ["easeInOutCirc", [0.785, 0.135, 0.15, 0.86]]], function (i, easingArray) {
          Velocity.Easings[easingArray[0]] = generateBezier.apply(null, easingArray[1]);
        });
        /* Determine the appropriate easing type given an easing input. */

        function getEasing(value, duration) {
          var easing = value;
          /* The easing option can either be a string that references a pre-registered easing,
           or it can be a two-/four-item array of integers to be converted into a bezier/spring function. */

          if (Type.isString(value)) {
            /* Ensure that the easing has been assigned to jQuery's Velocity.Easings object. */
            if (!Velocity.Easings[value]) {
              easing = false;
            }
          } else if (Type.isArray(value) && value.length === 1) {
            easing = generateStep.apply(null, value);
          } else if (Type.isArray(value) && value.length === 2) {
            /* springRK4 must be passed the animation's duration. */

            /* Note: If the springRK4 array contains non-numbers, generateSpringRK4() returns an easing
             function generated with default tension and friction values. */
            easing = generateSpringRK4.apply(null, value.concat([duration]));
          } else if (Type.isArray(value) && value.length === 4) {
            /* Note: If the bezier array contains non-numbers, generateBezier() returns false. */
            easing = generateBezier.apply(null, value);
          } else {
            easing = false;
          }
          /* Revert to the Velocity-wide default easing type, or fall back to "swing" (which is also jQuery's default)
           if the Velocity-wide default has been incorrectly modified. */


          if (easing === false) {
            if (Velocity.Easings[Velocity.defaults.easing]) {
              easing = Velocity.defaults.easing;
            } else {
              easing = EASING_DEFAULT;
            }
          }

          return easing;
        }
        /*****************
         CSS Stack
         *****************/

        /* The CSS object is a highly condensed and performant CSS stack that fully replaces jQuery's.
         It handles the validation, getting, and setting of both standard CSS properties and CSS property hooks. */

        /* Note: A "CSS" shorthand is aliased so that our code is easier to read. */


        var CSS = Velocity.CSS = {
          /*************
           RegEx
           *************/
          RegEx: {
            isHex: /^#([A-f\d]{3}){1,2}$/i,

            /* Unwrap a property value's surrounding text, e.g. "rgba(4, 3, 2, 1)" ==> "4, 3, 2, 1" and "rect(4px 3px 2px 1px)" ==> "4px 3px 2px 1px". */
            valueUnwrap: /^[A-z]+\((.*)\)$/i,
            wrappedValueAlreadyExtracted: /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,

            /* Split a multi-value property into an array of subvalues, e.g. "rgba(4, 3, 2, 1) 4px 3px 2px 1px" ==> [ "rgba(4, 3, 2, 1)", "4px", "3px", "2px", "1px" ]. */
            valueSplit: /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/ig
          },

          /************
           Lists
           ************/
          Lists: {
            colors: ["fill", "stroke", "stopColor", "color", "backgroundColor", "borderColor", "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor", "outlineColor"],
            transformsBase: ["translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ"],
            transforms3D: ["transformPerspective", "translateZ", "scaleZ", "rotateX", "rotateY"],
            units: ["%", // relative
            "em", "ex", "ch", "rem", // font relative
            "vw", "vh", "vmin", "vmax", // viewport relative
            "cm", "mm", "Q", "in", "pc", "pt", "px", // absolute lengths
            "deg", "grad", "rad", "turn", // angles
            "s", "ms" // time
            ],
            colorNames: {
              "aliceblue": "240,248,255",
              "antiquewhite": "250,235,215",
              "aquamarine": "127,255,212",
              "aqua": "0,255,255",
              "azure": "240,255,255",
              "beige": "245,245,220",
              "bisque": "255,228,196",
              "black": "0,0,0",
              "blanchedalmond": "255,235,205",
              "blueviolet": "138,43,226",
              "blue": "0,0,255",
              "brown": "165,42,42",
              "burlywood": "222,184,135",
              "cadetblue": "95,158,160",
              "chartreuse": "127,255,0",
              "chocolate": "210,105,30",
              "coral": "255,127,80",
              "cornflowerblue": "100,149,237",
              "cornsilk": "255,248,220",
              "crimson": "220,20,60",
              "cyan": "0,255,255",
              "darkblue": "0,0,139",
              "darkcyan": "0,139,139",
              "darkgoldenrod": "184,134,11",
              "darkgray": "169,169,169",
              "darkgrey": "169,169,169",
              "darkgreen": "0,100,0",
              "darkkhaki": "189,183,107",
              "darkmagenta": "139,0,139",
              "darkolivegreen": "85,107,47",
              "darkorange": "255,140,0",
              "darkorchid": "153,50,204",
              "darkred": "139,0,0",
              "darksalmon": "233,150,122",
              "darkseagreen": "143,188,143",
              "darkslateblue": "72,61,139",
              "darkslategray": "47,79,79",
              "darkturquoise": "0,206,209",
              "darkviolet": "148,0,211",
              "deeppink": "255,20,147",
              "deepskyblue": "0,191,255",
              "dimgray": "105,105,105",
              "dimgrey": "105,105,105",
              "dodgerblue": "30,144,255",
              "firebrick": "178,34,34",
              "floralwhite": "255,250,240",
              "forestgreen": "34,139,34",
              "fuchsia": "255,0,255",
              "gainsboro": "220,220,220",
              "ghostwhite": "248,248,255",
              "gold": "255,215,0",
              "goldenrod": "218,165,32",
              "gray": "128,128,128",
              "grey": "128,128,128",
              "greenyellow": "173,255,47",
              "green": "0,128,0",
              "honeydew": "240,255,240",
              "hotpink": "255,105,180",
              "indianred": "205,92,92",
              "indigo": "75,0,130",
              "ivory": "255,255,240",
              "khaki": "240,230,140",
              "lavenderblush": "255,240,245",
              "lavender": "230,230,250",
              "lawngreen": "124,252,0",
              "lemonchiffon": "255,250,205",
              "lightblue": "173,216,230",
              "lightcoral": "240,128,128",
              "lightcyan": "224,255,255",
              "lightgoldenrodyellow": "250,250,210",
              "lightgray": "211,211,211",
              "lightgrey": "211,211,211",
              "lightgreen": "144,238,144",
              "lightpink": "255,182,193",
              "lightsalmon": "255,160,122",
              "lightseagreen": "32,178,170",
              "lightskyblue": "135,206,250",
              "lightslategray": "119,136,153",
              "lightsteelblue": "176,196,222",
              "lightyellow": "255,255,224",
              "limegreen": "50,205,50",
              "lime": "0,255,0",
              "linen": "250,240,230",
              "magenta": "255,0,255",
              "maroon": "128,0,0",
              "mediumaquamarine": "102,205,170",
              "mediumblue": "0,0,205",
              "mediumorchid": "186,85,211",
              "mediumpurple": "147,112,219",
              "mediumseagreen": "60,179,113",
              "mediumslateblue": "123,104,238",
              "mediumspringgreen": "0,250,154",
              "mediumturquoise": "72,209,204",
              "mediumvioletred": "199,21,133",
              "midnightblue": "25,25,112",
              "mintcream": "245,255,250",
              "mistyrose": "255,228,225",
              "moccasin": "255,228,181",
              "navajowhite": "255,222,173",
              "navy": "0,0,128",
              "oldlace": "253,245,230",
              "olivedrab": "107,142,35",
              "olive": "128,128,0",
              "orangered": "255,69,0",
              "orange": "255,165,0",
              "orchid": "218,112,214",
              "palegoldenrod": "238,232,170",
              "palegreen": "152,251,152",
              "paleturquoise": "175,238,238",
              "palevioletred": "219,112,147",
              "papayawhip": "255,239,213",
              "peachpuff": "255,218,185",
              "peru": "205,133,63",
              "pink": "255,192,203",
              "plum": "221,160,221",
              "powderblue": "176,224,230",
              "purple": "128,0,128",
              "red": "255,0,0",
              "rosybrown": "188,143,143",
              "royalblue": "65,105,225",
              "saddlebrown": "139,69,19",
              "salmon": "250,128,114",
              "sandybrown": "244,164,96",
              "seagreen": "46,139,87",
              "seashell": "255,245,238",
              "sienna": "160,82,45",
              "silver": "192,192,192",
              "skyblue": "135,206,235",
              "slateblue": "106,90,205",
              "slategray": "112,128,144",
              "snow": "255,250,250",
              "springgreen": "0,255,127",
              "steelblue": "70,130,180",
              "tan": "210,180,140",
              "teal": "0,128,128",
              "thistle": "216,191,216",
              "tomato": "255,99,71",
              "turquoise": "64,224,208",
              "violet": "238,130,238",
              "wheat": "245,222,179",
              "whitesmoke": "245,245,245",
              "white": "255,255,255",
              "yellowgreen": "154,205,50",
              "yellow": "255,255,0"
            }
          },

          /************
           Hooks
           ************/

          /* Hooks allow a subproperty (e.g. "boxShadowBlur") of a compound-value CSS property
           (e.g. "boxShadow: X Y Blur Spread Color") to be animated as if it were a discrete property. */

          /* Note: Beyond enabling fine-grained property animation, hooking is necessary since Velocity only
           tweens properties with single numeric values; unlike CSS transitions, Velocity does not interpolate compound-values. */
          Hooks: {
            /********************
             Registration
             ********************/

            /* Templates are a concise way of indicating which subproperties must be individually registered for each compound-value CSS property. */

            /* Each template consists of the compound-value's base name, its constituent subproperty names, and those subproperties' default values. */
            templates: {
              "textShadow": ["Color X Y Blur", "black 0px 0px 0px"],
              "boxShadow": ["Color X Y Blur Spread", "black 0px 0px 0px 0px"],
              "clip": ["Top Right Bottom Left", "0px 0px 0px 0px"],
              "backgroundPosition": ["X Y", "0% 0%"],
              "transformOrigin": ["X Y Z", "50% 50% 0px"],
              "perspectiveOrigin": ["X Y", "50% 50%"]
            },

            /* A "registered" hook is one that has been converted from its template form into a live,
             tweenable property. It contains data to associate it with its root property. */
            registered: {
              /* Note: A registered hook looks like this ==> textShadowBlur: [ "textShadow", 3 ],
               which consists of the subproperty's name, the associated root property's name,
               and the subproperty's position in the root's value. */
            },

            /* Convert the templates into individual hooks then append them to the registered object above. */
            register: function register() {
              /* Color hooks registration: Colors are defaulted to white -- as opposed to black -- since colors that are
               currently set to "transparent" default to their respective template below when color-animated,
               and white is typically a closer match to transparent than black is. An exception is made for text ("color"),
               which is almost always set closer to black than white. */
              for (var i = 0; i < CSS.Lists.colors.length; i++) {
                var rgbComponents = CSS.Lists.colors[i] === "color" ? "0 0 0 1" : "255 255 255 1";
                CSS.Hooks.templates[CSS.Lists.colors[i]] = ["Red Green Blue Alpha", rgbComponents];
              }

              var rootProperty, hookTemplate, hookNames;
              /* In IE, color values inside compound-value properties are positioned at the end the value instead of at the beginning.
               Thus, we re-arrange the templates accordingly. */

              if (IE) {
                for (rootProperty in CSS.Hooks.templates) {
                  if (!CSS.Hooks.templates.hasOwnProperty(rootProperty)) {
                    continue;
                  }

                  hookTemplate = CSS.Hooks.templates[rootProperty];
                  hookNames = hookTemplate[0].split(" ");
                  var defaultValues = hookTemplate[1].match(CSS.RegEx.valueSplit);

                  if (hookNames[0] === "Color") {
                    /* Reposition both the hook's name and its default value to the end of their respective strings. */
                    hookNames.push(hookNames.shift());
                    defaultValues.push(defaultValues.shift());
                    /* Replace the existing template for the hook's root property. */

                    CSS.Hooks.templates[rootProperty] = [hookNames.join(" "), defaultValues.join(" ")];
                  }
                }
              }
              /* Hook registration. */


              for (rootProperty in CSS.Hooks.templates) {
                if (!CSS.Hooks.templates.hasOwnProperty(rootProperty)) {
                  continue;
                }

                hookTemplate = CSS.Hooks.templates[rootProperty];
                hookNames = hookTemplate[0].split(" ");

                for (var j in hookNames) {
                  if (!hookNames.hasOwnProperty(j)) {
                    continue;
                  }

                  var fullHookName = rootProperty + hookNames[j],
                      hookPosition = j;
                  /* For each hook, register its full name (e.g. textShadowBlur) with its root property (e.g. textShadow)
                   and the hook's position in its template's default value string. */

                  CSS.Hooks.registered[fullHookName] = [rootProperty, hookPosition];
                }
              }
            },

            /*****************************
             Injection and Extraction
             *****************************/

            /* Look up the root property associated with the hook (e.g. return "textShadow" for "textShadowBlur"). */

            /* Since a hook cannot be set directly (the browser won't recognize it), style updating for hooks is routed through the hook's root property. */
            getRoot: function getRoot(property) {
              var hookData = CSS.Hooks.registered[property];

              if (hookData) {
                return hookData[0];
              } else {
                /* If there was no hook match, return the property name untouched. */
                return property;
              }
            },
            getUnit: function getUnit(str, start) {
              var unit = (str.substr(start || 0, 5).match(/^[a-z%]+/) || [])[0] || "";

              if (unit && _inArray(CSS.Lists.units)) {
                return unit;
              }

              return "";
            },
            fixColors: function fixColors(str) {
              return str.replace(/(rgba?\(\s*)?(\b[a-z]+\b)/g, function ($0, $1, $2) {
                if (CSS.Lists.colorNames.hasOwnProperty($2)) {
                  return ($1 ? $1 : "rgba(") + CSS.Lists.colorNames[$2] + ($1 ? "" : ",1)");
                }

                return $1 + $2;
              });
            },

            /* Convert any rootPropertyValue, null or otherwise, into a space-delimited list of hook values so that
             the targeted hook can be injected or extracted at its standard position. */
            cleanRootPropertyValue: function cleanRootPropertyValue(rootProperty, rootPropertyValue) {
              /* If the rootPropertyValue is wrapped with "rgb()", "clip()", etc., remove the wrapping to normalize the value before manipulation. */
              if (CSS.RegEx.valueUnwrap.test(rootPropertyValue)) {
                rootPropertyValue = rootPropertyValue.match(CSS.RegEx.valueUnwrap)[1];
              }
              /* If rootPropertyValue is a CSS null-value (from which there's inherently no hook value to extract),
               default to the root's default value as defined in CSS.Hooks.templates. */

              /* Note: CSS null-values include "none", "auto", and "transparent". They must be converted into their
               zero-values (e.g. textShadow: "none" ==> textShadow: "0px 0px 0px black") for hook manipulation to proceed. */


              if (CSS.Values.isCSSNullValue(rootPropertyValue)) {
                rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
              }

              return rootPropertyValue;
            },

            /* Extracted the hook's value from its root property's value. This is used to get the starting value of an animating hook. */
            extractValue: function extractValue(fullHookName, rootPropertyValue) {
              var hookData = CSS.Hooks.registered[fullHookName];

              if (hookData) {
                var hookRoot = hookData[0],
                    hookPosition = hookData[1];
                rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);
                /* Split rootPropertyValue into its constituent hook values then grab the desired hook at its standard position. */

                return rootPropertyValue.toString().match(CSS.RegEx.valueSplit)[hookPosition];
              } else {
                /* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
                return rootPropertyValue;
              }
            },

            /* Inject the hook's value into its root property's value. This is used to piece back together the root property
             once Velocity has updated one of its individually hooked values through tweening. */
            injectValue: function injectValue(fullHookName, hookValue, rootPropertyValue) {
              var hookData = CSS.Hooks.registered[fullHookName];

              if (hookData) {
                var hookRoot = hookData[0],
                    hookPosition = hookData[1],
                    rootPropertyValueParts,
                    rootPropertyValueUpdated;
                rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);
                /* Split rootPropertyValue into its individual hook values, replace the targeted value with hookValue,
                 then reconstruct the rootPropertyValue string. */

                rootPropertyValueParts = rootPropertyValue.toString().match(CSS.RegEx.valueSplit);
                rootPropertyValueParts[hookPosition] = hookValue;
                rootPropertyValueUpdated = rootPropertyValueParts.join(" ");
                return rootPropertyValueUpdated;
              } else {
                /* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
                return rootPropertyValue;
              }
            }
          },

          /*******************
           Normalizations
           *******************/

          /* Normalizations standardize CSS property manipulation by pollyfilling browser-specific implementations (e.g. opacity)
           and reformatting special properties (e.g. clip, rgba) to look like standard ones. */
          Normalizations: {
            /* Normalizations are passed a normalization target (either the property's name, its extracted value, or its injected value),
             the targeted element (which may need to be queried), and the targeted property value. */
            registered: {
              clip: function clip(type, element, propertyValue) {
                switch (type) {
                  case "name":
                    return "clip";

                  /* Clip needs to be unwrapped and stripped of its commas during extraction. */

                  case "extract":
                    var extracted;
                    /* If Velocity also extracted this value, skip extraction. */

                    if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
                      extracted = propertyValue;
                    } else {
                      /* Remove the "rect()" wrapper. */
                      extracted = propertyValue.toString().match(CSS.RegEx.valueUnwrap);
                      /* Strip off commas. */

                      extracted = extracted ? extracted[1].replace(/,(\s+)?/g, " ") : propertyValue;
                    }

                    return extracted;

                  /* Clip needs to be re-wrapped during injection. */

                  case "inject":
                    return "rect(" + propertyValue + ")";
                }
              },
              blur: function blur(type, element, propertyValue) {
                switch (type) {
                  case "name":
                    return Velocity.State.isFirefox ? "filter" : "-webkit-filter";

                  case "extract":
                    var extracted = parseFloat(propertyValue);
                    /* If extracted is NaN, meaning the value isn't already extracted. */

                    if (!(extracted || extracted === 0)) {
                      var blurComponent = propertyValue.toString().match(/blur\(([0-9]+[A-z]+)\)/i);
                      /* If the filter string had a blur component, return just the blur value and unit type. */

                      if (blurComponent) {
                        extracted = blurComponent[1];
                        /* If the component doesn't exist, default blur to 0. */
                      } else {
                        extracted = 0;
                      }
                    }

                    return extracted;

                  /* Blur needs to be re-wrapped during injection. */

                  case "inject":
                    /* For the blur effect to be fully de-applied, it needs to be set to "none" instead of 0. */
                    if (!parseFloat(propertyValue)) {
                      return "none";
                    } else {
                      return "blur(" + propertyValue + ")";
                    }

                }
              },

              /* <=IE8 do not support the standard opacity property. They use filter:alpha(opacity=INT) instead. */
              opacity: function opacity(type, element, propertyValue) {
                if (IE <= 8) {
                  switch (type) {
                    case "name":
                      return "filter";

                    case "extract":
                      /* <=IE8 return a "filter" value of "alpha(opacity=\d{1,3})".
                       Extract the value and convert it to a decimal value to match the standard CSS opacity property's formatting. */
                      var extracted = propertyValue.toString().match(/alpha\(opacity=(.*)\)/i);

                      if (extracted) {
                        /* Convert to decimal value. */
                        propertyValue = extracted[1] / 100;
                      } else {
                        /* When extracting opacity, default to 1 since a null value means opacity hasn't been set. */
                        propertyValue = 1;
                      }

                      return propertyValue;

                    case "inject":
                      /* Opacified elements are required to have their zoom property set to a non-zero value. */
                      element.style.zoom = 1;
                      /* Setting the filter property on elements with certain font property combinations can result in a
                       highly unappealing ultra-bolding effect. There's no way to remedy this throughout a tween, but dropping the
                       value altogether (when opacity hits 1) at leasts ensures that the glitch is gone post-tweening. */

                      if (parseFloat(propertyValue) >= 1) {
                        return "";
                      } else {
                        /* As per the filter property's spec, convert the decimal value to a whole number and wrap the value. */
                        return "alpha(opacity=" + parseInt(parseFloat(propertyValue) * 100, 10) + ")";
                      }

                  }
                  /* With all other browsers, normalization is not required; return the same values that were passed in. */

                } else {
                  switch (type) {
                    case "name":
                      return "opacity";

                    case "extract":
                      return propertyValue;

                    case "inject":
                      return propertyValue;
                  }
                }
              }
            },

            /*****************************
             Batched Registrations
             *****************************/

            /* Note: Batched normalizations extend the CSS.Normalizations.registered object. */
            register: function register() {
              /*****************
               Transforms
               *****************/

              /* Transforms are the subproperties contained by the CSS "transform" property. Transforms must undergo normalization
               so that they can be referenced in a properties map by their individual names. */

              /* Note: When transforms are "set", they are actually assigned to a per-element transformCache. When all transform
               setting is complete complete, CSS.flushTransformCache() must be manually called to flush the values to the DOM.
               Transform setting is batched in this way to improve performance: the transform style only needs to be updated
               once when multiple transform subproperties are being animated simultaneously. */

              /* Note: IE9 and Android Gingerbread have support for 2D -- but not 3D -- transforms. Since animating unsupported
               transform properties results in the browser ignoring the *entire* transform string, we prevent these 3D values
               from being normalized for these browsers so that tweening skips these properties altogether
               (since it will ignore them as being unsupported by the browser.) */
              if ((!IE || IE > 9) && !Velocity.State.isGingerbread) {
                /* Note: Since the standalone CSS "perspective" property and the CSS transform "perspective" subproperty
                 share the same name, the latter is given a unique token within Velocity: "transformPerspective". */
                CSS.Lists.transformsBase = CSS.Lists.transformsBase.concat(CSS.Lists.transforms3D);
              }

              for (var i = 0; i < CSS.Lists.transformsBase.length; i++) {
                /* Wrap the dynamically generated normalization function in a new scope so that transformName's value is
                 paired with its respective function. (Otherwise, all functions would take the final for loop's transformName.) */
                (function () {
                  var transformName = CSS.Lists.transformsBase[i];

                  CSS.Normalizations.registered[transformName] = function (type, element, propertyValue) {
                    switch (type) {
                      /* The normalized property name is the parent "transform" property -- the property that is actually set in CSS. */
                      case "name":
                        return "transform";

                      /* Transform values are cached onto a per-element transformCache object. */

                      case "extract":
                        /* If this transform has yet to be assigned a value, return its null value. */
                        if (Data(element) === undefined$1 || Data(element).transformCache[transformName] === undefined$1) {
                          /* Scale CSS.Lists.transformsBase default to 1 whereas all other transform properties default to 0. */
                          return /^scale/i.test(transformName) ? 1 : 0;
                          /* When transform values are set, they are wrapped in parentheses as per the CSS spec.
                           Thus, when extracting their values (for tween calculations), we strip off the parentheses. */
                        }

                        return Data(element).transformCache[transformName].replace(/[()]/g, "");

                      case "inject":
                        var invalid = false;
                        /* If an individual transform property contains an unsupported unit type, the browser ignores the *entire* transform property.
                         Thus, protect users from themselves by skipping setting for transform values supplied with invalid unit types. */

                        /* Switch on the base transform type; ignore the axis by removing the last letter from the transform's name. */

                        switch (transformName.substr(0, transformName.length - 1)) {
                          /* Whitelist unit types for each transform. */
                          case "translate":
                            invalid = !/(%|px|em|rem|vw|vh|\d)$/i.test(propertyValue);
                            break;

                          /* Since an axis-free "scale" property is supported as well, a little hack is used here to detect it by chopping off its last letter. */

                          case "scal":
                          case "scale":
                            /* Chrome on Android has a bug in which scaled elements blur if their initial scale
                             value is below 1 (which can happen with forcefeeding). Thus, we detect a yet-unset scale property
                             and ensure that its first value is always 1. More info: http://stackoverflow.com/questions/10417890/css3-animations-with-transform-causes-blurred-elements-on-webkit/10417962#10417962 */
                            if (Velocity.State.isAndroid && Data(element).transformCache[transformName] === undefined$1 && propertyValue < 1) {
                              propertyValue = 1;
                            }

                            invalid = !/(\d)$/i.test(propertyValue);
                            break;

                          case "skew":
                            invalid = !/(deg|\d)$/i.test(propertyValue);
                            break;

                          case "rotate":
                            invalid = !/(deg|\d)$/i.test(propertyValue);
                            break;
                        }

                        if (!invalid) {
                          /* As per the CSS spec, wrap the value in parentheses. */
                          Data(element).transformCache[transformName] = "(" + propertyValue + ")";
                        }
                        /* Although the value is set on the transformCache object, return the newly-updated value for the calling code to process as normal. */


                        return Data(element).transformCache[transformName];
                    }
                  };
                })();
              }
              /*************
               Colors
               *************/

              /* Since Velocity only animates a single numeric value per property, color animation is achieved by hooking the individual RGBA components of CSS color properties.
               Accordingly, color values must be normalized (e.g. "#ff0000", "red", and "rgb(255, 0, 0)" ==> "255 0 0 1") so that their components can be injected/extracted by CSS.Hooks logic. */


              for (var j = 0; j < CSS.Lists.colors.length; j++) {
                /* Wrap the dynamically generated normalization function in a new scope so that colorName's value is paired with its respective function.
                 (Otherwise, all functions would take the final for loop's colorName.) */
                (function () {
                  var colorName = CSS.Lists.colors[j];
                  /* Note: In IE<=8, which support rgb but not rgba, color properties are reverted to rgb by stripping off the alpha component. */

                  CSS.Normalizations.registered[colorName] = function (type, element, propertyValue) {
                    switch (type) {
                      case "name":
                        return colorName;

                      /* Convert all color values into the rgb format. (Old IE can return hex values and color names instead of rgb/rgba.) */

                      case "extract":
                        var extracted;
                        /* If the color is already in its hookable form (e.g. "255 255 255 1") due to having been previously extracted, skip extraction. */

                        if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
                          extracted = propertyValue;
                        } else {
                          var converted,
                              colorNames = {
                            black: "rgb(0, 0, 0)",
                            blue: "rgb(0, 0, 255)",
                            gray: "rgb(128, 128, 128)",
                            green: "rgb(0, 128, 0)",
                            red: "rgb(255, 0, 0)",
                            white: "rgb(255, 255, 255)"
                          };
                          /* Convert color names to rgb. */

                          if (/^[A-z]+$/i.test(propertyValue)) {
                            if (colorNames[propertyValue] !== undefined$1) {
                              converted = colorNames[propertyValue];
                            } else {
                              /* If an unmatched color name is provided, default to black. */
                              converted = colorNames.black;
                            }
                            /* Convert hex values to rgb. */

                          } else if (CSS.RegEx.isHex.test(propertyValue)) {
                            converted = "rgb(" + CSS.Values.hexToRgb(propertyValue).join(" ") + ")";
                            /* If the provided color doesn't match any of the accepted color formats, default to black. */
                          } else if (!/^rgba?\(/i.test(propertyValue)) {
                            converted = colorNames.black;
                          }
                          /* Remove the surrounding "rgb/rgba()" string then replace commas with spaces and strip
                           repeated spaces (in case the value included spaces to begin with). */


                          extracted = (converted || propertyValue).toString().match(CSS.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g, " ");
                        }
                        /* So long as this isn't <=IE8, add a fourth (alpha) component if it's missing and default it to 1 (visible). */


                        if ((!IE || IE > 8) && extracted.split(" ").length === 3) {
                          extracted += " 1";
                        }

                        return extracted;

                      case "inject":
                        /* If we have a pattern then it might already have the right values */
                        if (/^rgb/.test(propertyValue)) {
                          return propertyValue;
                        }
                        /* If this is IE<=8 and an alpha component exists, strip it off. */


                        if (IE <= 8) {
                          if (propertyValue.split(" ").length === 4) {
                            propertyValue = propertyValue.split(/\s+/).slice(0, 3).join(" ");
                          }
                          /* Otherwise, add a fourth (alpha) component if it's missing and default it to 1 (visible). */

                        } else if (propertyValue.split(" ").length === 3) {
                          propertyValue += " 1";
                        }
                        /* Re-insert the browser-appropriate wrapper("rgb/rgba()"), insert commas, and strip off decimal units
                         on all values but the fourth (R, G, and B only accept whole numbers). */


                        return (IE <= 8 ? "rgb" : "rgba") + "(" + propertyValue.replace(/\s+/g, ",").replace(/\.(\d)+(?=,)/g, "") + ")";
                    }
                  };
                })();
              }
              /**************
               Dimensions
               **************/


              function augmentDimension(name, element, wantInner) {
                var isBorderBox = CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() === "border-box";

                if (isBorderBox === (wantInner || false)) {
                  /* in box-sizing mode, the CSS width / height accessors already give the outerWidth / outerHeight. */
                  var i,
                      value,
                      augment = 0,
                      sides = name === "width" ? ["Left", "Right"] : ["Top", "Bottom"],
                      fields = ["padding" + sides[0], "padding" + sides[1], "border" + sides[0] + "Width", "border" + sides[1] + "Width"];

                  for (i = 0; i < fields.length; i++) {
                    value = parseFloat(CSS.getPropertyValue(element, fields[i]));

                    if (!isNaN(value)) {
                      augment += value;
                    }
                  }

                  return wantInner ? -augment : augment;
                }

                return 0;
              }

              function getDimension(name, wantInner) {
                return function (type, element, propertyValue) {
                  switch (type) {
                    case "name":
                      return name;

                    case "extract":
                      return parseFloat(propertyValue) + augmentDimension(name, element, wantInner);

                    case "inject":
                      return parseFloat(propertyValue) - augmentDimension(name, element, wantInner) + "px";
                  }
                };
              }

              CSS.Normalizations.registered.innerWidth = getDimension("width", true);
              CSS.Normalizations.registered.innerHeight = getDimension("height", true);
              CSS.Normalizations.registered.outerWidth = getDimension("width");
              CSS.Normalizations.registered.outerHeight = getDimension("height");
            }
          },

          /************************
           CSS Property Names
           ************************/
          Names: {
            /* Camelcase a property name into its JavaScript notation (e.g. "background-color" ==> "backgroundColor").
             Camelcasing is used to normalize property names between and across calls. */
            camelCase: function camelCase(property) {
              return property.replace(/-(\w)/g, function (match, subMatch) {
                return subMatch.toUpperCase();
              });
            },

            /* For SVG elements, some properties (namely, dimensional ones) are GET/SET via the element's HTML attributes (instead of via CSS styles). */
            SVGAttribute: function SVGAttribute(property) {
              var SVGAttributes = "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";
              /* Certain browsers require an SVG transform to be applied as an attribute. (Otherwise, application via CSS is preferable due to 3D support.) */

              if (IE || Velocity.State.isAndroid && !Velocity.State.isChrome) {
                SVGAttributes += "|transform";
              }

              return new RegExp("^(" + SVGAttributes + ")$", "i").test(property);
            },

            /* Determine whether a property should be set with a vendor prefix. */

            /* If a prefixed version of the property exists, return it. Otherwise, return the original property name.
             If the property is not at all supported by the browser, return a false flag. */
            prefixCheck: function prefixCheck(property) {
              /* If this property has already been checked, return the cached value. */
              if (Velocity.State.prefixMatches[property]) {
                return [Velocity.State.prefixMatches[property], true];
              } else {
                var vendors = ["", "Webkit", "Moz", "ms", "O"];

                for (var i = 0, vendorsLength = vendors.length; i < vendorsLength; i++) {
                  var propertyPrefixed;

                  if (i === 0) {
                    propertyPrefixed = property;
                  } else {
                    /* Capitalize the first letter of the property to conform to JavaScript vendor prefix notation (e.g. webkitFilter). */
                    propertyPrefixed = vendors[i] + property.replace(/^\w/, function (match) {
                      return match.toUpperCase();
                    });
                  }
                  /* Check if the browser supports this property as prefixed. */


                  if (Type.isString(Velocity.State.prefixElement.style[propertyPrefixed])) {
                    /* Cache the match. */
                    Velocity.State.prefixMatches[property] = propertyPrefixed;
                    return [propertyPrefixed, true];
                  }
                }
                /* If the browser doesn't support this property in any form, include a false flag so that the caller can decide how to proceed. */


                return [property, false];
              }
            }
          },

          /************************
           CSS Property Values
           ************************/
          Values: {
            /* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */
            hexToRgb: function hexToRgb(hex) {
              var shortformRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i,
                  longformRegex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
                  rgbParts;
              hex = hex.replace(shortformRegex, function (m, r, g, b) {
                return r + r + g + g + b + b;
              });
              rgbParts = longformRegex.exec(hex);
              return rgbParts ? [parseInt(rgbParts[1], 16), parseInt(rgbParts[2], 16), parseInt(rgbParts[3], 16)] : [0, 0, 0];
            },
            isCSSNullValue: function isCSSNullValue(value) {
              /* The browser defaults CSS values that have not been set to either 0 or one of several possible null-value strings.
               Thus, we check for both falsiness and these special strings. */

              /* Null-value checking is performed to default the special strings to 0 (for the sake of tweening) or their hook
               templates as defined as CSS.Hooks (for the sake of hook injection/extraction). */

              /* Note: Chrome returns "rgba(0, 0, 0, 0)" for an undefined color whereas IE returns "transparent". */
              return !value || /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(value);
            },

            /* Retrieve a property's default unit type. Used for assigning a unit type when one is not supplied by the user. */
            getUnitType: function getUnitType(property) {
              if (/^(rotate|skew)/i.test(property)) {
                return "deg";
              } else if (/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(property)) {
                /* The above properties are unitless. */
                return "";
              } else {
                /* Default to px for all other properties. */
                return "px";
              }
            },

            /* HTML elements default to an associated display type when they're not set to display:none. */

            /* Note: This function is used for correctly setting the non-"none" display value in certain Velocity redirects, such as fadeIn/Out. */
            getDisplayType: function getDisplayType(element) {
              var tagName = element && element.tagName.toString().toLowerCase();

              if (/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(tagName)) {
                return "inline";
              } else if (/^(li)$/i.test(tagName)) {
                return "list-item";
              } else if (/^(tr)$/i.test(tagName)) {
                return "table-row";
              } else if (/^(table)$/i.test(tagName)) {
                return "table";
              } else if (/^(tbody)$/i.test(tagName)) {
                return "table-row-group";
                /* Default to "block" when no match is found. */
              } else {
                return "block";
              }
            },

            /* The class add/remove functions are used to temporarily apply a "velocity-animating" class to elements while they're animating. */
            addClass: function addClass(element, className) {
              if (element) {
                if (element.classList) {
                  element.classList.add(className);
                } else if (Type.isString(element.className)) {
                  // Element.className is around 15% faster then set/getAttribute
                  element.className += (element.className.length ? " " : "") + className;
                } else {
                  // Work around for IE strict mode animating SVG - and anything else that doesn't behave correctly - the same way jQuery does it
                  var currentClass = element.getAttribute(IE <= 7 ? "className" : "class") || "";
                  element.setAttribute("class", currentClass + (currentClass ? " " : "") + className);
                }
              }
            },
            removeClass: function removeClass(element, className) {
              if (element) {
                if (element.classList) {
                  element.classList.remove(className);
                } else if (Type.isString(element.className)) {
                  // Element.className is around 15% faster then set/getAttribute
                  // TODO: Need some jsperf tests on performance - can we get rid of the regex and maybe use split / array manipulation?
                  element.className = element.className.toString().replace(new RegExp("(^|\\s)" + className.split(" ").join("|") + "(\\s|$)", "gi"), " ");
                } else {
                  // Work around for IE strict mode animating SVG - and anything else that doesn't behave correctly - the same way jQuery does it
                  var currentClass = element.getAttribute(IE <= 7 ? "className" : "class") || "";
                  element.setAttribute("class", currentClass.replace(new RegExp("(^|\s)" + className.split(" ").join("|") + "(\s|$)", "gi"), " "));
                }
              }
            }
          },

          /****************************
           Style Getting & Setting
           ****************************/

          /* The singular getPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
          getPropertyValue: function getPropertyValue(element, property, rootPropertyValue, forceStyleLookup) {
            /* Get an element's computed property value. */

            /* Note: Retrieving the value of a CSS property cannot simply be performed by checking an element's
             style attribute (which only reflects user-defined values). Instead, the browser must be queried for a property's
             *computed* value. You can read more about getComputedStyle here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
            function computePropertyValue(element, property) {
              /* When box-sizing isn't set to border-box, height and width style values are incorrectly computed when an
               element's scrollbars are visible (which expands the element's dimensions). Thus, we defer to the more accurate
               offsetHeight/Width property, which includes the total dimensions for interior, border, padding, and scrollbar.
               We subtract border and padding to get the sum of interior + scrollbar. */
              var computedValue = 0;
              /* IE<=8 doesn't support window.getComputedStyle, thus we defer to jQuery, which has an extensive array
               of hacks to accurately retrieve IE8 property values. Re-implementing that logic here is not worth bloating the
               codebase for a dying browser. The performance repercussions of using jQuery here are minimal since
               Velocity is optimized to rarely (and sometimes never) query the DOM. Further, the $.css() codepath isn't that slow. */

              if (IE <= 8) {
                computedValue = $.css(element, property);
                /* GET */

                /* All other browsers support getComputedStyle. The returned live object reference is cached onto its
                 associated element so that it does not need to be refetched upon every GET. */
              } else {
                /* Browsers do not return height and width values for elements that are set to display:"none". Thus, we temporarily
                 toggle display to the element type's default value. */
                var toggleDisplay = false;

                if (/^(width|height)$/.test(property) && CSS.getPropertyValue(element, "display") === 0) {
                  toggleDisplay = true;
                  CSS.setPropertyValue(element, "display", CSS.Values.getDisplayType(element));
                }

                var revertDisplay = function revertDisplay() {
                  if (toggleDisplay) {
                    CSS.setPropertyValue(element, "display", "none");
                  }
                };

                if (!forceStyleLookup) {
                  if (property === "height" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
                    var contentBoxHeight = element.offsetHeight - (parseFloat(CSS.getPropertyValue(element, "borderTopWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderBottomWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingTop")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingBottom")) || 0);
                    revertDisplay();
                    return contentBoxHeight;
                  } else if (property === "width" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
                    var contentBoxWidth = element.offsetWidth - (parseFloat(CSS.getPropertyValue(element, "borderLeftWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderRightWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingLeft")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingRight")) || 0);
                    revertDisplay();
                    return contentBoxWidth;
                  }
                }

                var computedStyle;
                /* For elements that Velocity hasn't been called on directly (e.g. when Velocity queries the DOM on behalf
                 of a parent of an element its animating), perform a direct getComputedStyle lookup since the object isn't cached. */

                if (Data(element) === undefined$1) {
                  computedStyle = window.getComputedStyle(element, null);
                  /* GET */

                  /* If the computedStyle object has yet to be cached, do so now. */
                } else if (!Data(element).computedStyle) {
                  computedStyle = Data(element).computedStyle = window.getComputedStyle(element, null);
                  /* GET */

                  /* If computedStyle is cached, use it. */
                } else {
                  computedStyle = Data(element).computedStyle;
                }
                /* IE and Firefox do not return a value for the generic borderColor -- they only return individual values for each border side's color.
                 Also, in all browsers, when border colors aren't all the same, a compound value is returned that Velocity isn't setup to parse.
                 So, as a polyfill for querying individual border side colors, we just return the top border's color and animate all borders from that value. */


                if (property === "borderColor") {
                  property = "borderTopColor";
                }
                /* IE9 has a bug in which the "filter" property must be accessed from computedStyle using the getPropertyValue method
                 instead of a direct property lookup. The getPropertyValue method is slower than a direct lookup, which is why we avoid it by default. */


                if (IE === 9 && property === "filter") {
                  computedValue = computedStyle.getPropertyValue(property);
                  /* GET */
                } else {
                  computedValue = computedStyle[property];
                }
                /* Fall back to the property's style value (if defined) when computedValue returns nothing,
                 which can happen when the element hasn't been painted. */


                if (computedValue === "" || computedValue === null) {
                  computedValue = element.style[property];
                }

                revertDisplay();
              }
              /* For top, right, bottom, and left (TRBL) values that are set to "auto" on elements of "fixed" or "absolute" position,
               defer to jQuery for converting "auto" to a numeric value. (For elements with a "static" or "relative" position, "auto" has the same
               effect as being set to 0, so no conversion is necessary.) */

              /* An example of why numeric conversion is necessary: When an element with "position:absolute" has an untouched "left"
               property, which reverts to "auto", left's value is 0 relative to its parent element, but is often non-zero relative
               to its *containing* (not parent) element, which is the nearest "position:relative" ancestor or the viewport (and always the viewport in the case of "position:fixed"). */


              if (computedValue === "auto" && /^(top|right|bottom|left)$/i.test(property)) {
                var position = computePropertyValue(element, "position");
                /* GET */

                /* For absolute positioning, jQuery's $.position() only returns values for top and left;
                 right and bottom will have their "auto" value reverted to 0. */

                /* Note: A jQuery object must be created here since jQuery doesn't have a low-level alias for $.position().
                 Not a big deal since we're currently in a GET batch anyway. */

                if (position === "fixed" || position === "absolute" && /top|left/i.test(property)) {
                  /* Note: jQuery strips the pixel unit from its returned values; we re-add it here to conform with computePropertyValue's behavior. */
                  computedValue = $(element).position()[property] + "px";
                  /* GET */
                }
              }

              return computedValue;
            }

            var propertyValue;
            /* If this is a hooked property (e.g. "clipLeft" instead of the root property of "clip"),
             extract the hook's value from a normalized rootPropertyValue using CSS.Hooks.extractValue(). */

            if (CSS.Hooks.registered[property]) {
              var hook = property,
                  hookRoot = CSS.Hooks.getRoot(hook);
              /* If a cached rootPropertyValue wasn't passed in (which Velocity always attempts to do in order to avoid requerying the DOM),
               query the DOM for the root property's value. */

              if (rootPropertyValue === undefined$1) {
                /* Since the browser is now being directly queried, use the official post-prefixing property name for this lookup. */
                rootPropertyValue = CSS.getPropertyValue(element, CSS.Names.prefixCheck(hookRoot)[0]);
                /* GET */
              }
              /* If this root has a normalization registered, peform the associated normalization extraction. */


              if (CSS.Normalizations.registered[hookRoot]) {
                rootPropertyValue = CSS.Normalizations.registered[hookRoot]("extract", element, rootPropertyValue);
              }
              /* Extract the hook's value. */


              propertyValue = CSS.Hooks.extractValue(hook, rootPropertyValue);
              /* If this is a normalized property (e.g. "opacity" becomes "filter" in <=IE8) or "translateX" becomes "transform"),
               normalize the property's name and value, and handle the special case of transforms. */

              /* Note: Normalizing a property is mutually exclusive from hooking a property since hook-extracted values are strictly
               numerical and therefore do not require normalization extraction. */
            } else if (CSS.Normalizations.registered[property]) {
              var normalizedPropertyName, normalizedPropertyValue;
              normalizedPropertyName = CSS.Normalizations.registered[property]("name", element);
              /* Transform values are calculated via normalization extraction (see below), which checks against the element's transformCache.
               At no point do transform GETs ever actually query the DOM; initial stylesheet values are never processed.
               This is because parsing 3D transform matrices is not always accurate and would bloat our codebase;
               thus, normalization extraction defaults initial transform values to their zero-values (e.g. 1 for scaleX and 0 for translateX). */

              if (normalizedPropertyName !== "transform") {
                normalizedPropertyValue = computePropertyValue(element, CSS.Names.prefixCheck(normalizedPropertyName)[0]);
                /* GET */

                /* If the value is a CSS null-value and this property has a hook template, use that zero-value template so that hooks can be extracted from it. */

                if (CSS.Values.isCSSNullValue(normalizedPropertyValue) && CSS.Hooks.templates[property]) {
                  normalizedPropertyValue = CSS.Hooks.templates[property][1];
                }
              }

              propertyValue = CSS.Normalizations.registered[property]("extract", element, normalizedPropertyValue);
            }
            /* If a (numeric) value wasn't produced via hook extraction or normalization, query the DOM. */


            if (!/^[\d-]/.test(propertyValue)) {
              /* For SVG elements, dimensional properties (which SVGAttribute() detects) are tweened via
               their HTML attribute values instead of their CSS style values. */
              var data = Data(element);

              if (data && data.isSVG && CSS.Names.SVGAttribute(property)) {
                /* Since the height/width attribute values must be set manually, they don't reflect computed values.
                 Thus, we use use getBBox() to ensure we always get values for elements with undefined height/width attributes. */
                if (/^(height|width)$/i.test(property)) {
                  /* Firefox throws an error if .getBBox() is called on an SVG that isn't attached to the DOM. */
                  try {
                    propertyValue = element.getBBox()[property];
                  } catch (error) {
                    propertyValue = 0;
                  }
                  /* Otherwise, access the attribute value directly. */

                } else {
                  propertyValue = element.getAttribute(property);
                }
              } else {
                propertyValue = computePropertyValue(element, CSS.Names.prefixCheck(property)[0]);
                /* GET */
              }
            }
            /* Since property lookups are for animation purposes (which entails computing the numeric delta between start and end values),
             convert CSS null-values to an integer of value 0. */


            if (CSS.Values.isCSSNullValue(propertyValue)) {
              propertyValue = 0;
            }

            if (Velocity.debug >= 2) {
              console.log("Get " + property + ": " + propertyValue);
            }

            return propertyValue;
          },

          /* The singular setPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
          setPropertyValue: function setPropertyValue(element, property, propertyValue, rootPropertyValue, scrollData) {
            var propertyName = property;
            /* In order to be subjected to call options and element queueing, scroll animation is routed through Velocity as if it were a standard CSS property. */

            if (property === "scroll") {
              /* If a container option is present, scroll the container instead of the browser window. */
              if (scrollData.container) {
                scrollData.container["scroll" + scrollData.direction] = propertyValue;
                /* Otherwise, Velocity defaults to scrolling the browser window. */
              } else {
                if (scrollData.direction === "Left") {
                  window.scrollTo(propertyValue, scrollData.alternateValue);
                } else {
                  window.scrollTo(scrollData.alternateValue, propertyValue);
                }
              }
            } else {
              /* Transforms (translateX, rotateZ, etc.) are applied to a per-element transformCache object, which is manually flushed via flushTransformCache().
               Thus, for now, we merely cache transforms being SET. */
              if (CSS.Normalizations.registered[property] && CSS.Normalizations.registered[property]("name", element) === "transform") {
                /* Perform a normalization injection. */

                /* Note: The normalization logic handles the transformCache updating. */
                CSS.Normalizations.registered[property]("inject", element, propertyValue);
                propertyName = "transform";
                propertyValue = Data(element).transformCache[property];
              } else {
                /* Inject hooks. */
                if (CSS.Hooks.registered[property]) {
                  var hookName = property,
                      hookRoot = CSS.Hooks.getRoot(property);
                  /* If a cached rootPropertyValue was not provided, query the DOM for the hookRoot's current value. */

                  rootPropertyValue = rootPropertyValue || CSS.getPropertyValue(element, hookRoot);
                  /* GET */

                  propertyValue = CSS.Hooks.injectValue(hookName, propertyValue, rootPropertyValue);
                  property = hookRoot;
                }
                /* Normalize names and values. */


                if (CSS.Normalizations.registered[property]) {
                  propertyValue = CSS.Normalizations.registered[property]("inject", element, propertyValue);
                  property = CSS.Normalizations.registered[property]("name", element);
                }
                /* Assign the appropriate vendor prefix before performing an official style update. */


                propertyName = CSS.Names.prefixCheck(property)[0];
                /* A try/catch is used for IE<=8, which throws an error when "invalid" CSS values are set, e.g. a negative width.
                 Try/catch is avoided for other browsers since it incurs a performance overhead. */

                if (IE <= 8) {
                  try {
                    element.style[propertyName] = propertyValue;
                  } catch (error) {
                    if (Velocity.debug) {
                      console.log("Browser does not support [" + propertyValue + "] for [" + propertyName + "]");
                    }
                  }
                  /* SVG elements have their dimensional properties (width, height, x, y, cx, etc.) applied directly as attributes instead of as styles. */

                  /* Note: IE8 does not support SVG elements, so it's okay that we skip it for SVG animation. */

                } else {
                  var data = Data(element);

                  if (data && data.isSVG && CSS.Names.SVGAttribute(property)) {
                    /* Note: For SVG attributes, vendor-prefixed property names are never used. */

                    /* Note: Not all CSS properties can be animated via attributes, but the browser won't throw an error for unsupported properties. */
                    element.setAttribute(property, propertyValue);
                  } else {
                    element.style[propertyName] = propertyValue;
                  }
                }

                if (Velocity.debug >= 2) {
                  console.log("Set " + property + " (" + propertyName + "): " + propertyValue);
                }
              }
            }
            /* Return the normalized property name and value in case the caller wants to know how these values were modified before being applied to the DOM. */


            return [propertyName, propertyValue];
          },

          /* To increase performance by batching transform updates into a single SET, transforms are not directly applied to an element until flushTransformCache() is called. */

          /* Note: Velocity applies transform properties in the same order that they are chronogically introduced to the element's CSS styles. */
          flushTransformCache: function flushTransformCache(element) {
            var transformString = "",
                data = Data(element);
            /* Certain browsers require that SVG transforms be applied as an attribute. However, the SVG transform attribute takes a modified version of CSS's transform string
             (units are dropped and, except for skewX/Y, subproperties are merged into their master property -- e.g. scaleX and scaleY are merged into scale(X Y). */

            if ((IE || Velocity.State.isAndroid && !Velocity.State.isChrome) && data && data.isSVG) {
              /* Since transform values are stored in their parentheses-wrapped form, we use a helper function to strip out their numeric values.
               Further, SVG transform properties only take unitless (representing pixels) values, so it's okay that parseFloat() strips the unit suffixed to the float value. */
              var getTransformFloat = function getTransformFloat(transformProperty) {
                return parseFloat(CSS.getPropertyValue(element, transformProperty));
              };
              /* Create an object to organize all the transforms that we'll apply to the SVG element. To keep the logic simple,
               we process *all* transform properties -- even those that may not be explicitly applied (since they default to their zero-values anyway). */


              var SVGTransforms = {
                translate: [getTransformFloat("translateX"), getTransformFloat("translateY")],
                skewX: [getTransformFloat("skewX")],
                skewY: [getTransformFloat("skewY")],

                /* If the scale property is set (non-1), use that value for the scaleX and scaleY values
                 (this behavior mimics the result of animating all these properties at once on HTML elements). */
                scale: getTransformFloat("scale") !== 1 ? [getTransformFloat("scale"), getTransformFloat("scale")] : [getTransformFloat("scaleX"), getTransformFloat("scaleY")],

                /* Note: SVG's rotate transform takes three values: rotation degrees followed by the X and Y values
                 defining the rotation's origin point. We ignore the origin values (default them to 0). */
                rotate: [getTransformFloat("rotateZ"), 0, 0]
              };
              /* Iterate through the transform properties in the user-defined property map order.
               (This mimics the behavior of non-SVG transform animation.) */

              $.each(Data(element).transformCache, function (transformName) {
                /* Except for with skewX/Y, revert the axis-specific transform subproperties to their axis-free master
                 properties so that they match up with SVG's accepted transform properties. */
                if (/^translate/i.test(transformName)) {
                  transformName = "translate";
                } else if (/^scale/i.test(transformName)) {
                  transformName = "scale";
                } else if (/^rotate/i.test(transformName)) {
                  transformName = "rotate";
                }
                /* Check that we haven't yet deleted the property from the SVGTransforms container. */


                if (SVGTransforms[transformName]) {
                  /* Append the transform property in the SVG-supported transform format. As per the spec, surround the space-delimited values in parentheses. */
                  transformString += transformName + "(" + SVGTransforms[transformName].join(" ") + ")" + " ";
                  /* After processing an SVG transform property, delete it from the SVGTransforms container so we don't
                   re-insert the same master property if we encounter another one of its axis-specific properties. */

                  delete SVGTransforms[transformName];
                }
              });
            } else {
              var transformValue, perspective;
              /* Transform properties are stored as members of the transformCache object. Concatenate all the members into a string. */

              $.each(Data(element).transformCache, function (transformName) {
                transformValue = Data(element).transformCache[transformName];
                /* Transform's perspective subproperty must be set first in order to take effect. Store it temporarily. */

                if (transformName === "transformPerspective") {
                  perspective = transformValue;
                  return true;
                }
                /* IE9 only supports one rotation type, rotateZ, which it refers to as "rotate". */


                if (IE === 9 && transformName === "rotateZ") {
                  transformName = "rotate";
                }

                transformString += transformName + transformValue + " ";
              });
              /* If present, set the perspective subproperty first. */

              if (perspective) {
                transformString = "perspective" + perspective + " " + transformString;
              }
            }

            CSS.setPropertyValue(element, "transform", transformString);
          }
        };
        /* Register hooks and normalizations. */

        CSS.Hooks.register();
        CSS.Normalizations.register();
        /* Allow hook setting in the same fashion as jQuery's $.css(). */

        Velocity.hook = function (elements, arg2, arg3) {
          var value;
          elements = sanitizeElements(elements);
          $.each(elements, function (i, element) {
            /* Initialize Velocity's per-element data cache if this element hasn't previously been animated. */
            if (Data(element) === undefined$1) {
              Velocity.init(element);
            }
            /* Get property value. If an element set was passed in, only return the value for the first element. */


            if (arg3 === undefined$1) {
              if (value === undefined$1) {
                value = CSS.getPropertyValue(element, arg2);
              }
              /* Set property value. */

            } else {
              /* sPV returns an array of the normalized propertyName/propertyValue pair used to update the DOM. */
              var adjustedSet = CSS.setPropertyValue(element, arg2, arg3);
              /* Transform properties don't automatically set. They have to be flushed to the DOM. */

              if (adjustedSet[0] === "transform") {
                Velocity.CSS.flushTransformCache(element);
              }

              value = adjustedSet;
            }
          });
          return value;
        };
        /*****************
         Animation
         *****************/


        var animate = function animate() {
          var opts;
          /******************
           Call Chain
           ******************/

          /* Logic for determining what to return to the call stack when exiting out of Velocity. */

          function getChain() {
            /* If we are using the utility function, attempt to return this call's promise. If no promise library was detected,
             default to null instead of returning the targeted elements so that utility function's return value is standardized. */
            if (isUtility) {
              return promiseData.promise || null;
              /* Otherwise, if we're using $.fn, return the jQuery-/Zepto-wrapped element set. */
            } else {
              return elementsWrapped;
            }
          }
          /*************************
           Arguments Assignment
           *************************/

          /* To allow for expressive CoffeeScript code, Velocity supports an alternative syntax in which "elements" (or "e"), "properties" (or "p"), and "options" (or "o")
           objects are defined on a container object that's passed in as Velocity's sole argument. */

          /* Note: Some browsers automatically populate arguments with a "properties" object. We detect it by checking for its default "names" property. */


          var syntacticSugar = arguments[0] && (arguments[0].p || $.isPlainObject(arguments[0].properties) && !arguments[0].properties.names || Type.isString(arguments[0].properties)),

          /* Whether Velocity was called via the utility function (as opposed to on a jQuery/Zepto object). */
          isUtility,

          /* When Velocity is called via the utility function ($.Velocity()/Velocity()), elements are explicitly
           passed in as the first parameter. Thus, argument positioning varies. We normalize them here. */
          elementsWrapped,
              argumentIndex;
          var elements, propertiesMap, options;
          /* Detect jQuery/Zepto elements being animated via the $.fn method. */

          if (Type.isWrapped(this)) {
            isUtility = false;
            argumentIndex = 0;
            elements = this;
            elementsWrapped = this;
            /* Otherwise, raw elements are being animated via the utility function. */
          } else {
            isUtility = true;
            argumentIndex = 1;
            elements = syntacticSugar ? arguments[0].elements || arguments[0].e : arguments[0];
          }
          /***************
           Promises
           ***************/


          var promiseData = {
            promise: null,
            resolver: null,
            rejecter: null
          };
          /* If this call was made via the utility function (which is the default method of invocation when jQuery/Zepto are not being used), and if
           promise support was detected, create a promise object for this call and store references to its resolver and rejecter methods. The resolve
           method is used when a call completes naturally or is prematurely stopped by the user. In both cases, completeCall() handles the associated
           call cleanup and promise resolving logic. The reject method is used when an invalid set of arguments is passed into a Velocity call. */

          /* Note: Velocity employs a call-based queueing architecture, which means that stopping an animating element actually stops the full call that
           triggered it -- not that one element exclusively. Similarly, there is one promise per call, and all elements targeted by a Velocity call are
           grouped together for the purposes of resolving and rejecting a promise. */

          if (isUtility && Velocity.Promise) {
            promiseData.promise = new Velocity.Promise(function (resolve, reject) {
              promiseData.resolver = resolve;
              promiseData.rejecter = reject;
            });
          }

          if (syntacticSugar) {
            propertiesMap = arguments[0].properties || arguments[0].p;
            options = arguments[0].options || arguments[0].o;
          } else {
            propertiesMap = arguments[argumentIndex];
            options = arguments[argumentIndex + 1];
          }

          elements = sanitizeElements(elements);

          if (!elements) {
            if (promiseData.promise) {
              if (!propertiesMap || !options || options.promiseRejectEmpty !== false) {
                promiseData.rejecter();
              } else {
                promiseData.resolver();
              }
            }

            return;
          }
          /* The length of the element set (in the form of a nodeList or an array of elements) is defaulted to 1 in case a
           single raw DOM element is passed in (which doesn't contain a length property). */


          var elementsLength = elements.length,
              elementsIndex = 0;
          /***************************
           Argument Overloading
           ***************************/

          /* Support is included for jQuery's argument overloading: $.animate(propertyMap [, duration] [, easing] [, complete]).
           Overloading is detected by checking for the absence of an object being passed into options. */

          /* Note: The stop/finish/pause/resume actions do not accept animation options, and are therefore excluded from this check. */

          if (!/^(stop|finish|finishAll|pause|resume)$/i.test(propertiesMap) && !$.isPlainObject(options)) {
            /* The utility function shifts all arguments one position to the right, so we adjust for that offset. */
            var startingArgumentPosition = argumentIndex + 1;
            options = {};
            /* Iterate through all options arguments */

            for (var i = startingArgumentPosition; i < arguments.length; i++) {
              /* Treat a number as a duration. Parse it out. */

              /* Note: The following RegEx will return true if passed an array with a number as its first item.
               Thus, arrays are skipped from this check. */
              if (!Type.isArray(arguments[i]) && (/^(fast|normal|slow)$/i.test(arguments[i]) || /^\d/.test(arguments[i]))) {
                options.duration = arguments[i];
                /* Treat strings and arrays as easings. */
              } else if (Type.isString(arguments[i]) || Type.isArray(arguments[i])) {
                options.easing = arguments[i];
                /* Treat a function as a complete callback. */
              } else if (Type.isFunction(arguments[i])) {
                options.complete = arguments[i];
              }
            }
          }
          /*********************
           Action Detection
           *********************/

          /* Velocity's behavior is categorized into "actions": Elements can either be specially scrolled into view,
           or they can be started, stopped, paused, resumed, or reversed . If a literal or referenced properties map is passed in as Velocity's
           first argument, the associated action is "start". Alternatively, "scroll", "reverse", "pause", "resume" or "stop" can be passed in 
           instead of a properties map. */


          var action;

          switch (propertiesMap) {
            case "scroll":
              action = "scroll";
              break;

            case "reverse":
              action = "reverse";
              break;

            case "pause":
              /*******************
               Action: Pause
               *******************/
              var currentTime = new Date().getTime();
              /* Handle delay timers */

              $.each(elements, function (i, element) {
                pauseDelayOnElement(element, currentTime);
              });
              /* Pause and Resume are call-wide (not on a per element basis). Thus, calling pause or resume on a 
               single element will cause any calls that containt tweens for that element to be paused/resumed
               as well. */

              /* Iterate through all calls and pause any that contain any of our elements */

              $.each(Velocity.State.calls, function (i, activeCall) {
                var found = false;
                /* Inactive calls are set to false by the logic inside completeCall(). Skip them. */

                if (activeCall) {
                  /* Iterate through the active call's targeted elements. */
                  $.each(activeCall[1], function (k, activeElement) {
                    var queueName = options === undefined$1 ? "" : options;

                    if (queueName !== true && activeCall[2].queue !== queueName && !(options === undefined$1 && activeCall[2].queue === false)) {
                      return true;
                    }
                    /* Iterate through the calls targeted by the stop command. */


                    $.each(elements, function (l, element) {
                      /* Check that this call was applied to the target element. */
                      if (element === activeElement) {
                        /* Set call to paused */
                        activeCall[5] = {
                          resume: false
                        };
                        /* Once we match an element, we can bounce out to the next call entirely */

                        found = true;
                        return false;
                      }
                    });
                    /* Proceed to check next call if we have already matched */

                    if (found) {
                      return false;
                    }
                  });
                }
              });
              /* Since pause creates no new tweens, exit out of Velocity. */

              return getChain();

            case "resume":
              /*******************
               Action: Resume
               *******************/

              /* Handle delay timers */
              $.each(elements, function (i, element) {
                resumeDelayOnElement(element);
              });
              /* Pause and Resume are call-wide (not on a per elemnt basis). Thus, calling pause or resume on a 
               single element will cause any calls that containt tweens for that element to be paused/resumed
               as well. */

              /* Iterate through all calls and pause any that contain any of our elements */

              $.each(Velocity.State.calls, function (i, activeCall) {
                var found = false;
                /* Inactive calls are set to false by the logic inside completeCall(). Skip them. */

                if (activeCall) {
                  /* Iterate through the active call's targeted elements. */
                  $.each(activeCall[1], function (k, activeElement) {
                    var queueName = options === undefined$1 ? "" : options;

                    if (queueName !== true && activeCall[2].queue !== queueName && !(options === undefined$1 && activeCall[2].queue === false)) {
                      return true;
                    }
                    /* Skip any calls that have never been paused */


                    if (!activeCall[5]) {
                      return true;
                    }
                    /* Iterate through the calls targeted by the stop command. */


                    $.each(elements, function (l, element) {
                      /* Check that this call was applied to the target element. */
                      if (element === activeElement) {
                        /* Flag a pause object to be resumed, which will occur during the next tick. In
                         addition, the pause object will at that time be deleted */
                        activeCall[5].resume = true;
                        /* Once we match an element, we can bounce out to the next call entirely */

                        found = true;
                        return false;
                      }
                    });
                    /* Proceed to check next call if we have already matched */

                    if (found) {
                      return false;
                    }
                  });
                }
              });
              /* Since resume creates no new tweens, exit out of Velocity. */

              return getChain();

            case "finish":
            case "finishAll":
            case "stop":
              /*******************
               Action: Stop
               *******************/

              /* Clear the currently-active delay on each targeted element. */
              $.each(elements, function (i, element) {
                if (Data(element) && Data(element).delayTimer) {
                  /* Stop the timer from triggering its cached next() function. */
                  clearTimeout(Data(element).delayTimer.setTimeout);
                  /* Manually call the next() function so that the subsequent queue items can progress. */

                  if (Data(element).delayTimer.next) {
                    Data(element).delayTimer.next();
                  }

                  delete Data(element).delayTimer;
                }
                /* If we want to finish everything in the queue, we have to iterate through it
                 and call each function. This will make them active calls below, which will
                 cause them to be applied via the duration setting. */


                if (propertiesMap === "finishAll" && (options === true || Type.isString(options))) {
                  /* Iterate through the items in the element's queue. */
                  $.each($.queue(element, Type.isString(options) ? options : ""), function (_, item) {
                    /* The queue array can contain an "inprogress" string, which we skip. */
                    if (Type.isFunction(item)) {
                      item();
                    }
                  });
                  /* Clearing the $.queue() array is achieved by resetting it to []. */

                  $.queue(element, Type.isString(options) ? options : "", []);
                }
              });
              var callsToStop = [];
              /* When the stop action is triggered, the elements' currently active call is immediately stopped. The active call might have
               been applied to multiple elements, in which case all of the call's elements will be stopped. When an element
               is stopped, the next item in its animation queue is immediately triggered. */

              /* An additional argument may be passed in to clear an element's remaining queued calls. Either true (which defaults to the "fx" queue)
               or a custom queue string can be passed in. */

              /* Note: The stop command runs prior to Velocity's Queueing phase since its behavior is intended to take effect *immediately*,
               regardless of the element's current queue state. */

              /* Iterate through every active call. */

              $.each(Velocity.State.calls, function (i, activeCall) {
                /* Inactive calls are set to false by the logic inside completeCall(). Skip them. */
                if (activeCall) {
                  /* Iterate through the active call's targeted elements. */
                  $.each(activeCall[1], function (k, activeElement) {
                    /* If true was passed in as a secondary argument, clear absolutely all calls on this element. Otherwise, only
                     clear calls associated with the relevant queue. */

                    /* Call stopping logic works as follows:
                     - options === true --> stop current default queue calls (and queue:false calls), including remaining queued ones.
                     - options === undefined --> stop current queue:"" call and all queue:false calls.
                     - options === false --> stop only queue:false calls.
                     - options === "custom" --> stop current queue:"custom" call, including remaining queued ones (there is no functionality to only clear the currently-running queue:"custom" call). */
                    var queueName = options === undefined$1 ? "" : options;

                    if (queueName !== true && activeCall[2].queue !== queueName && !(options === undefined$1 && activeCall[2].queue === false)) {
                      return true;
                    }
                    /* Iterate through the calls targeted by the stop command. */


                    $.each(elements, function (l, element) {
                      /* Check that this call was applied to the target element. */
                      if (element === activeElement) {
                        /* Optionally clear the remaining queued calls. If we're doing "finishAll" this won't find anything,
                         due to the queue-clearing above. */
                        if (options === true || Type.isString(options)) {
                          /* Iterate through the items in the element's queue. */
                          $.each($.queue(element, Type.isString(options) ? options : ""), function (_, item) {
                            /* The queue array can contain an "inprogress" string, which we skip. */
                            if (Type.isFunction(item)) {
                              /* Pass the item's callback a flag indicating that we want to abort from the queue call.
                               (Specifically, the queue will resolve the call's associated promise then abort.)  */
                              item(null, true);
                            }
                          });
                          /* Clearing the $.queue() array is achieved by resetting it to []. */

                          $.queue(element, Type.isString(options) ? options : "", []);
                        }

                        if (propertiesMap === "stop") {
                          /* Since "reverse" uses cached start values (the previous call's endValues), these values must be
                           changed to reflect the final value that the elements were actually tweened to. */

                          /* Note: If only queue:false/queue:"custom" animations are currently running on an element, it won't have a tweensContainer
                           object. Also, queue:false/queue:"custom" animations can't be reversed. */
                          var data = Data(element);

                          if (data && data.tweensContainer && (queueName === true || queueName === "")) {
                            $.each(data.tweensContainer, function (m, activeTween) {
                              activeTween.endValue = activeTween.currentValue;
                            });
                          }

                          callsToStop.push(i);
                        } else if (propertiesMap === "finish" || propertiesMap === "finishAll") {
                          /* To get active tweens to finish immediately, we forcefully shorten their durations to 1ms so that
                           they finish upon the next rAf tick then proceed with normal call completion logic. */
                          activeCall[2].duration = 1;
                        }
                      }
                    });
                  });
                }
              });
              /* Prematurely call completeCall() on each matched active call. Pass an additional flag for "stop" to indicate
               that the complete callback and display:none setting should be skipped since we're completing prematurely. */

              if (propertiesMap === "stop") {
                $.each(callsToStop, function (i, j) {
                  completeCall(j, true);
                });

                if (promiseData.promise) {
                  /* Immediately resolve the promise associated with this stop call since stop runs synchronously. */
                  promiseData.resolver(elements);
                }
              }
              /* Since we're stopping, and not proceeding with queueing, exit out of Velocity. */


              return getChain();

            default:
              /* Treat a non-empty plain object as a literal properties map. */
              if ($.isPlainObject(propertiesMap) && !Type.isEmptyObject(propertiesMap)) {
                action = "start";
                /****************
                 Redirects
                 ****************/

                /* Check if a string matches a registered redirect (see Redirects above). */
              } else if (Type.isString(propertiesMap) && Velocity.Redirects[propertiesMap]) {
                opts = $.extend({}, options);
                var durationOriginal = opts.duration,
                    delayOriginal = opts.delay || 0;
                /* If the backwards option was passed in, reverse the element set so that elements animate from the last to the first. */

                if (opts.backwards === true) {
                  elements = $.extend(true, [], elements).reverse();
                }
                /* Individually trigger the redirect for each element in the set to prevent users from having to handle iteration logic in their redirect. */


                $.each(elements, function (elementIndex, element) {
                  /* If the stagger option was passed in, successively delay each element by the stagger value (in ms). Retain the original delay value. */
                  if (parseFloat(opts.stagger)) {
                    opts.delay = delayOriginal + parseFloat(opts.stagger) * elementIndex;
                  } else if (Type.isFunction(opts.stagger)) {
                    opts.delay = delayOriginal + opts.stagger.call(element, elementIndex, elementsLength);
                  }
                  /* If the drag option was passed in, successively increase/decrease (depending on the presense of opts.backwards)
                   the duration of each element's animation, using floors to prevent producing very short durations. */


                  if (opts.drag) {
                    /* Default the duration of UI pack effects (callouts and transitions) to 1000ms instead of the usual default duration of 400ms. */
                    opts.duration = parseFloat(durationOriginal) || (/^(callout|transition)/.test(propertiesMap) ? 1000 : DURATION_DEFAULT);
                    /* For each element, take the greater duration of: A) animation completion percentage relative to the original duration,
                     B) 75% of the original duration, or C) a 200ms fallback (in case duration is already set to a low value).
                     The end result is a baseline of 75% of the redirect's duration that increases/decreases as the end of the element set is approached. */

                    opts.duration = Math.max(opts.duration * (opts.backwards ? 1 - elementIndex / elementsLength : (elementIndex + 1) / elementsLength), opts.duration * 0.75, 200);
                  }
                  /* Pass in the call's opts object so that the redirect can optionally extend it. It defaults to an empty object instead of null to
                   reduce the opts checking logic required inside the redirect. */


                  Velocity.Redirects[propertiesMap].call(element, element, opts || {}, elementIndex, elementsLength, elements, promiseData.promise ? promiseData : undefined$1);
                });
                /* Since the animation logic resides within the redirect's own code, abort the remainder of this call.
                 (The performance overhead up to this point is virtually non-existant.) */

                /* Note: The jQuery call chain is kept intact by returning the complete element set. */

                return getChain();
              } else {
                var abortError = "Velocity: First argument (" + propertiesMap + ") was not a property map, a known action, or a registered redirect. Aborting.";

                if (promiseData.promise) {
                  promiseData.rejecter(new Error(abortError));
                } else if (window.console) {
                  console.log(abortError);
                }

                return getChain();
              }

          }
          /**************************
           Call-Wide Variables
           **************************/

          /* A container for CSS unit conversion ratios (e.g. %, rem, and em ==> px) that is used to cache ratios across all elements
           being animated in a single Velocity call. Calculating unit ratios necessitates DOM querying and updating, and is therefore
           avoided (via caching) wherever possible. This container is call-wide instead of page-wide to avoid the risk of using stale
           conversion metrics across Velocity animations that are not immediately consecutively chained. */


          var callUnitConversionData = {
            lastParent: null,
            lastPosition: null,
            lastFontSize: null,
            lastPercentToPxWidth: null,
            lastPercentToPxHeight: null,
            lastEmToPx: null,
            remToPx: null,
            vwToPx: null,
            vhToPx: null
          };
          /* A container for all the ensuing tween data and metadata associated with this call. This container gets pushed to the page-wide
           Velocity.State.calls array that is processed during animation ticking. */

          var call = [];
          /************************
           Element Processing
           ************************/

          /* Element processing consists of three parts -- data processing that cannot go stale and data processing that *can* go stale (i.e. third-party style modifications):
           1) Pre-Queueing: Element-wide variables, including the element's data storage, are instantiated. Call options are prepared. If triggered, the Stop action is executed.
           2) Queueing: The logic that runs once this call has reached its point of execution in the element's $.queue() stack. Most logic is placed here to avoid risking it becoming stale.
           3) Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
           `elementArrayIndex` allows passing index of the element in the original array to value functions.
           If `elementsIndex` were used instead the index would be determined by the elements' per-element queue.
           */

          function processElement(element, elementArrayIndex) {
            /*************************
             Part I: Pre-Queueing
             *************************/

            /***************************
             Element-Wide Variables
             ***************************/
            var
            /* The runtime opts object is the extension of the current call's options and Velocity's page-wide option defaults. */
            opts = $.extend({}, Velocity.defaults, options),

            /* A container for the processed data associated with each property in the propertyMap.
             (Each property in the map produces its own "tween".) */
            tweensContainer = {},
                elementUnitConversionData;
            /******************
             Element Init
             ******************/

            if (Data(element) === undefined$1) {
              Velocity.init(element);
            }
            /******************
             Option: Delay
             ******************/

            /* Since queue:false doesn't respect the item's existing queue, we avoid injecting its delay here (it's set later on). */

            /* Note: Velocity rolls its own delay function since jQuery doesn't have a utility alias for $.fn.delay()
             (and thus requires jQuery element creation, which we avoid since its overhead includes DOM querying). */


            if (parseFloat(opts.delay) && opts.queue !== false) {
              $.queue(element, opts.queue, function (next, clearQueue) {
                if (clearQueue === true) {
                  /* Do not continue with animation queueing. */
                  return true;
                }
                /* This is a flag used to indicate to the upcoming completeCall() function that this queue entry was initiated by Velocity. See completeCall() for further details. */


                Velocity.velocityQueueEntryFlag = true;
                /* The ensuing queue item (which is assigned to the "next" argument that $.queue() automatically passes in) will be triggered after a setTimeout delay.
                 The setTimeout is stored so that it can be subjected to clearTimeout() if this animation is prematurely stopped via Velocity's "stop" command, and
                 delayBegin/delayTime is used to ensure we can "pause" and "resume" a tween that is still mid-delay. */

                /* Temporarily store delayed elements to facilite access for global pause/resume */

                var callIndex = Velocity.State.delayedElements.count++;
                Velocity.State.delayedElements[callIndex] = element;

                var delayComplete = function (index) {
                  return function () {
                    /* Clear the temporary element */
                    Velocity.State.delayedElements[index] = false;
                    /* Finally, issue the call */

                    next();
                  };
                }(callIndex);

                Data(element).delayBegin = new Date().getTime();
                Data(element).delay = parseFloat(opts.delay);
                Data(element).delayTimer = {
                  setTimeout: setTimeout(next, parseFloat(opts.delay)),
                  next: delayComplete
                };
              });
            }
            /*********************
             Option: Duration
             *********************/

            /* Support for jQuery's named durations. */


            switch (opts.duration.toString().toLowerCase()) {
              case "fast":
                opts.duration = 200;
                break;

              case "normal":
                opts.duration = DURATION_DEFAULT;
                break;

              case "slow":
                opts.duration = 600;
                break;

              default:
                /* Remove the potential "ms" suffix and default to 1 if the user is attempting to set a duration of 0 (in order to produce an immediate style change). */
                opts.duration = parseFloat(opts.duration) || 1;
            }
            /************************
             Global Option: Mock
             ************************/


            if (Velocity.mock !== false) {
              /* In mock mode, all animations are forced to 1ms so that they occur immediately upon the next rAF tick.
               Alternatively, a multiplier can be passed in to time remap all delays and durations. */
              if (Velocity.mock === true) {
                opts.duration = opts.delay = 1;
              } else {
                opts.duration *= parseFloat(Velocity.mock) || 1;
                opts.delay *= parseFloat(Velocity.mock) || 1;
              }
            }
            /*******************
             Option: Easing
             *******************/


            opts.easing = getEasing(opts.easing, opts.duration);
            /**********************
             Option: Callbacks
             **********************/

            /* Callbacks must functions. Otherwise, default to null. */

            if (opts.begin && !Type.isFunction(opts.begin)) {
              opts.begin = null;
            }

            if (opts.progress && !Type.isFunction(opts.progress)) {
              opts.progress = null;
            }

            if (opts.complete && !Type.isFunction(opts.complete)) {
              opts.complete = null;
            }
            /*********************************
             Option: Display & Visibility
             *********************************/

            /* Refer to Velocity's documentation (VelocityJS.org/#displayAndVisibility) for a description of the display and visibility options' behavior. */

            /* Note: We strictly check for undefined instead of falsiness because display accepts an empty string value. */


            if (opts.display !== undefined$1 && opts.display !== null) {
              opts.display = opts.display.toString().toLowerCase();
              /* Users can pass in a special "auto" value to instruct Velocity to set the element to its default display value. */

              if (opts.display === "auto") {
                opts.display = Velocity.CSS.Values.getDisplayType(element);
              }
            }

            if (opts.visibility !== undefined$1 && opts.visibility !== null) {
              opts.visibility = opts.visibility.toString().toLowerCase();
            }
            /**********************
             Option: mobileHA
             **********************/

            /* When set to true, and if this is a mobile device, mobileHA automatically enables hardware acceleration (via a null transform hack)
             on animating elements. HA is removed from the element at the completion of its animation. */

            /* Note: Android Gingerbread doesn't support HA. If a null transform hack (mobileHA) is in fact set, it will prevent other tranform subproperties from taking effect. */

            /* Note: You can read more about the use of mobileHA in Velocity's documentation: VelocityJS.org/#mobileHA. */


            opts.mobileHA = opts.mobileHA && Velocity.State.isMobile && !Velocity.State.isGingerbread;
            /***********************
             Part II: Queueing
             ***********************/

            /* When a set of elements is targeted by a Velocity call, the set is broken up and each element has the current Velocity call individually queued onto it.
             In this way, each element's existing queue is respected; some elements may already be animating and accordingly should not have this current Velocity call triggered immediately. */

            /* In each queue, tween data is processed for each animating property then pushed onto the call-wide calls array. When the last element in the set has had its tweens processed,
             the call array is pushed to Velocity.State.calls for live processing by the requestAnimationFrame tick. */

            function buildQueue(next) {
              var data, lastTweensContainer;
              /*******************
               Option: Begin
               *******************/

              /* The begin callback is fired once per call -- not once per elemenet -- and is passed the full raw DOM element set as both its context and its first argument. */

              if (opts.begin && elementsIndex === 0) {
                /* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
                try {
                  opts.begin.call(elements, elements);
                } catch (error) {
                  setTimeout(function () {
                    throw error;
                  }, 1);
                }
              }
              /*****************************************
               Tween Data Construction (for Scroll)
               *****************************************/

              /* Note: In order to be subjected to chaining and animation options, scroll's tweening is routed through Velocity as if it were a standard CSS property animation. */


              if (action === "scroll") {
                /* The scroll action uniquely takes an optional "offset" option -- specified in pixels -- that offsets the targeted scroll position. */
                var scrollDirection = /^x$/i.test(opts.axis) ? "Left" : "Top",
                    scrollOffset = parseFloat(opts.offset) || 0,
                    scrollPositionCurrent,
                    scrollPositionCurrentAlternate,
                    scrollPositionEnd;
                /* Scroll also uniquely takes an optional "container" option, which indicates the parent element that should be scrolled --
                 as opposed to the browser window itself. This is useful for scrolling toward an element that's inside an overflowing parent element. */

                if (opts.container) {
                  /* Ensure that either a jQuery object or a raw DOM element was passed in. */
                  if (Type.isWrapped(opts.container) || Type.isNode(opts.container)) {
                    /* Extract the raw DOM element from the jQuery wrapper. */
                    opts.container = opts.container[0] || opts.container;
                    /* Note: Unlike other properties in Velocity, the browser's scroll position is never cached since it so frequently changes
                     (due to the user's natural interaction with the page). */

                    scrollPositionCurrent = opts.container["scroll" + scrollDirection];
                    /* GET */

                    /* $.position() values are relative to the container's currently viewable area (without taking into account the container's true dimensions
                     -- say, for example, if the container was not overflowing). Thus, the scroll end value is the sum of the child element's position *and*
                     the scroll container's current scroll position. */

                    scrollPositionEnd = scrollPositionCurrent + $(element).position()[scrollDirection.toLowerCase()] + scrollOffset;
                    /* GET */

                    /* If a value other than a jQuery object or a raw DOM element was passed in, default to null so that this option is ignored. */
                  } else {
                    opts.container = null;
                  }
                } else {
                  /* If the window itself is being scrolled -- not a containing element -- perform a live scroll position lookup using
                   the appropriate cached property names (which differ based on browser type). */
                  scrollPositionCurrent = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + scrollDirection]];
                  /* GET */

                  /* When scrolling the browser window, cache the alternate axis's current value since window.scrollTo() doesn't let us change only one value at a time. */

                  scrollPositionCurrentAlternate = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + (scrollDirection === "Left" ? "Top" : "Left")]];
                  /* GET */

                  /* Unlike $.position(), $.offset() values are relative to the browser window's true dimensions -- not merely its currently viewable area --
                   and therefore end values do not need to be compounded onto current values. */

                  scrollPositionEnd = $(element).offset()[scrollDirection.toLowerCase()] + scrollOffset;
                  /* GET */
                }
                /* Since there's only one format that scroll's associated tweensContainer can take, we create it manually. */


                tweensContainer = {
                  scroll: {
                    rootPropertyValue: false,
                    startValue: scrollPositionCurrent,
                    currentValue: scrollPositionCurrent,
                    endValue: scrollPositionEnd,
                    unitType: "",
                    easing: opts.easing,
                    scrollData: {
                      container: opts.container,
                      direction: scrollDirection,
                      alternateValue: scrollPositionCurrentAlternate
                    }
                  },
                  element: element
                };

                if (Velocity.debug) {
                  console.log("tweensContainer (scroll): ", tweensContainer.scroll, element);
                }
                /******************************************
                 Tween Data Construction (for Reverse)
                 ******************************************/

                /* Reverse acts like a "start" action in that a property map is animated toward. The only difference is
                 that the property map used for reverse is the inverse of the map used in the previous call. Thus, we manipulate
                 the previous call to construct our new map: use the previous map's end values as our new map's start values. Copy over all other data. */

                /* Note: Reverse can be directly called via the "reverse" parameter, or it can be indirectly triggered via the loop option. (Loops are composed of multiple reverses.) */

                /* Note: Reverse calls do not need to be consecutively chained onto a currently-animating element in order to operate on cached values;
                 there is no harm to reverse being called on a potentially stale data cache since reverse's behavior is simply defined
                 as reverting to the element's values as they were prior to the previous *Velocity* call. */

              } else if (action === "reverse") {
                data = Data(element);
                /* Abort if there is no prior animation data to reverse to. */

                if (!data) {
                  return;
                }

                if (!data.tweensContainer) {
                  /* Dequeue the element so that this queue entry releases itself immediately, allowing subsequent queue entries to run. */
                  $.dequeue(element, opts.queue);
                  return;
                } else {
                  /*********************
                   Options Parsing
                   *********************/

                  /* If the element was hidden via the display option in the previous call,
                   revert display to "auto" prior to reversal so that the element is visible again. */
                  if (data.opts.display === "none") {
                    data.opts.display = "auto";
                  }

                  if (data.opts.visibility === "hidden") {
                    data.opts.visibility = "visible";
                  }
                  /* If the loop option was set in the previous call, disable it so that "reverse" calls aren't recursively generated.
                   Further, remove the previous call's callback options; typically, users do not want these to be refired. */


                  data.opts.loop = false;
                  data.opts.begin = null;
                  data.opts.complete = null;
                  /* Since we're extending an opts object that has already been extended with the defaults options object,
                   we remove non-explicitly-defined properties that are auto-assigned values. */

                  if (!options.easing) {
                    delete opts.easing;
                  }

                  if (!options.duration) {
                    delete opts.duration;
                  }
                  /* The opts object used for reversal is an extension of the options object optionally passed into this
                   reverse call plus the options used in the previous Velocity call. */


                  opts = $.extend({}, data.opts, opts);
                  /*************************************
                   Tweens Container Reconstruction
                   *************************************/

                  /* Create a deepy copy (indicated via the true flag) of the previous call's tweensContainer. */

                  lastTweensContainer = $.extend(true, {}, data ? data.tweensContainer : null);
                  /* Manipulate the previous tweensContainer by replacing its end values and currentValues with its start values. */

                  for (var lastTween in lastTweensContainer) {
                    /* In addition to tween data, tweensContainers contain an element property that we ignore here. */
                    if (lastTweensContainer.hasOwnProperty(lastTween) && lastTween !== "element") {
                      var lastStartValue = lastTweensContainer[lastTween].startValue;
                      lastTweensContainer[lastTween].startValue = lastTweensContainer[lastTween].currentValue = lastTweensContainer[lastTween].endValue;
                      lastTweensContainer[lastTween].endValue = lastStartValue;
                      /* Easing is the only option that embeds into the individual tween data (since it can be defined on a per-property basis).
                       Accordingly, every property's easing value must be updated when an options object is passed in with a reverse call.
                       The side effect of this extensibility is that all per-property easing values are forcefully reset to the new value. */

                      if (!Type.isEmptyObject(options)) {
                        lastTweensContainer[lastTween].easing = opts.easing;
                      }

                      if (Velocity.debug) {
                        console.log("reverse tweensContainer (" + lastTween + "): " + JSON.stringify(lastTweensContainer[lastTween]), element);
                      }
                    }
                  }

                  tweensContainer = lastTweensContainer;
                }
                /*****************************************
                 Tween Data Construction (for Start)
                 *****************************************/

              } else if (action === "start") {
                /*************************
                 Value Transferring
                 *************************/

                /* If this queue entry follows a previous Velocity-initiated queue entry *and* if this entry was created
                 while the element was in the process of being animated by Velocity, then this current call is safe to use
                 the end values from the prior call as its start values. Velocity attempts to perform this value transfer
                 process whenever possible in order to avoid requerying the DOM. */

                /* If values aren't transferred from a prior call and start values were not forcefed by the user (more on this below),
                 then the DOM is queried for the element's current values as a last resort. */

                /* Note: Conversely, animation reversal (and looping) *always* perform inter-call value transfers; they never requery the DOM. */
                data = Data(element);
                /* The per-element isAnimating flag is used to indicate whether it's safe (i.e. the data isn't stale)
                 to transfer over end values to use as start values. If it's set to true and there is a previous
                 Velocity call to pull values from, do so. */

                if (data && data.tweensContainer && data.isAnimating === true) {
                  lastTweensContainer = data.tweensContainer;
                }
                /***************************
                 Tween Data Calculation
                 ***************************/

                /* This function parses property data and defaults endValue, easing, and startValue as appropriate. */

                /* Property map values can either take the form of 1) a single value representing the end value,
                 or 2) an array in the form of [ endValue, [, easing] [, startValue] ].
                 The optional third parameter is a forcefed startValue to be used instead of querying the DOM for
                 the element's current value. Read Velocity's docmentation to learn more about forcefeeding: VelocityJS.org/#forcefeeding */


                var parsePropertyValue = function parsePropertyValue(valueData, skipResolvingEasing) {
                  var endValue, easing, startValue;
                  /* If we have a function as the main argument then resolve it first, in case it returns an array that needs to be split */

                  if (Type.isFunction(valueData)) {
                    valueData = valueData.call(element, elementArrayIndex, elementsLength);
                  }
                  /* Handle the array format, which can be structured as one of three potential overloads:
                   A) [ endValue, easing, startValue ], B) [ endValue, easing ], or C) [ endValue, startValue ] */


                  if (Type.isArray(valueData)) {
                    /* endValue is always the first item in the array. Don't bother validating endValue's value now
                     since the ensuing property cycling logic does that. */
                    endValue = valueData[0];
                    /* Two-item array format: If the second item is a number, function, or hex string, treat it as a
                     start value since easings can only be non-hex strings or arrays. */

                    if (!Type.isArray(valueData[1]) && /^[\d-]/.test(valueData[1]) || Type.isFunction(valueData[1]) || CSS.RegEx.isHex.test(valueData[1])) {
                      startValue = valueData[1];
                      /* Two or three-item array: If the second item is a non-hex string easing name or an array, treat it as an easing. */
                    } else if (Type.isString(valueData[1]) && !CSS.RegEx.isHex.test(valueData[1]) && Velocity.Easings[valueData[1]] || Type.isArray(valueData[1])) {
                      easing = skipResolvingEasing ? valueData[1] : getEasing(valueData[1], opts.duration);
                      /* Don't bother validating startValue's value now since the ensuing property cycling logic inherently does that. */

                      startValue = valueData[2];
                    } else {
                      startValue = valueData[1] || valueData[2];
                    }
                    /* Handle the single-value format. */

                  } else {
                    endValue = valueData;
                  }
                  /* Default to the call's easing if a per-property easing type was not defined. */


                  if (!skipResolvingEasing) {
                    easing = easing || opts.easing;
                  }
                  /* If functions were passed in as values, pass the function the current element as its context,
                   plus the element's index and the element set's size as arguments. Then, assign the returned value. */


                  if (Type.isFunction(endValue)) {
                    endValue = endValue.call(element, elementArrayIndex, elementsLength);
                  }

                  if (Type.isFunction(startValue)) {
                    startValue = startValue.call(element, elementArrayIndex, elementsLength);
                  }
                  /* Allow startValue to be left as undefined to indicate to the ensuing code that its value was not forcefed. */


                  return [endValue || 0, easing, startValue];
                };

                var fixPropertyValue = function fixPropertyValue(property, valueData) {
                  /* In case this property is a hook, there are circumstances where we will intend to work on the hook's root property and not the hooked subproperty. */
                  var rootProperty = CSS.Hooks.getRoot(property),
                      rootPropertyValue = false,

                  /* Parse out endValue, easing, and startValue from the property's data. */
                  endValue = valueData[0],
                      easing = valueData[1],
                      startValue = valueData[2],
                      pattern;
                  /**************************
                   Start Value Sourcing
                   **************************/

                  /* Other than for the dummy tween property, properties that are not supported by the browser (and do not have an associated normalization) will
                   inherently produce no style changes when set, so they are skipped in order to decrease animation tick overhead.
                   Property support is determined via prefixCheck(), which returns a false flag when no supported is detected. */

                  /* Note: Since SVG elements have some of their properties directly applied as HTML attributes,
                   there is no way to check for their explicit browser support, and so we skip skip this check for them. */

                  if ((!data || !data.isSVG) && rootProperty !== "tween" && CSS.Names.prefixCheck(rootProperty)[1] === false && CSS.Normalizations.registered[rootProperty] === undefined$1) {
                    if (Velocity.debug) {
                      console.log("Skipping [" + rootProperty + "] due to a lack of browser support.");
                    }

                    return;
                  }
                  /* If the display option is being set to a non-"none" (e.g. "block") and opacity (filter on IE<=8) is being
                   animated to an endValue of non-zero, the user's intention is to fade in from invisible, thus we forcefeed opacity
                   a startValue of 0 if its startValue hasn't already been sourced by value transferring or prior forcefeeding. */


                  if ((opts.display !== undefined$1 && opts.display !== null && opts.display !== "none" || opts.visibility !== undefined$1 && opts.visibility !== "hidden") && /opacity|filter/.test(property) && !startValue && endValue !== 0) {
                    startValue = 0;
                  }
                  /* If values have been transferred from the previous Velocity call, extract the endValue and rootPropertyValue
                   for all of the current call's properties that were *also* animated in the previous call. */

                  /* Note: Value transferring can optionally be disabled by the user via the _cacheValues option. */


                  if (opts._cacheValues && lastTweensContainer && lastTweensContainer[property]) {
                    if (startValue === undefined$1) {
                      startValue = lastTweensContainer[property].endValue + lastTweensContainer[property].unitType;
                    }
                    /* The previous call's rootPropertyValue is extracted from the element's data cache since that's the
                     instance of rootPropertyValue that gets freshly updated by the tweening process, whereas the rootPropertyValue
                     attached to the incoming lastTweensContainer is equal to the root property's value prior to any tweening. */


                    rootPropertyValue = data.rootPropertyValueCache[rootProperty];
                    /* If values were not transferred from a previous Velocity call, query the DOM as needed. */
                  } else {
                    /* Handle hooked properties. */
                    if (CSS.Hooks.registered[property]) {
                      if (startValue === undefined$1) {
                        rootPropertyValue = CSS.getPropertyValue(element, rootProperty);
                        /* GET */

                        /* Note: The following getPropertyValue() call does not actually trigger a DOM query;
                         getPropertyValue() will extract the hook from rootPropertyValue. */

                        startValue = CSS.getPropertyValue(element, property, rootPropertyValue);
                        /* If startValue is already defined via forcefeeding, do not query the DOM for the root property's value;
                         just grab rootProperty's zero-value template from CSS.Hooks. This overwrites the element's actual
                         root property value (if one is set), but this is acceptable since the primary reason users forcefeed is
                         to avoid DOM queries, and thus we likewise avoid querying the DOM for the root property's value. */
                      } else {
                        /* Grab this hook's zero-value template, e.g. "0px 0px 0px black". */
                        rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
                      }
                      /* Handle non-hooked properties that haven't already been defined via forcefeeding. */

                    } else if (startValue === undefined$1) {
                      startValue = CSS.getPropertyValue(element, property);
                      /* GET */
                    }
                  }
                  /**************************
                   Value Data Extraction
                   **************************/


                  var separatedValue,
                      endValueUnitType,
                      startValueUnitType,
                      operator = false;
                  /* Separates a property value into its numeric value and its unit type. */

                  var separateValue = function separateValue(property, value) {
                    var unitType, numericValue;
                    numericValue = (value || "0").toString().toLowerCase()
                    /* Match the unit type at the end of the value. */
                    .replace(/[%A-z]+$/, function (match) {
                      /* Grab the unit type. */
                      unitType = match;
                      /* Strip the unit type off of value. */

                      return "";
                    });
                    /* If no unit type was supplied, assign one that is appropriate for this property (e.g. "deg" for rotateZ or "px" for width). */

                    if (!unitType) {
                      unitType = CSS.Values.getUnitType(property);
                    }

                    return [numericValue, unitType];
                  };

                  if (startValue !== endValue && Type.isString(startValue) && Type.isString(endValue)) {
                    pattern = "";
                    var iStart = 0,
                        // index in startValue
                    iEnd = 0,
                        // index in endValue
                    aStart = [],
                        // array of startValue numbers
                    aEnd = [],
                        // array of endValue numbers
                    inCalc = 0,
                        // Keep track of being inside a "calc()" so we don't duplicate it
                    inRGB = 0,
                        // Keep track of being inside an RGB as we can't use fractional values
                    inRGBA = 0; // Keep track of being inside an RGBA as we must pass fractional for the alpha channel

                    startValue = CSS.Hooks.fixColors(startValue);
                    endValue = CSS.Hooks.fixColors(endValue);

                    while (iStart < startValue.length && iEnd < endValue.length) {
                      var cStart = startValue[iStart],
                          cEnd = endValue[iEnd];

                      if (/[\d\.-]/.test(cStart) && /[\d\.-]/.test(cEnd)) {
                        var tStart = cStart,
                            // temporary character buffer
                        tEnd = cEnd,
                            // temporary character buffer
                        dotStart = ".",
                            // Make sure we can only ever match a single dot in a decimal
                        dotEnd = "."; // Make sure we can only ever match a single dot in a decimal

                        while (++iStart < startValue.length) {
                          cStart = startValue[iStart];

                          if (cStart === dotStart) {
                            dotStart = ".."; // Can never match two characters
                          } else if (!/\d/.test(cStart)) {
                            break;
                          }

                          tStart += cStart;
                        }

                        while (++iEnd < endValue.length) {
                          cEnd = endValue[iEnd];

                          if (cEnd === dotEnd) {
                            dotEnd = ".."; // Can never match two characters
                          } else if (!/\d/.test(cEnd)) {
                            break;
                          }

                          tEnd += cEnd;
                        }

                        var uStart = CSS.Hooks.getUnit(startValue, iStart),
                            // temporary unit type
                        uEnd = CSS.Hooks.getUnit(endValue, iEnd); // temporary unit type

                        iStart += uStart.length;
                        iEnd += uEnd.length;

                        if (uStart === uEnd) {
                          // Same units
                          if (tStart === tEnd) {
                            // Same numbers, so just copy over
                            pattern += tStart + uStart;
                          } else {
                            // Different numbers, so store them
                            pattern += "{" + aStart.length + (inRGB ? "!" : "") + "}" + uStart;
                            aStart.push(parseFloat(tStart));
                            aEnd.push(parseFloat(tEnd));
                          }
                        } else {
                          // Different units, so put into a "calc(from + to)" and animate each side to/from zero
                          var nStart = parseFloat(tStart),
                              nEnd = parseFloat(tEnd);
                          pattern += (inCalc < 5 ? "calc" : "") + "(" + (nStart ? "{" + aStart.length + (inRGB ? "!" : "") + "}" : "0") + uStart + " + " + (nEnd ? "{" + (aStart.length + (nStart ? 1 : 0)) + (inRGB ? "!" : "") + "}" : "0") + uEnd + ")";

                          if (nStart) {
                            aStart.push(nStart);
                            aEnd.push(0);
                          }

                          if (nEnd) {
                            aStart.push(0);
                            aEnd.push(nEnd);
                          }
                        }
                      } else if (cStart === cEnd) {
                        pattern += cStart;
                        iStart++;
                        iEnd++; // Keep track of being inside a calc()

                        if (inCalc === 0 && cStart === "c" || inCalc === 1 && cStart === "a" || inCalc === 2 && cStart === "l" || inCalc === 3 && cStart === "c" || inCalc >= 4 && cStart === "(") {
                          inCalc++;
                        } else if (inCalc && inCalc < 5 || inCalc >= 4 && cStart === ")" && --inCalc < 5) {
                          inCalc = 0;
                        } // Keep track of being inside an rgb() / rgba()


                        if (inRGB === 0 && cStart === "r" || inRGB === 1 && cStart === "g" || inRGB === 2 && cStart === "b" || inRGB === 3 && cStart === "a" || inRGB >= 3 && cStart === "(") {
                          if (inRGB === 3 && cStart === "a") {
                            inRGBA = 1;
                          }

                          inRGB++;
                        } else if (inRGBA && cStart === ",") {
                          if (++inRGBA > 3) {
                            inRGB = inRGBA = 0;
                          }
                        } else if (inRGBA && inRGB < (inRGBA ? 5 : 4) || inRGB >= (inRGBA ? 4 : 3) && cStart === ")" && --inRGB < (inRGBA ? 5 : 4)) {
                          inRGB = inRGBA = 0;
                        }
                      } else {
                        inCalc = 0; // TODO: changing units, fixing colours

                        break;
                      }
                    }

                    if (iStart !== startValue.length || iEnd !== endValue.length) {
                      if (Velocity.debug) {
                        console.error("Trying to pattern match mis-matched strings [\"" + endValue + "\", \"" + startValue + "\"]");
                      }

                      pattern = undefined$1;
                    }

                    if (pattern) {
                      if (aStart.length) {
                        if (Velocity.debug) {
                          console.log("Pattern found \"" + pattern + "\" -> ", aStart, aEnd, "[" + startValue + "," + endValue + "]");
                        }

                        startValue = aStart;
                        endValue = aEnd;
                        endValueUnitType = startValueUnitType = "";
                      } else {
                        pattern = undefined$1;
                      }
                    }
                  }

                  if (!pattern) {
                    /* Separate startValue. */
                    separatedValue = separateValue(property, startValue);
                    startValue = separatedValue[0];
                    startValueUnitType = separatedValue[1];
                    /* Separate endValue, and extract a value operator (e.g. "+=", "-=") if one exists. */

                    separatedValue = separateValue(property, endValue);
                    endValue = separatedValue[0].replace(/^([+-\/*])=/, function (match, subMatch) {
                      operator = subMatch;
                      /* Strip the operator off of the value. */

                      return "";
                    });
                    endValueUnitType = separatedValue[1];
                    /* Parse float values from endValue and startValue. Default to 0 if NaN is returned. */

                    startValue = parseFloat(startValue) || 0;
                    endValue = parseFloat(endValue) || 0;
                    /***************************************
                     Property-Specific Value Conversion
                     ***************************************/

                    /* Custom support for properties that don't actually accept the % unit type, but where pollyfilling is trivial and relatively foolproof. */

                    if (endValueUnitType === "%") {
                      /* A %-value fontSize/lineHeight is relative to the parent's fontSize (as opposed to the parent's dimensions),
                       which is identical to the em unit's behavior, so we piggyback off of that. */
                      if (/^(fontSize|lineHeight)$/.test(property)) {
                        /* Convert % into an em decimal value. */
                        endValue = endValue / 100;
                        endValueUnitType = "em";
                        /* For scaleX and scaleY, convert the value into its decimal format and strip off the unit type. */
                      } else if (/^scale/.test(property)) {
                        endValue = endValue / 100;
                        endValueUnitType = "";
                        /* For RGB components, take the defined percentage of 255 and strip off the unit type. */
                      } else if (/(Red|Green|Blue)$/i.test(property)) {
                        endValue = endValue / 100 * 255;
                        endValueUnitType = "";
                      }
                    }
                  }
                  /***************************
                   Unit Ratio Calculation
                   ***************************/

                  /* When queried, the browser returns (most) CSS property values in pixels. Therefore, if an endValue with a unit type of
                   %, em, or rem is animated toward, startValue must be converted from pixels into the same unit type as endValue in order
                   for value manipulation logic (increment/decrement) to proceed. Further, if the startValue was forcefed or transferred
                   from a previous call, startValue may also not be in pixels. Unit conversion logic therefore consists of two steps:
                   1) Calculating the ratio of %/em/rem/vh/vw relative to pixels
                   2) Converting startValue into the same unit of measurement as endValue based on these ratios. */

                  /* Unit conversion ratios are calculated by inserting a sibling node next to the target node, copying over its position property,
                   setting values with the target unit type then comparing the returned pixel value. */

                  /* Note: Even if only one of these unit types is being animated, all unit ratios are calculated at once since the overhead
                   of batching the SETs and GETs together upfront outweights the potential overhead
                   of layout thrashing caused by re-querying for uncalculated ratios for subsequently-processed properties. */

                  /* Todo: Shift this logic into the calls' first tick instance so that it's synced with RAF. */


                  var calculateUnitRatios = function calculateUnitRatios() {
                    /************************
                     Same Ratio Checks
                     ************************/

                    /* The properties below are used to determine whether the element differs sufficiently from this call's
                     previously iterated element to also differ in its unit conversion ratios. If the properties match up with those
                     of the prior element, the prior element's conversion ratios are used. Like most optimizations in Velocity,
                     this is done to minimize DOM querying. */
                    var sameRatioIndicators = {
                      myParent: element.parentNode || document.body,

                      /* GET */
                      position: CSS.getPropertyValue(element, "position"),

                      /* GET */
                      fontSize: CSS.getPropertyValue(element, "fontSize")
                      /* GET */

                    },

                    /* Determine if the same % ratio can be used. % is based on the element's position value and its parent's width and height dimensions. */
                    samePercentRatio = sameRatioIndicators.position === callUnitConversionData.lastPosition && sameRatioIndicators.myParent === callUnitConversionData.lastParent,

                    /* Determine if the same em ratio can be used. em is relative to the element's fontSize. */
                    sameEmRatio = sameRatioIndicators.fontSize === callUnitConversionData.lastFontSize;
                    /* Store these ratio indicators call-wide for the next element to compare against. */

                    callUnitConversionData.lastParent = sameRatioIndicators.myParent;
                    callUnitConversionData.lastPosition = sameRatioIndicators.position;
                    callUnitConversionData.lastFontSize = sameRatioIndicators.fontSize;
                    /***************************
                     Element-Specific Units
                     ***************************/

                    /* Note: IE8 rounds to the nearest pixel when returning CSS values, thus we perform conversions using a measurement
                     of 100 (instead of 1) to give our ratios a precision of at least 2 decimal values. */

                    var measurement = 100,
                        unitRatios = {};

                    if (!sameEmRatio || !samePercentRatio) {
                      var dummy = data && data.isSVG ? document.createElementNS("http://www.w3.org/2000/svg", "rect") : document.createElement("div");
                      Velocity.init(dummy);
                      sameRatioIndicators.myParent.appendChild(dummy);
                      /* To accurately and consistently calculate conversion ratios, the element's cascaded overflow and box-sizing are stripped.
                       Similarly, since width/height can be artificially constrained by their min-/max- equivalents, these are controlled for as well. */

                      /* Note: Overflow must be also be controlled for per-axis since the overflow property overwrites its per-axis values. */

                      $.each(["overflow", "overflowX", "overflowY"], function (i, property) {
                        Velocity.CSS.setPropertyValue(dummy, property, "hidden");
                      });
                      Velocity.CSS.setPropertyValue(dummy, "position", sameRatioIndicators.position);
                      Velocity.CSS.setPropertyValue(dummy, "fontSize", sameRatioIndicators.fontSize);
                      Velocity.CSS.setPropertyValue(dummy, "boxSizing", "content-box");
                      /* width and height act as our proxy properties for measuring the horizontal and vertical % ratios. */

                      $.each(["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height"], function (i, property) {
                        Velocity.CSS.setPropertyValue(dummy, property, measurement + "%");
                      });
                      /* paddingLeft arbitrarily acts as our proxy property for the em ratio. */

                      Velocity.CSS.setPropertyValue(dummy, "paddingLeft", measurement + "em");
                      /* Divide the returned value by the measurement to get the ratio between 1% and 1px. Default to 1 since working with 0 can produce Infinite. */

                      unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth = (parseFloat(CSS.getPropertyValue(dummy, "width", null, true)) || 1) / measurement;
                      /* GET */

                      unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight = (parseFloat(CSS.getPropertyValue(dummy, "height", null, true)) || 1) / measurement;
                      /* GET */

                      unitRatios.emToPx = callUnitConversionData.lastEmToPx = (parseFloat(CSS.getPropertyValue(dummy, "paddingLeft")) || 1) / measurement;
                      /* GET */

                      sameRatioIndicators.myParent.removeChild(dummy);
                    } else {
                      unitRatios.emToPx = callUnitConversionData.lastEmToPx;
                      unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth;
                      unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight;
                    }
                    /***************************
                     Element-Agnostic Units
                     ***************************/

                    /* Whereas % and em ratios are determined on a per-element basis, the rem unit only needs to be checked
                     once per call since it's exclusively dependant upon document.body's fontSize. If this is the first time
                     that calculateUnitRatios() is being run during this call, remToPx will still be set to its default value of null,
                     so we calculate it now. */


                    if (callUnitConversionData.remToPx === null) {
                      /* Default to browsers' default fontSize of 16px in the case of 0. */
                      callUnitConversionData.remToPx = parseFloat(CSS.getPropertyValue(document.body, "fontSize")) || 16;
                      /* GET */
                    }
                    /* Similarly, viewport units are %-relative to the window's inner dimensions. */


                    if (callUnitConversionData.vwToPx === null) {
                      callUnitConversionData.vwToPx = parseFloat(window.innerWidth) / 100;
                      /* GET */

                      callUnitConversionData.vhToPx = parseFloat(window.innerHeight) / 100;
                      /* GET */
                    }

                    unitRatios.remToPx = callUnitConversionData.remToPx;
                    unitRatios.vwToPx = callUnitConversionData.vwToPx;
                    unitRatios.vhToPx = callUnitConversionData.vhToPx;

                    if (Velocity.debug >= 1) {
                      console.log("Unit ratios: " + JSON.stringify(unitRatios), element);
                    }

                    return unitRatios;
                  };
                  /********************
                   Unit Conversion
                   ********************/

                  /* The * and / operators, which are not passed in with an associated unit, inherently use startValue's unit. Skip value and unit conversion. */


                  if (/[\/*]/.test(operator)) {
                    endValueUnitType = startValueUnitType;
                    /* If startValue and endValue differ in unit type, convert startValue into the same unit type as endValue so that if endValueUnitType
                     is a relative unit (%, em, rem), the values set during tweening will continue to be accurately relative even if the metrics they depend
                     on are dynamically changing during the course of the animation. Conversely, if we always normalized into px and used px for setting values, the px ratio
                     would become stale if the original unit being animated toward was relative and the underlying metrics change during the animation. */

                    /* Since 0 is 0 in any unit type, no conversion is necessary when startValue is 0 -- we just start at 0 with endValueUnitType. */
                  } else if (startValueUnitType !== endValueUnitType && startValue !== 0) {
                    /* Unit conversion is also skipped when endValue is 0, but *startValueUnitType* must be used for tween values to remain accurate. */

                    /* Note: Skipping unit conversion here means that if endValueUnitType was originally a relative unit, the animation won't relatively
                     match the underlying metrics if they change, but this is acceptable since we're animating toward invisibility instead of toward visibility,
                     which remains past the point of the animation's completion. */
                    if (endValue === 0) {
                      endValueUnitType = startValueUnitType;
                    } else {
                      /* By this point, we cannot avoid unit conversion (it's undesirable since it causes layout thrashing).
                       If we haven't already, we trigger calculateUnitRatios(), which runs once per element per call. */
                      elementUnitConversionData = elementUnitConversionData || calculateUnitRatios();
                      /* The following RegEx matches CSS properties that have their % values measured relative to the x-axis. */

                      /* Note: W3C spec mandates that all of margin and padding's properties (even top and bottom) are %-relative to the *width* of the parent element. */

                      var axis = /margin|padding|left|right|width|text|word|letter/i.test(property) || /X$/.test(property) || property === "x" ? "x" : "y";
                      /* In order to avoid generating n^2 bespoke conversion functions, unit conversion is a two-step process:
                       1) Convert startValue into pixels. 2) Convert this new pixel value into endValue's unit type. */

                      switch (startValueUnitType) {
                        case "%":
                          /* Note: translateX and translateY are the only properties that are %-relative to an element's own dimensions -- not its parent's dimensions.
                           Velocity does not include a special conversion process to account for this behavior. Therefore, animating translateX/Y from a % value
                           to a non-% value will produce an incorrect start value. Fortunately, this sort of cross-unit conversion is rarely done by users in practice. */
                          startValue *= axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight;
                          break;

                        case "px":
                          /* px acts as our midpoint in the unit conversion process; do nothing. */
                          break;

                        default:
                          startValue *= elementUnitConversionData[startValueUnitType + "ToPx"];
                      }
                      /* Invert the px ratios to convert into to the target unit. */


                      switch (endValueUnitType) {
                        case "%":
                          startValue *= 1 / (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
                          break;

                        case "px":
                          /* startValue is already in px, do nothing; we're done. */
                          break;

                        default:
                          startValue *= 1 / elementUnitConversionData[endValueUnitType + "ToPx"];
                      }
                    }
                  }
                  /*********************
                   Relative Values
                   *********************/

                  /* Operator logic must be performed last since it requires unit-normalized start and end values. */

                  /* Note: Relative *percent values* do not behave how most people think; while one would expect "+=50%"
                   to increase the property 1.5x its current value, it in fact increases the percent units in absolute terms:
                   50 points is added on top of the current % value. */


                  switch (operator) {
                    case "+":
                      endValue = startValue + endValue;
                      break;

                    case "-":
                      endValue = startValue - endValue;
                      break;

                    case "*":
                      endValue = startValue * endValue;
                      break;

                    case "/":
                      endValue = startValue / endValue;
                      break;
                  }
                  /**************************
                   tweensContainer Push
                   **************************/

                  /* Construct the per-property tween object, and push it to the element's tweensContainer. */


                  tweensContainer[property] = {
                    rootPropertyValue: rootPropertyValue,
                    startValue: startValue,
                    currentValue: startValue,
                    endValue: endValue,
                    unitType: endValueUnitType,
                    easing: easing
                  };

                  if (pattern) {
                    tweensContainer[property].pattern = pattern;
                  }

                  if (Velocity.debug) {
                    console.log("tweensContainer (" + property + "): " + JSON.stringify(tweensContainer[property]), element);
                  }
                };
                /* Create a tween out of each property, and append its associated data to tweensContainer. */


                for (var property in propertiesMap) {
                  if (!propertiesMap.hasOwnProperty(property)) {
                    continue;
                  }
                  /* The original property name's format must be used for the parsePropertyValue() lookup,
                   but we then use its camelCase styling to normalize it for manipulation. */


                  var propertyName = CSS.Names.camelCase(property),
                      valueData = parsePropertyValue(propertiesMap[property]);
                  /* Find shorthand color properties that have been passed a hex string. */

                  /* Would be quicker to use CSS.Lists.colors.includes() if possible */

                  if (_inArray(CSS.Lists.colors)) {
                    /* Parse the value data for each shorthand. */
                    var endValue = valueData[0],
                        easing = valueData[1],
                        startValue = valueData[2];

                    if (CSS.RegEx.isHex.test(endValue)) {
                      /* Convert the hex strings into their RGB component arrays. */
                      var colorComponents = ["Red", "Green", "Blue"],
                          endValueRGB = CSS.Values.hexToRgb(endValue),
                          startValueRGB = startValue ? CSS.Values.hexToRgb(startValue) : undefined$1;
                      /* Inject the RGB component tweens into propertiesMap. */

                      for (var i = 0; i < colorComponents.length; i++) {
                        var dataArray = [endValueRGB[i]];

                        if (easing) {
                          dataArray.push(easing);
                        }

                        if (startValueRGB !== undefined$1) {
                          dataArray.push(startValueRGB[i]);
                        }

                        fixPropertyValue(propertyName + colorComponents[i], dataArray);
                      }
                      /* If we have replaced a shortcut color value then don't update the standard property name */


                      continue;
                    }
                  }

                  fixPropertyValue(propertyName, valueData);
                }
                /* Along with its property data, store a reference to the element itself onto tweensContainer. */


                tweensContainer.element = element;
              }
              /*****************
               Call Push
               *****************/

              /* Note: tweensContainer can be empty if all of the properties in this call's property map were skipped due to not
               being supported by the browser. The element property is used for checking that the tweensContainer has been appended to. */


              if (tweensContainer.element) {
                /* Apply the "velocity-animating" indicator class. */
                CSS.Values.addClass(element, "velocity-animating");
                /* The call array houses the tweensContainers for each element being animated in the current call. */

                call.push(tweensContainer);
                data = Data(element);

                if (data) {
                  /* Store the tweensContainer and options if we're working on the default effects queue, so that they can be used by the reverse command. */
                  if (opts.queue === "") {
                    data.tweensContainer = tweensContainer;
                    data.opts = opts;
                  }
                  /* Switch on the element's animating flag. */


                  data.isAnimating = true;
                }
                /* Once the final element in this call's element set has been processed, push the call array onto
                 Velocity.State.calls for the animation tick to immediately begin processing. */


                if (elementsIndex === elementsLength - 1) {
                  /* Add the current call plus its associated metadata (the element set and the call's options) onto the global call container.
                   Anything on this call container is subjected to tick() processing. */
                  Velocity.State.calls.push([call, elements, opts, null, promiseData.resolver, null, 0]);
                  /* If the animation tick isn't running, start it. (Velocity shuts it off when there are no active calls to process.) */

                  if (Velocity.State.isTicking === false) {
                    Velocity.State.isTicking = true;
                    /* Start the tick loop. */

                    tick();
                  }
                } else {
                  elementsIndex++;
                }
              }
            }
            /* When the queue option is set to false, the call skips the element's queue and fires immediately. */


            if (opts.queue === false) {
              /* Since this buildQueue call doesn't respect the element's existing queue (which is where a delay option would have been appended),
               we manually inject the delay property here with an explicit setTimeout. */
              if (opts.delay) {
                /* Temporarily store delayed elements to facilitate access for global pause/resume */
                var callIndex = Velocity.State.delayedElements.count++;
                Velocity.State.delayedElements[callIndex] = element;

                var delayComplete = function (index) {
                  return function () {
                    /* Clear the temporary element */
                    Velocity.State.delayedElements[index] = false;
                    /* Finally, issue the call */

                    buildQueue();
                  };
                }(callIndex);

                Data(element).delayBegin = new Date().getTime();
                Data(element).delay = parseFloat(opts.delay);
                Data(element).delayTimer = {
                  setTimeout: setTimeout(buildQueue, parseFloat(opts.delay)),
                  next: delayComplete
                };
              } else {
                buildQueue();
              }
              /* Otherwise, the call undergoes element queueing as normal. */

              /* Note: To interoperate with jQuery, Velocity uses jQuery's own $.queue() stack for queuing logic. */

            } else {
              $.queue(element, opts.queue, function (next, clearQueue) {
                /* If the clearQueue flag was passed in by the stop command, resolve this call's promise. (Promises can only be resolved once,
                 so it's fine if this is repeatedly triggered for each element in the associated call.) */
                if (clearQueue === true) {
                  if (promiseData.promise) {
                    promiseData.resolver(elements);
                  }
                  /* Do not continue with animation queueing. */


                  return true;
                }
                /* This flag indicates to the upcoming completeCall() function that this queue entry was initiated by Velocity.
                 See completeCall() for further details. */


                Velocity.velocityQueueEntryFlag = true;
                buildQueue();
              });
            }
            /*********************
             Auto-Dequeuing
             *********************/

            /* As per jQuery's $.queue() behavior, to fire the first non-custom-queue entry on an element, the element
             must be dequeued if its queue stack consists *solely* of the current call. (This can be determined by checking
             for the "inprogress" item that jQuery prepends to active queue stack arrays.) Regardless, whenever the element's
             queue is further appended with additional items -- including $.delay()'s or even $.animate() calls, the queue's
             first entry is automatically fired. This behavior contrasts that of custom queues, which never auto-fire. */

            /* Note: When an element set is being subjected to a non-parallel Velocity call, the animation will not begin until
             each one of the elements in the set has reached the end of its individually pre-existing queue chain. */

            /* Note: Unfortunately, most people don't fully grasp jQuery's powerful, yet quirky, $.queue() function.
             Lean more here: http://stackoverflow.com/questions/1058158/can-somebody-explain-jquery-queue-to-me */


            if ((opts.queue === "" || opts.queue === "fx") && $.queue(element)[0] !== "inprogress") {
              $.dequeue(element);
            }
          }
          /**************************
           Element Set Iteration
           **************************/

          /* If the "nodeType" property exists on the elements variable, we're animating a single element.
           Place it in an array so that $.each() can iterate over it. */


          $.each(elements, function (i, element) {
            /* Ensure each element in a set has a nodeType (is a real element) to avoid throwing errors. */
            if (Type.isNode(element)) {
              processElement(element, i);
            }
          });
          /******************
           Option: Loop
           ******************/

          /* The loop option accepts an integer indicating how many times the element should loop between the values in the
           current call's properties map and the element's property values prior to this call. */

          /* Note: The loop option's logic is performed here -- after element processing -- because the current call needs
           to undergo its queue insertion prior to the loop option generating its series of constituent "reverse" calls,
           which chain after the current call. Two reverse calls (two "alternations") constitute one loop. */

          opts = $.extend({}, Velocity.defaults, options);
          opts.loop = parseInt(opts.loop, 10);
          var reverseCallsCount = opts.loop * 2 - 1;

          if (opts.loop) {
            /* Double the loop count to convert it into its appropriate number of "reverse" calls.
             Subtract 1 from the resulting value since the current call is included in the total alternation count. */
            for (var x = 0; x < reverseCallsCount; x++) {
              /* Since the logic for the reverse action occurs inside Queueing and therefore this call's options object
               isn't parsed until then as well, the current call's delay option must be explicitly passed into the reverse
               call so that the delay logic that occurs inside *Pre-Queueing* can process it. */
              var reverseOptions = {
                delay: opts.delay,
                progress: opts.progress
              };
              /* If a complete callback was passed into this call, transfer it to the loop redirect's final "reverse" call
               so that it's triggered when the entire redirect is complete (and not when the very first animation is complete). */

              if (x === reverseCallsCount - 1) {
                reverseOptions.display = opts.display;
                reverseOptions.visibility = opts.visibility;
                reverseOptions.complete = opts.complete;
              }

              animate(elements, "reverse", reverseOptions);
            }
          }
          /***************
           Chaining
           ***************/

          /* Return the elements back to the call chain, with wrapped elements taking precedence in case Velocity was called via the $.fn. extension. */


          return getChain();
        };
        /* Turn Velocity into the animation function, extended with the pre-existing Velocity object. */


        Velocity = $.extend(animate, Velocity);
        /* For legacy support, also expose the literal animate method. */

        Velocity.animate = animate;
        /**************
         Timing
         **************/

        /* Ticker function. */

        var ticker = window.requestAnimationFrame || rAFShim;
        /* Inactive browser tabs pause rAF, which results in all active animations immediately sprinting to their completion states when the tab refocuses.
         To get around this, we dynamically switch rAF to setTimeout (which the browser *doesn't* pause) when the tab loses focus. We skip this for mobile
         devices to avoid wasting battery power on inactive tabs. */

        /* Note: Tab focus detection doesn't work on older versions of IE, but that's okay since they don't support rAF to begin with. */

        if (!Velocity.State.isMobile && document.hidden !== undefined$1) {
          var updateTicker = function updateTicker() {
            /* Reassign the rAF function (which the global tick() function uses) based on the tab's focus state. */
            if (document.hidden) {
              ticker = function ticker(callback) {
                /* The tick function needs a truthy first argument in order to pass its internal timestamp check. */
                return setTimeout(function () {
                  callback(true);
                }, 16);
              };
              /* The rAF loop has been paused by the browser, so we manually restart the tick. */


              tick();
            } else {
              ticker = window.requestAnimationFrame || rAFShim;
            }
          };
          /* Page could be sitting in the background at this time (i.e. opened as new tab) so making sure we use correct ticker from the start */


          updateTicker();
          /* And then run check again every time visibility changes */

          document.addEventListener("visibilitychange", updateTicker);
        }
        /************
         Tick
         ************/

        /* Note: All calls to Velocity are pushed to the Velocity.State.calls array, which is fully iterated through upon each tick. */


        function tick(timestamp) {
          /* An empty timestamp argument indicates that this is the first tick occurence since ticking was turned on.
           We leverage this metadata to fully ignore the first tick pass since RAF's initial pass is fired whenever
           the browser's next tick sync time occurs, which results in the first elements subjected to Velocity
           calls being animated out of sync with any elements animated immediately thereafter. In short, we ignore
           the first RAF tick pass so that elements being immediately consecutively animated -- instead of simultaneously animated
           by the same Velocity call -- are properly batched into the same initial RAF tick and consequently remain in sync thereafter. */
          if (timestamp) {
            /* We normally use RAF's high resolution timestamp but as it can be significantly offset when the browser is
             under high stress we give the option for choppiness over allowing the browser to drop huge chunks of frames.
             We use performance.now() and shim it if it doesn't exist for when the tab is hidden. */
            var timeCurrent = Velocity.timestamp && timestamp !== true ? timestamp : performance.now();
            /********************
             Call Iteration
             ********************/

            var callsLength = Velocity.State.calls.length;
            /* To speed up iterating over this array, it is compacted (falsey items -- calls that have completed -- are removed)
             when its length has ballooned to a point that can impact tick performance. This only becomes necessary when animation
             has been continuous with many elements over a long period of time; whenever all active calls are completed, completeCall() clears Velocity.State.calls. */

            if (callsLength > 10000) {
              Velocity.State.calls = compactSparseArray(Velocity.State.calls);
              callsLength = Velocity.State.calls.length;
            }
            /* Iterate through each active call. */


            for (var i = 0; i < callsLength; i++) {
              /* When a Velocity call is completed, its Velocity.State.calls entry is set to false. Continue on to the next call. */
              if (!Velocity.State.calls[i]) {
                continue;
              }
              /************************
               Call-Wide Variables
               ************************/


              var callContainer = Velocity.State.calls[i],
                  call = callContainer[0],
                  opts = callContainer[2],
                  timeStart = callContainer[3],
                  firstTick = !timeStart,
                  tweenDummyValue = null,
                  pauseObject = callContainer[5],
                  millisecondsEllapsed = callContainer[6];
              /* If timeStart is undefined, then this is the first time that this call has been processed by tick().
               We assign timeStart now so that its value is as close to the real animation start time as possible.
               (Conversely, had timeStart been defined when this call was added to Velocity.State.calls, the delay
               between that time and now would cause the first few frames of the tween to be skipped since
               percentComplete is calculated relative to timeStart.) */

              /* Further, subtract 16ms (the approximate resolution of RAF) from the current time value so that the
               first tick iteration isn't wasted by animating at 0% tween completion, which would produce the
               same style value as the element's current value. */

              if (!timeStart) {
                timeStart = Velocity.State.calls[i][3] = timeCurrent - 16;
              }
              /* If a pause object is present, skip processing unless it has been set to resume */


              if (pauseObject) {
                if (pauseObject.resume === true) {
                  /* Update the time start to accomodate the paused completion amount */
                  timeStart = callContainer[3] = Math.round(timeCurrent - millisecondsEllapsed - 16);
                  /* Remove pause object after processing */

                  callContainer[5] = null;
                } else {
                  continue;
                }
              }

              millisecondsEllapsed = callContainer[6] = timeCurrent - timeStart;
              /* The tween's completion percentage is relative to the tween's start time, not the tween's start value
               (which would result in unpredictable tween durations since JavaScript's timers are not particularly accurate).
               Accordingly, we ensure that percentComplete does not exceed 1. */

              var percentComplete = Math.min(millisecondsEllapsed / opts.duration, 1);
              /**********************
               Element Iteration
               **********************/

              /* For every call, iterate through each of the elements in its set. */

              for (var j = 0, callLength = call.length; j < callLength; j++) {
                var tweensContainer = call[j],
                    element = tweensContainer.element;
                /* Check to see if this element has been deleted midway through the animation by checking for the
                 continued existence of its data cache. If it's gone, or the element is currently paused, skip animating this element. */

                if (!Data(element)) {
                  continue;
                }

                var transformPropertyExists = false;
                /**********************************
                 Display & Visibility Toggling
                 **********************************/

                /* If the display option is set to non-"none", set it upfront so that the element can become visible before tweening begins.
                 (Otherwise, display's "none" value is set in completeCall() once the animation has completed.) */

                if (opts.display !== undefined$1 && opts.display !== null && opts.display !== "none") {
                  if (opts.display === "flex") {
                    var flexValues = ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex"];
                    $.each(flexValues, function (i, flexValue) {
                      CSS.setPropertyValue(element, "display", flexValue);
                    });
                  }

                  CSS.setPropertyValue(element, "display", opts.display);
                }
                /* Same goes with the visibility option, but its "none" equivalent is "hidden". */


                if (opts.visibility !== undefined$1 && opts.visibility !== "hidden") {
                  CSS.setPropertyValue(element, "visibility", opts.visibility);
                }
                /************************
                 Property Iteration
                 ************************/

                /* For every element, iterate through each property. */


                for (var property in tweensContainer) {
                  /* Note: In addition to property tween data, tweensContainer contains a reference to its associated element. */
                  if (tweensContainer.hasOwnProperty(property) && property !== "element") {
                    var tween = tweensContainer[property],
                        currentValue,

                    /* Easing can either be a pre-genereated function or a string that references a pre-registered easing
                     on the Velocity.Easings object. In either case, return the appropriate easing *function*. */
                    easing = Type.isString(tween.easing) ? Velocity.Easings[tween.easing] : tween.easing;
                    /******************************
                     Current Value Calculation
                     ******************************/

                    if (Type.isString(tween.pattern)) {
                      var patternReplace = percentComplete === 1 ? function ($0, index, round) {
                        var result = tween.endValue[index];
                        return round ? Math.round(result) : result;
                      } : function ($0, index, round) {
                        var startValue = tween.startValue[index],
                            tweenDelta = tween.endValue[index] - startValue,
                            result = startValue + tweenDelta * easing(percentComplete, opts, tweenDelta);
                        return round ? Math.round(result) : result;
                      };
                      currentValue = tween.pattern.replace(/{(\d+)(!)?}/g, patternReplace);
                    } else if (percentComplete === 1) {
                      /* If this is the last tick pass (if we've reached 100% completion for this tween),
                       ensure that currentValue is explicitly set to its target endValue so that it's not subjected to any rounding. */
                      currentValue = tween.endValue;
                    } else {
                      /* Otherwise, calculate currentValue based on the current delta from startValue. */
                      var tweenDelta = tween.endValue - tween.startValue;
                      currentValue = tween.startValue + tweenDelta * easing(percentComplete, opts, tweenDelta);
                      /* If no value change is occurring, don't proceed with DOM updating. */
                    }

                    if (!firstTick && currentValue === tween.currentValue) {
                      continue;
                    }

                    tween.currentValue = currentValue;
                    /* If we're tweening a fake 'tween' property in order to log transition values, update the one-per-call variable so that
                     it can be passed into the progress callback. */

                    if (property === "tween") {
                      tweenDummyValue = currentValue;
                    } else {
                      /******************
                       Hooks: Part I
                       ******************/
                      var hookRoot;
                      /* For hooked properties, the newly-updated rootPropertyValueCache is cached onto the element so that it can be used
                       for subsequent hooks in this call that are associated with the same root property. If we didn't cache the updated
                       rootPropertyValue, each subsequent update to the root property in this tick pass would reset the previous hook's
                       updates to rootPropertyValue prior to injection. A nice performance byproduct of rootPropertyValue caching is that
                       subsequently chained animations using the same hookRoot but a different hook can use this cached rootPropertyValue. */

                      if (CSS.Hooks.registered[property]) {
                        hookRoot = CSS.Hooks.getRoot(property);
                        var rootPropertyValueCache = Data(element).rootPropertyValueCache[hookRoot];

                        if (rootPropertyValueCache) {
                          tween.rootPropertyValue = rootPropertyValueCache;
                        }
                      }
                      /*****************
                       DOM Update
                       *****************/

                      /* setPropertyValue() returns an array of the property name and property value post any normalization that may have been performed. */

                      /* Note: To solve an IE<=8 positioning bug, the unit type is dropped when setting a property value of 0. */


                      var adjustedSetData = CSS.setPropertyValue(element,
                      /* SET */
                      property, tween.currentValue + (IE < 9 && parseFloat(currentValue) === 0 ? "" : tween.unitType), tween.rootPropertyValue, tween.scrollData);
                      /*******************
                       Hooks: Part II
                       *******************/

                      /* Now that we have the hook's updated rootPropertyValue (the post-processed value provided by adjustedSetData), cache it onto the element. */

                      if (CSS.Hooks.registered[property]) {
                        /* Since adjustedSetData contains normalized data ready for DOM updating, the rootPropertyValue needs to be re-extracted from its normalized form. ?? */
                        if (CSS.Normalizations.registered[hookRoot]) {
                          Data(element).rootPropertyValueCache[hookRoot] = CSS.Normalizations.registered[hookRoot]("extract", null, adjustedSetData[1]);
                        } else {
                          Data(element).rootPropertyValueCache[hookRoot] = adjustedSetData[1];
                        }
                      }
                      /***************
                       Transforms
                       ***************/

                      /* Flag whether a transform property is being animated so that flushTransformCache() can be triggered once this tick pass is complete. */


                      if (adjustedSetData[0] === "transform") {
                        transformPropertyExists = true;
                      }
                    }
                  }
                }
                /****************
                 mobileHA
                 ****************/

                /* If mobileHA is enabled, set the translate3d transform to null to force hardware acceleration.
                 It's safe to override this property since Velocity doesn't actually support its animation (hooks are used in its place). */


                if (opts.mobileHA) {
                  /* Don't set the null transform hack if we've already done so. */
                  if (Data(element).transformCache.translate3d === undefined$1) {
                    /* All entries on the transformCache object are later concatenated into a single transform string via flushTransformCache(). */
                    Data(element).transformCache.translate3d = "(0px, 0px, 0px)";
                    transformPropertyExists = true;
                  }
                }

                if (transformPropertyExists) {
                  CSS.flushTransformCache(element);
                }
              }
              /* The non-"none" display value is only applied to an element once -- when its associated call is first ticked through.
               Accordingly, it's set to false so that it isn't re-processed by this call in the next tick. */


              if (opts.display !== undefined$1 && opts.display !== "none") {
                Velocity.State.calls[i][2].display = false;
              }

              if (opts.visibility !== undefined$1 && opts.visibility !== "hidden") {
                Velocity.State.calls[i][2].visibility = false;
              }
              /* Pass the elements and the timing data (percentComplete, msRemaining, timeStart, tweenDummyValue) into the progress callback. */


              if (opts.progress) {
                opts.progress.call(callContainer[1], callContainer[1], percentComplete, Math.max(0, timeStart + opts.duration - timeCurrent), timeStart, tweenDummyValue);
              }
              /* If this call has finished tweening, pass its index to completeCall() to handle call cleanup. */


              if (percentComplete === 1) {
                completeCall(i);
              }
            }
          }
          /* Note: completeCall() sets the isTicking flag to false when the last call on Velocity.State.calls has completed. */


          if (Velocity.State.isTicking) {
            ticker(tick);
          }
        }
        /**********************
         Call Completion
         **********************/

        /* Note: Unlike tick(), which processes all active calls at once, call completion is handled on a per-call basis. */


        function completeCall(callIndex, isStopped) {
          /* Ensure the call exists. */
          if (!Velocity.State.calls[callIndex]) {
            return false;
          }
          /* Pull the metadata from the call. */


          var call = Velocity.State.calls[callIndex][0],
              elements = Velocity.State.calls[callIndex][1],
              opts = Velocity.State.calls[callIndex][2],
              resolver = Velocity.State.calls[callIndex][4];
          var remainingCallsExist = false;
          /*************************
           Element Finalization
           *************************/

          for (var i = 0, callLength = call.length; i < callLength; i++) {
            var element = call[i].element;
            /* If the user set display to "none" (intending to hide the element), set it now that the animation has completed. */

            /* Note: display:none isn't set when calls are manually stopped (via Velocity("stop"). */

            /* Note: Display gets ignored with "reverse" calls and infinite loops, since this behavior would be undesirable. */

            if (!isStopped && !opts.loop) {
              if (opts.display === "none") {
                CSS.setPropertyValue(element, "display", opts.display);
              }

              if (opts.visibility === "hidden") {
                CSS.setPropertyValue(element, "visibility", opts.visibility);
              }
            }
            /* If the element's queue is empty (if only the "inprogress" item is left at position 0) or if its queue is about to run
             a non-Velocity-initiated entry, turn off the isAnimating flag. A non-Velocity-initiatied queue entry's logic might alter
             an element's CSS values and thereby cause Velocity's cached value data to go stale. To detect if a queue entry was initiated by Velocity,
             we check for the existence of our special Velocity.queueEntryFlag declaration, which minifiers won't rename since the flag
             is assigned to jQuery's global $ object and thus exists out of Velocity's own scope. */


            var data = Data(element);

            if (opts.loop !== true && ($.queue(element)[1] === undefined$1 || !/\.velocityQueueEntryFlag/i.test($.queue(element)[1]))) {
              /* The element may have been deleted. Ensure that its data cache still exists before acting on it. */
              if (data) {
                data.isAnimating = false;
                /* Clear the element's rootPropertyValueCache, which will become stale. */

                data.rootPropertyValueCache = {};
                var transformHAPropertyExists = false;
                /* If any 3D transform subproperty is at its default value (regardless of unit type), remove it. */

                $.each(CSS.Lists.transforms3D, function (i, transformName) {
                  var defaultValue = /^scale/.test(transformName) ? 1 : 0,
                      currentValue = data.transformCache[transformName];

                  if (data.transformCache[transformName] !== undefined$1 && new RegExp("^\\(" + defaultValue + "[^.]").test(currentValue)) {
                    transformHAPropertyExists = true;
                    delete data.transformCache[transformName];
                  }
                });
                /* Mobile devices have hardware acceleration removed at the end of the animation in order to avoid hogging the GPU's memory. */

                if (opts.mobileHA) {
                  transformHAPropertyExists = true;
                  delete data.transformCache.translate3d;
                }
                /* Flush the subproperty removals to the DOM. */


                if (transformHAPropertyExists) {
                  CSS.flushTransformCache(element);
                }
                /* Remove the "velocity-animating" indicator class. */


                CSS.Values.removeClass(element, "velocity-animating");
              }
            }
            /*********************
             Option: Complete
             *********************/

            /* Complete is fired once per call (not once per element) and is passed the full raw DOM element set as both its context and its first argument. */

            /* Note: Callbacks aren't fired when calls are manually stopped (via Velocity("stop"). */


            if (!isStopped && opts.complete && !opts.loop && i === callLength - 1) {
              /* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
              try {
                opts.complete.call(elements, elements);
              } catch (error) {
                setTimeout(function () {
                  throw error;
                }, 1);
              }
            }
            /**********************
             Promise Resolving
             **********************/

            /* Note: Infinite loops don't return promises. */


            if (resolver && opts.loop !== true) {
              resolver(elements);
            }
            /****************************
             Option: Loop (Infinite)
             ****************************/


            if (data && opts.loop === true && !isStopped) {
              /* If a rotateX/Y/Z property is being animated by 360 deg with loop:true, swap tween start/end values to enable
               continuous iterative rotation looping. (Otherise, the element would just rotate back and forth.) */
              $.each(data.tweensContainer, function (propertyName, tweenContainer) {
                if (/^rotate/.test(propertyName) && (parseFloat(tweenContainer.startValue) - parseFloat(tweenContainer.endValue)) % 360 === 0) {
                  var oldStartValue = tweenContainer.startValue;
                  tweenContainer.startValue = tweenContainer.endValue;
                  tweenContainer.endValue = oldStartValue;
                }

                if (/^backgroundPosition/.test(propertyName) && parseFloat(tweenContainer.endValue) === 100 && tweenContainer.unitType === "%") {
                  tweenContainer.endValue = 0;
                  tweenContainer.startValue = 100;
                }
              });
              Velocity(element, "reverse", {
                loop: true,
                delay: opts.delay
              });
            }
            /***************
             Dequeueing
             ***************/

            /* Fire the next call in the queue so long as this call's queue wasn't set to false (to trigger a parallel animation),
             which would have already caused the next call to fire. Note: Even if the end of the animation queue has been reached,
             $.dequeue() must still be called in order to completely clear jQuery's animation queue. */


            if (opts.queue !== false) {
              $.dequeue(element, opts.queue);
            }
          }
          /************************
           Calls Array Cleanup
           ************************/

          /* Since this call is complete, set it to false so that the rAF tick skips it. This array is later compacted via compactSparseArray().
           (For performance reasons, the call is set to false instead of being deleted from the array: http://www.html5rocks.com/en/tutorials/speed/v8/) */


          Velocity.State.calls[callIndex] = false;
          /* Iterate through the calls array to determine if this was the final in-progress animation.
           If so, set a flag to end ticking and clear the calls array. */

          for (var j = 0, callsLength = Velocity.State.calls.length; j < callsLength; j++) {
            if (Velocity.State.calls[j] !== false) {
              remainingCallsExist = true;
              break;
            }
          }

          if (remainingCallsExist === false) {
            /* tick() will detect this flag upon its next iteration and subsequently turn itself off. */
            Velocity.State.isTicking = false;
            /* Clear the calls array so that its length is reset. */

            delete Velocity.State.calls;
            Velocity.State.calls = [];
          }
        }
        /******************
         Frameworks
         ******************/

        /* Both jQuery and Zepto allow their $.fn object to be extended to allow wrapped elements to be subjected to plugin calls.
         If either framework is loaded, register a "velocity" extension pointing to Velocity's core animate() method.  Velocity
         also registers itself onto a global container (window.jQuery || window.Zepto || window) so that certain features are
         accessible beyond just a per-element scope. This master object contains an .animate() method, which is later assigned to $.fn
         (if jQuery or Zepto are present). Accordingly, Velocity can both act on wrapped DOM elements and stand alone for targeting raw DOM elements. */


        global.Velocity = Velocity;

        if (global !== window) {
          /* Assign the element function to Velocity's core animate() method. */
          global.fn.velocity = animate;
          /* Assign the object function's defaults to Velocity's global defaults object. */

          global.fn.velocity.defaults = Velocity.defaults;
        }
        /***********************
         Packaged Redirects
         ***********************/

        /* slideUp, slideDown */


        $.each(["Down", "Up"], function (i, direction) {
          Velocity.Redirects["slide" + direction] = function (element, options, elementsIndex, elementsSize, elements, promiseData) {
            var opts = $.extend({}, options),
                begin = opts.begin,
                complete = opts.complete,
                inlineValues = {},
                computedValues = {
              height: "",
              marginTop: "",
              marginBottom: "",
              paddingTop: "",
              paddingBottom: ""
            };

            if (opts.display === undefined$1) {
              /* Show the element before slideDown begins and hide the element after slideUp completes. */

              /* Note: Inline elements cannot have dimensions animated, so they're reverted to inline-block. */
              opts.display = direction === "Down" ? Velocity.CSS.Values.getDisplayType(element) === "inline" ? "inline-block" : "block" : "none";
            }

            opts.begin = function () {
              /* If the user passed in a begin callback, fire it now. */
              if (elementsIndex === 0 && begin) {
                begin.call(elements, elements);
              }
              /* Cache the elements' original vertical dimensional property values so that we can animate back to them. */


              for (var property in computedValues) {
                if (!computedValues.hasOwnProperty(property)) {
                  continue;
                }

                inlineValues[property] = element.style[property];
                /* For slideDown, use forcefeeding to animate all vertical properties from 0. For slideUp,
                 use forcefeeding to start from computed values and animate down to 0. */

                var propertyValue = CSS.getPropertyValue(element, property);
                computedValues[property] = direction === "Down" ? [propertyValue, 0] : [0, propertyValue];
              }
              /* Force vertical overflow content to clip so that sliding works as expected. */


              inlineValues.overflow = element.style.overflow;
              element.style.overflow = "hidden";
            };

            opts.complete = function () {
              /* Reset element to its pre-slide inline values once its slide animation is complete. */
              for (var property in inlineValues) {
                if (inlineValues.hasOwnProperty(property)) {
                  element.style[property] = inlineValues[property];
                }
              }
              /* If the user passed in a complete callback, fire it now. */


              if (elementsIndex === elementsSize - 1) {
                if (complete) {
                  complete.call(elements, elements);
                }

                if (promiseData) {
                  promiseData.resolver(elements);
                }
              }
            };

            Velocity(element, computedValues, opts);
          };
        });
        /* fadeIn, fadeOut */

        $.each(["In", "Out"], function (i, direction) {
          Velocity.Redirects["fade" + direction] = function (element, options, elementsIndex, elementsSize, elements, promiseData) {
            var opts = $.extend({}, options),
                complete = opts.complete,
                propertiesMap = {
              opacity: direction === "In" ? 1 : 0
            };
            /* Since redirects are triggered individually for each element in the animated set, avoid repeatedly triggering
             callbacks by firing them only when the final element has been reached. */

            if (elementsIndex !== 0) {
              opts.begin = null;
            }

            if (elementsIndex !== elementsSize - 1) {
              opts.complete = null;
            } else {
              opts.complete = function () {
                if (complete) {
                  complete.call(elements, elements);
                }

                if (promiseData) {
                  promiseData.resolver(elements);
                }
              };
            }
            /* If a display was passed in, use it. Otherwise, default to "none" for fadeOut or the element-specific default for fadeIn. */

            /* Note: We allow users to pass in "null" to skip display setting altogether. */


            if (opts.display === undefined$1) {
              opts.display = direction === "In" ? "auto" : "none";
            }

            Velocity(this, propertiesMap, opts);
          };
        });
        return Velocity;
      }(window.jQuery || window.Zepto || window, window, window ? window.document : undefined);
    });
    /******************
     Known Issues
     ******************/

    /* The CSS spec mandates that the translateX/Y/Z transforms are %-relative to the element itself -- not its parent.
     Velocity, however, doesn't make this distinction. Thus, converting to or from the % unit with these subproperties
     will produce an inaccurate conversion value. The same issue exists with the cx/cy attributes of SVG circles and ellipses. */

  });

  global.Velocity = window.Velocity = velocity;

  var RegisterEffect = function RegisterEffect(effectName, properties) {
    /* Animate the expansion/contraction of the elements' parent's height for In/Out effects. */
    function animateParentHeight(elements, direction, totalDuration, stagger) {
      var totalHeightDelta = 0,
          parentNode;
      /* Sum the total height (including padding and margin) of all targeted elements. */

      $.each(elements.nodeType ? [elements] : elements, function (i, element) {
        if (stagger) {
          /* Increase the totalDuration by the successive delay amounts produced by the stagger option. */
          totalDuration += i * stagger;
        }

        parentNode = element.parentNode;
        var propertiesToSum = ["height", "paddingTop", "paddingBottom", "marginTop", "marginBottom"];
        /* If box-sizing is border-box, the height already includes padding and margin */

        if (velocity.CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() === "border-box") {
          propertiesToSum = ["height"];
        }

        $.each(propertiesToSum, function (i, property) {
          totalHeightDelta += parseFloat(velocity.CSS.getPropertyValue(element, property));
        });
      });
      /* Animate the parent element's height adjustment (with a varying duration multiplier for aesthetic benefits). */

      velocity.animate(parentNode, {
        height: (direction === "In" ? "+" : "-") + "=" + totalHeightDelta
      }, {
        queue: false,
        easing: "ease-in-out",
        duration: totalDuration * (direction === "In" ? 0.6 : 1)
      });
    }
    /* Register a custom redirect for each effect. */


    velocity.Redirects[effectName] = function (element, redirectOptions, elementsIndex, elementsSize, elements, promiseData, loop) {
      var finalElement = elementsIndex === elementsSize - 1,
          totalDuration = 0;
      loop = loop || properties.loop;

      if (typeof properties.defaultDuration === "function") {
        properties.defaultDuration = properties.defaultDuration.call(elements, elements);
      } else {
        properties.defaultDuration = parseFloat(properties.defaultDuration);
      }
      /* Get the total duration used, so we can share it out with everything that doesn't have a duration */


      for (var callIndex = 0; callIndex < properties.calls.length; callIndex++) {
        durationPercentage = properties.calls[callIndex][1];

        if (typeof durationPercentage === "number") {
          totalDuration += durationPercentage;
        }
      }

      var shareDuration = totalDuration >= 1 ? 0 : properties.calls.length ? (1 - totalDuration) / properties.calls.length : 1;
      /* Iterate through each effect's call array. */

      for (callIndex = 0; callIndex < properties.calls.length; callIndex++) {
        var call = properties.calls[callIndex],
            propertyMap = call[0],
            redirectDuration = 1000,
            durationPercentage = call[1],
            callOptions = call[2] || {},
            opts = {};

        if (redirectOptions.duration !== undefined) {
          redirectDuration = redirectOptions.duration;
        } else if (properties.defaultDuration !== undefined) {
          redirectDuration = properties.defaultDuration;
        }
        /* Assign the whitelisted per-call options. */


        opts.duration = redirectDuration * (typeof durationPercentage === "number" ? durationPercentage : shareDuration);
        opts.queue = redirectOptions.queue || "";
        opts.easing = callOptions.easing || "ease";
        opts.delay = parseFloat(callOptions.delay) || 0;
        opts.loop = !properties.loop && callOptions.loop;
        opts._cacheValues = callOptions._cacheValues || true;
        /* Special processing for the first effect call. */

        if (callIndex === 0) {
          /* If a delay was passed into the redirect, combine it with the first call's delay. */
          opts.delay += parseFloat(redirectOptions.delay) || 0;

          if (elementsIndex === 0) {
            opts.begin = function () {
              /* Only trigger a begin callback on the first effect call with the first element in the set. */
              if (redirectOptions.begin) {
                redirectOptions.begin.call(elements, elements);
              }

              var direction = effectName.match(/(In|Out)$/);
              /* Make "in" transitioning elements invisible immediately so that there's no FOUC between now
               and the first RAF tick. */

              if (direction && direction[0] === "In" && propertyMap.opacity !== undefined) {
                $.each(elements.nodeType ? [elements] : elements, function (i, element) {
                  velocity.CSS.setPropertyValue(element, "opacity", 0);
                });
              }
              /* Only trigger animateParentHeight() if we're using an In/Out transition. */


              if (redirectOptions.animateParentHeight && direction) {
                animateParentHeight(elements, direction[0], redirectDuration + opts.delay, redirectOptions.stagger);
              }
            };
          }
          /* If the user isn't overriding the display option, default to "auto" for "In"-suffixed transitions. */


          if (redirectOptions.display !== null) {
            if (redirectOptions.display !== undefined && redirectOptions.display !== "none") {
              opts.display = redirectOptions.display;
            } else if (/In$/.test(effectName)) {
              /* Inline elements cannot be subjected to transforms, so we switch them to inline-block. */
              var defaultDisplay = velocity.CSS.Values.getDisplayType(element);
              opts.display = defaultDisplay === "inline" ? "inline-block" : defaultDisplay;
            }
          }

          if (redirectOptions.visibility && redirectOptions.visibility !== "hidden") {
            opts.visibility = redirectOptions.visibility;
          }
        }
        /* Special processing for the last effect call. */


        if (callIndex === properties.calls.length - 1) {
          /* Append promise resolving onto the user's redirect callback. */
          var injectFinalCallbacks = function injectFinalCallbacks() {
            if ((redirectOptions.display === undefined || redirectOptions.display === "none") && /Out$/.test(effectName)) {
              $.each(elements.nodeType ? [elements] : elements, function (i, element) {
                velocity.CSS.setPropertyValue(element, "display", "none");
              });
            }

            if (redirectOptions.complete) {
              redirectOptions.complete.call(elements, elements);
            }

            if (promiseData) {
              promiseData.resolver(elements || element);
            }
          };

          opts.complete = function () {
            if (loop) {
              velocity.Redirects[effectName](element, redirectOptions, elementsIndex, elementsSize, elements, promiseData, loop === true ? true : Math.max(0, loop - 1));
            }

            if (properties.reset) {
              for (var resetProperty in properties.reset) {
                if (!properties.reset.hasOwnProperty(resetProperty)) {
                  continue;
                }

                var resetValue = properties.reset[resetProperty];
                /* Format each non-array value in the reset property map to [ value, value ] so that changes apply
                 immediately and DOM querying is avoided (via forcefeeding). */

                /* Note: Don't forcefeed hooks, otherwise their hook roots will be defaulted to their null values. */

                if (velocity.CSS.Hooks.registered[resetProperty] === undefined && (typeof resetValue === "string" || typeof resetValue === "number")) {
                  properties.reset[resetProperty] = [properties.reset[resetProperty], properties.reset[resetProperty]];
                }
              }
              /* So that the reset values are applied instantly upon the next rAF tick, use a zero duration and parallel queueing. */


              var resetOptions = {
                duration: 0,
                queue: false
              };
              /* Since the reset option uses up the complete callback, we trigger the user's complete callback at the end of ours. */

              if (finalElement) {
                resetOptions.complete = injectFinalCallbacks;
              }

              velocity.animate(element, properties.reset, resetOptions);
              /* Only trigger the user's complete callback on the last effect call with the last element in the set. */
            } else if (finalElement) {
              injectFinalCallbacks();
            }
          };

          if (redirectOptions.visibility === "hidden") {
            opts.visibility = redirectOptions.visibility;
          }
        }

        velocity.animate(element, propertyMap, opts);
      }
    };
  };

  var effects = {
    "transition.slideDownIn": {
      defaultDuration: 900,
      calls: [[{
        opacity: [1, 0],
        translateY: [0, -10],
        translateZ: 0
      }]]
    },
    "transition.slideUpIn": {
      defaultDuration: 900,
      calls: [[{
        opacity: [1, 0],
        translateY: [0, 10],
        translateZ: 0
      }]]
    },
    "transition.fadeOut": {
      defaultDuration: 500,
      calls: [[{
        opacity: [0, 1]
      }]]
    },
    "transition.fadeIn": {
      defaultDuration: 500,
      calls: [[{
        opacity: [1, 0]
      }]]
    },
    "transition.slideDownInFull": {
      defaultDuration: 900,
      calls: [[{
        opacity: [1, 0],
        translateY: [0, '-100%'],
        translateZ: 0
      }]]
    },
    "transition.slideDownOutFull": {
      defaultDuration: 900,
      calls: [[{
        opacity: [0.4, 1],
        translateY: ['-100%', 0],
        translateZ: 0
      }]]
    }
  };

  for (var effectName in effects) {
    if (effects.hasOwnProperty(effectName)) {
      RegisterEffect(effectName, effects[effectName]);
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.6.0): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

  var TRANSITION_END = 'transitionend';
  var MAX_UID = 1000000;
  var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  function toType(obj) {
    if (obj === null || typeof obj === 'undefined') {
      return "".concat(obj);
    }

    return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  }

  function getSpecialTransitionEndEvent() {
    return {
      bindType: TRANSITION_END,
      delegateType: TRANSITION_END,
      handle: function handle(event) {
        if (jquery(event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
        }

        return undefined;
      }
    };
  }

  function transitionEndEmulator(duration) {
    var _this = this;

    var called = false;
    jquery(this).one(Util.TRANSITION_END, function () {
      called = true;
    });
    setTimeout(function () {
      if (!called) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration);
    return this;
  }

  function setTransitionEndSupport() {
    jquery.fn.emulateTransitionEnd = transitionEndEmulator;
    jquery.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
  }
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  var Util = {
    TRANSITION_END: 'bsTransitionEnd',
    getUID: function getUID(prefix) {
      do {
        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
      } while (document.getElementById(prefix));

      return prefix;
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = element.getAttribute('data-target');

      if (!selector || selector === '#') {
        var hrefAttr = element.getAttribute('href');
        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
      }

      try {
        return document.querySelector(selector) ? selector : null;
      } catch (_) {
        return null;
      }
    },
    getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
      if (!element) {
        return 0;
      } // Get transition-duration of the element


      var transitionDuration = jquery(element).css('transition-duration');
      var transitionDelay = jquery(element).css('transition-delay');
      var floatTransitionDuration = parseFloat(transitionDuration);
      var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      } // If multiple durations are defined, take the first


      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    },
    reflow: function reflow(element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(element) {
      jquery(element).trigger(TRANSITION_END);
    },
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(TRANSITION_END);
    },
    isElement: function isElement(obj) {
      return (obj[0] || obj).nodeType;
    },
    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
      for (var property in configTypes) {
        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = value && Util.isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new Error("".concat(componentName.toUpperCase(), ": ") + "Option \"".concat(property, "\" provided type \"").concat(valueType, "\" ") + "but expected type \"".concat(expectedTypes, "\"."));
          }
        }
      }
    },
    findShadowRoot: function findShadowRoot(element) {
      if (!document.documentElement.attachShadow) {
        return null;
      } // Can find the shadow root otherwise it'll return the document


      if (typeof element.getRootNode === 'function') {
        var root = element.getRootNode();
        return root instanceof ShadowRoot ? root : null;
      }

      if (element instanceof ShadowRoot) {
        return element;
      } // when we don't find a shadow root


      if (!element.parentNode) {
        return null;
      }

      return Util.findShadowRoot(element.parentNode);
    },
    jQueryDetection: function jQueryDetection() {
      if (typeof jquery === 'undefined') {
        throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
      }

      var version = jquery.fn.jquery.split(' ')[0].split('.');
      var minMajor = 1;
      var ltMajor = 2;
      var minMinor = 9;
      var minPatch = 1;
      var maxMajor = 4;

      if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
        throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
      }
    }
  };
  Util.jQueryDetection();
  setTransitionEndSupport();

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'alert';
  var VERSION = '4.6.0';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = ".".concat(DATA_KEY);
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = jquery.fn[NAME];
  var SELECTOR_DISMISS = '[data-dismiss="alert"]';
  var EVENT_CLOSE = "close".concat(EVENT_KEY);
  var EVENT_CLOSED = "closed".concat(EVENT_KEY);
  var EVENT_CLICK_DATA_API = "click".concat(EVENT_KEY).concat(DATA_API_KEY);
  var CLASS_NAME_ALERT = 'alert';
  var CLASS_NAME_FADE = 'fade';
  var CLASS_NAME_SHOW = 'show';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Alert = /*#__PURE__*/function () {
    function Alert(element) {
      _classCallCheck(this, Alert);

      this._element = element;
    } // Getters


    _createClass(Alert, [{
      key: "close",
      value: // Public
      function close(element) {
        var rootElement = this._element;

        if (element) {
          rootElement = this._getRootElement(element);
        }

        var customEvent = this._triggerCloseEvent(rootElement);

        if (customEvent.isDefaultPrevented()) {
          return;
        }

        this._removeElement(rootElement);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        jquery.removeData(this._element, DATA_KEY);
        this._element = null;
      } // Private

    }, {
      key: "_getRootElement",
      value: function _getRootElement(element) {
        var selector = Util.getSelectorFromElement(element);
        var parent = false;

        if (selector) {
          parent = document.querySelector(selector);
        }

        if (!parent) {
          parent = jquery(element).closest(".".concat(CLASS_NAME_ALERT))[0];
        }

        return parent;
      }
    }, {
      key: "_triggerCloseEvent",
      value: function _triggerCloseEvent(element) {
        var closeEvent = jquery.Event(EVENT_CLOSE);
        jquery(element).trigger(closeEvent);
        return closeEvent;
      }
    }, {
      key: "_removeElement",
      value: function _removeElement(element) {
        var _this = this;

        jquery(element).removeClass(CLASS_NAME_SHOW);

        if (!jquery(element).hasClass(CLASS_NAME_FADE)) {
          this._destroyElement(element);

          return;
        }

        var transitionDuration = Util.getTransitionDurationFromElement(element);
        jquery(element).one(Util.TRANSITION_END, function (event) {
          return _this._destroyElement(element, event);
        }).emulateTransitionEnd(transitionDuration);
      }
    }, {
      key: "_destroyElement",
      value: function _destroyElement(element) {
        jquery(element).detach().trigger(EVENT_CLOSED).remove();
      } // Static

    }], [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config) {
        return this.each(function () {
          var $element = jquery(this);
          var data = $element.data(DATA_KEY);

          if (!data) {
            data = new Alert(this);
            $element.data(DATA_KEY, data);
          }

          if (config === 'close') {
            data[config](this);
          }
        });
      }
    }, {
      key: "_handleDismiss",
      value: function _handleDismiss(alertInstance) {
        return function (event) {
          if (event) {
            event.preventDefault();
          }

          alertInstance.close(this);
        };
      }
    }]);

    return Alert;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  jquery(document).on(EVENT_CLICK_DATA_API, SELECTOR_DISMISS, Alert._handleDismiss(new Alert()));
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  jquery.fn[NAME] = Alert._jQueryInterface;
  jquery.fn[NAME].Constructor = Alert;

  jquery.fn[NAME].noConflict = function () {
    jquery.fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$1 = 'button';
  var VERSION$1 = '4.6.0';
  var DATA_KEY$1 = 'bs.button';
  var EVENT_KEY$1 = ".".concat(DATA_KEY$1);
  var DATA_API_KEY$1 = '.data-api';
  var JQUERY_NO_CONFLICT$1 = jquery.fn[NAME$1];
  var CLASS_NAME_ACTIVE = 'active';
  var CLASS_NAME_BUTTON = 'btn';
  var CLASS_NAME_FOCUS = 'focus';
  var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^="button"]';
  var SELECTOR_DATA_TOGGLES = '[data-toggle="buttons"]';
  var SELECTOR_DATA_TOGGLE = '[data-toggle="button"]';
  var SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle="buttons"] .btn';
  var SELECTOR_INPUT = 'input:not([type="hidden"])';
  var SELECTOR_ACTIVE = '.active';
  var SELECTOR_BUTTON = '.btn';
  var EVENT_CLICK_DATA_API$1 = "click".concat(EVENT_KEY$1).concat(DATA_API_KEY$1);
  var EVENT_FOCUS_BLUR_DATA_API = "focus".concat(EVENT_KEY$1).concat(DATA_API_KEY$1, " ") + "blur".concat(EVENT_KEY$1).concat(DATA_API_KEY$1);
  var EVENT_LOAD_DATA_API = "load".concat(EVENT_KEY$1).concat(DATA_API_KEY$1);
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Button = /*#__PURE__*/function () {
    function Button(element) {
      _classCallCheck(this, Button);

      this._element = element;
      this.shouldAvoidTriggerChange = false;
    } // Getters


    _createClass(Button, [{
      key: "toggle",
      value: // Public
      function toggle() {
        var triggerChangeEvent = true;
        var addAriaPressed = true;
        var rootElement = jquery(this._element).closest(SELECTOR_DATA_TOGGLES)[0];

        if (rootElement) {
          var input = this._element.querySelector(SELECTOR_INPUT);

          if (input) {
            if (input.type === 'radio') {
              if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
                triggerChangeEvent = false;
              } else {
                var activeElement = rootElement.querySelector(SELECTOR_ACTIVE);

                if (activeElement) {
                  jquery(activeElement).removeClass(CLASS_NAME_ACTIVE);
                }
              }
            }

            if (triggerChangeEvent) {
              // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
              if (input.type === 'checkbox' || input.type === 'radio') {
                input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE);
              }

              if (!this.shouldAvoidTriggerChange) {
                jquery(input).trigger('change');
              }
            }

            input.focus();
            addAriaPressed = false;
          }
        }

        if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {
          if (addAriaPressed) {
            this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE));
          }

          if (triggerChangeEvent) {
            jquery(this._element).toggleClass(CLASS_NAME_ACTIVE);
          }
        }
      }
    }, {
      key: "dispose",
      value: function dispose() {
        jquery.removeData(this._element, DATA_KEY$1);
        this._element = null;
      } // Static

    }], [{
      key: "VERSION",
      get: function get() {
        return VERSION$1;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config, avoidTriggerChange) {
        return this.each(function () {
          var $element = jquery(this);
          var data = $element.data(DATA_KEY$1);

          if (!data) {
            data = new Button(this);
            $element.data(DATA_KEY$1, data);
          }

          data.shouldAvoidTriggerChange = avoidTriggerChange;

          if (config === 'toggle') {
            data[config]();
          }
        });
      }
    }]);

    return Button;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  jquery(document).on(EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
    var button = event.target;
    var initialButton = button;

    if (!jquery(button).hasClass(CLASS_NAME_BUTTON)) {
      button = jquery(button).closest(SELECTOR_BUTTON)[0];
    }

    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {
      event.preventDefault(); // work around Firefox bug #1540995
    } else {
      var inputBtn = button.querySelector(SELECTOR_INPUT);

      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {
        event.preventDefault(); // work around Firefox bug #1540995

        return;
      }

      if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {
        Button._jQueryInterface.call(jquery(button), 'toggle', initialButton.tagName === 'INPUT');
      }
    }
  }).on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
    var button = jquery(event.target).closest(SELECTOR_BUTTON)[0];
    jquery(button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type));
  });
  jquery(window).on(EVENT_LOAD_DATA_API, function () {
    // ensure correct active class is set to match the controls' actual values/states
    // find all checkboxes/readio buttons inside data-toggle groups
    var buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS));

    for (var i = 0, len = buttons.length; i < len; i++) {
      var button = buttons[i];
      var input = button.querySelector(SELECTOR_INPUT);

      if (input.checked || input.hasAttribute('checked')) {
        button.classList.add(CLASS_NAME_ACTIVE);
      } else {
        button.classList.remove(CLASS_NAME_ACTIVE);
      }
    } // find all button toggles


    buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE));

    for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
      var _button = buttons[_i];

      if (_button.getAttribute('aria-pressed') === 'true') {
        _button.classList.add(CLASS_NAME_ACTIVE);
      } else {
        _button.classList.remove(CLASS_NAME_ACTIVE);
      }
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  jquery.fn[NAME$1] = Button._jQueryInterface;
  jquery.fn[NAME$1].Constructor = Button;

  jquery.fn[NAME$1].noConflict = function () {
    jquery.fn[NAME$1] = JQUERY_NO_CONFLICT$1;
    return Button._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$2 = 'carousel';
  var VERSION$2 = '4.6.0';
  var DATA_KEY$2 = 'bs.carousel';
  var EVENT_KEY$2 = ".".concat(DATA_KEY$2);
  var DATA_API_KEY$2 = '.data-api';
  var JQUERY_NO_CONFLICT$2 = jquery.fn[NAME$2];
  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var SWIPE_THRESHOLD = 40;
  var Default = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true,
    touch: true
  };
  var DefaultType = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean',
    touch: 'boolean'
  };
  var DIRECTION_NEXT = 'next';
  var DIRECTION_PREV = 'prev';
  var DIRECTION_LEFT = 'left';
  var DIRECTION_RIGHT = 'right';
  var EVENT_SLIDE = "slide".concat(EVENT_KEY$2);
  var EVENT_SLID = "slid".concat(EVENT_KEY$2);
  var EVENT_KEYDOWN = "keydown".concat(EVENT_KEY$2);
  var EVENT_MOUSEENTER = "mouseenter".concat(EVENT_KEY$2);
  var EVENT_MOUSELEAVE = "mouseleave".concat(EVENT_KEY$2);
  var EVENT_TOUCHSTART = "touchstart".concat(EVENT_KEY$2);
  var EVENT_TOUCHMOVE = "touchmove".concat(EVENT_KEY$2);
  var EVENT_TOUCHEND = "touchend".concat(EVENT_KEY$2);
  var EVENT_POINTERDOWN = "pointerdown".concat(EVENT_KEY$2);
  var EVENT_POINTERUP = "pointerup".concat(EVENT_KEY$2);
  var EVENT_DRAG_START = "dragstart".concat(EVENT_KEY$2);
  var EVENT_LOAD_DATA_API$1 = "load".concat(EVENT_KEY$2).concat(DATA_API_KEY$2);
  var EVENT_CLICK_DATA_API$2 = "click".concat(EVENT_KEY$2).concat(DATA_API_KEY$2);
  var CLASS_NAME_CAROUSEL = 'carousel';
  var CLASS_NAME_ACTIVE$1 = 'active';
  var CLASS_NAME_SLIDE = 'slide';
  var CLASS_NAME_RIGHT = 'carousel-item-right';
  var CLASS_NAME_LEFT = 'carousel-item-left';
  var CLASS_NAME_NEXT = 'carousel-item-next';
  var CLASS_NAME_PREV = 'carousel-item-prev';
  var CLASS_NAME_POINTER_EVENT = 'pointer-event';
  var SELECTOR_ACTIVE$1 = '.active';
  var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
  var SELECTOR_ITEM = '.carousel-item';
  var SELECTOR_ITEM_IMG = '.carousel-item img';
  var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
  var SELECTOR_INDICATORS = '.carousel-indicators';
  var SELECTOR_DATA_SLIDE = '[data-slide], [data-slide-to]';
  var SELECTOR_DATA_RIDE = '[data-ride="carousel"]';
  var PointerType = {
    TOUCH: 'touch',
    PEN: 'pen'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Carousel = /*#__PURE__*/function () {
    function Carousel(element, config) {
      _classCallCheck(this, Carousel);

      this._items = null;
      this._interval = null;
      this._activeElement = null;
      this._isPaused = false;
      this._isSliding = false;
      this.touchTimeout = null;
      this.touchStartX = 0;
      this.touchDeltaX = 0;
      this._config = this._getConfig(config);
      this._element = element;
      this._indicatorsElement = this._element.querySelector(SELECTOR_INDICATORS);
      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);

      this._addEventListeners();
    } // Getters


    _createClass(Carousel, [{
      key: "next",
      value: // Public
      function next() {
        if (!this._isSliding) {
          this._slide(DIRECTION_NEXT);
        }
      }
    }, {
      key: "nextWhenVisible",
      value: function nextWhenVisible() {
        var $element = jquery(this._element); // Don't call next when the page isn't visible
        // or the carousel or its parent isn't visible

        if (!document.hidden && $element.is(':visible') && $element.css('visibility') !== 'hidden') {
          this.next();
        }
      }
    }, {
      key: "prev",
      value: function prev() {
        if (!this._isSliding) {
          this._slide(DIRECTION_PREV);
        }
      }
    }, {
      key: "pause",
      value: function pause(event) {
        if (!event) {
          this._isPaused = true;
        }

        if (this._element.querySelector(SELECTOR_NEXT_PREV)) {
          Util.triggerTransitionEnd(this._element);
          this.cycle(true);
        }

        clearInterval(this._interval);
        this._interval = null;
      }
    }, {
      key: "cycle",
      value: function cycle(event) {
        if (!event) {
          this._isPaused = false;
        }

        if (this._interval) {
          clearInterval(this._interval);
          this._interval = null;
        }

        if (this._config.interval && !this._isPaused) {
          this._updateInterval();

          this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
        }
      }
    }, {
      key: "to",
      value: function to(index) {
        var _this = this;

        this._activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);

        var activeIndex = this._getItemIndex(this._activeElement);

        if (index > this._items.length - 1 || index < 0) {
          return;
        }

        if (this._isSliding) {
          jquery(this._element).one(EVENT_SLID, function () {
            return _this.to(index);
          });
          return;
        }

        if (activeIndex === index) {
          this.pause();
          this.cycle();
          return;
        }

        var direction = index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;

        this._slide(direction, this._items[index]);
      }
    }, {
      key: "dispose",
      value: function dispose() {
        jquery(this._element).off(EVENT_KEY$2);
        jquery.removeData(this._element, DATA_KEY$2);
        this._items = null;
        this._config = null;
        this._element = null;
        this._interval = null;
        this._isPaused = null;
        this._isSliding = null;
        this._activeElement = null;
        this._indicatorsElement = null;
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2({}, Default), config);
        Util.typeCheckConfig(NAME$2, config, DefaultType);
        return config;
      }
    }, {
      key: "_handleSwipe",
      value: function _handleSwipe() {
        var absDeltax = Math.abs(this.touchDeltaX);

        if (absDeltax <= SWIPE_THRESHOLD) {
          return;
        }

        var direction = absDeltax / this.touchDeltaX;
        this.touchDeltaX = 0; // swipe left

        if (direction > 0) {
          this.prev();
        } // swipe right


        if (direction < 0) {
          this.next();
        }
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        var _this2 = this;

        if (this._config.keyboard) {
          jquery(this._element).on(EVENT_KEYDOWN, function (event) {
            return _this2._keydown(event);
          });
        }

        if (this._config.pause === 'hover') {
          jquery(this._element).on(EVENT_MOUSEENTER, function (event) {
            return _this2.pause(event);
          }).on(EVENT_MOUSELEAVE, function (event) {
            return _this2.cycle(event);
          });
        }

        if (this._config.touch) {
          this._addTouchEventListeners();
        }
      }
    }, {
      key: "_addTouchEventListeners",
      value: function _addTouchEventListeners() {
        var _this3 = this;

        if (!this._touchSupported) {
          return;
        }

        var start = function start(event) {
          if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
            _this3.touchStartX = event.originalEvent.clientX;
          } else if (!_this3._pointerEvent) {
            _this3.touchStartX = event.originalEvent.touches[0].clientX;
          }
        };

        var move = function move(event) {
          // ensure swiping with one touch and not pinching
          if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
            _this3.touchDeltaX = 0;
          } else {
            _this3.touchDeltaX = event.originalEvent.touches[0].clientX - _this3.touchStartX;
          }
        };

        var end = function end(event) {
          if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
            _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;
          }

          _this3._handleSwipe();

          if (_this3._config.pause === 'hover') {
            // If it's a touch-enabled device, mouseenter/leave are fired as
            // part of the mouse compatibility events on first tap - the carousel
            // would stop cycling until user tapped out of it;
            // here, we listen for touchend, explicitly pause the carousel
            // (as if it's the second time we tap on it, mouseenter compat event
            // is NOT fired) and after a timeout (to allow for mouse compatibility
            // events to fire) we explicitly restart cycling
            _this3.pause();

            if (_this3.touchTimeout) {
              clearTimeout(_this3.touchTimeout);
            }

            _this3.touchTimeout = setTimeout(function (event) {
              return _this3.cycle(event);
            }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
          }
        };

        jquery(this._element.querySelectorAll(SELECTOR_ITEM_IMG)).on(EVENT_DRAG_START, function (e) {
          return e.preventDefault();
        });

        if (this._pointerEvent) {
          jquery(this._element).on(EVENT_POINTERDOWN, function (event) {
            return start(event);
          });
          jquery(this._element).on(EVENT_POINTERUP, function (event) {
            return end(event);
          });

          this._element.classList.add(CLASS_NAME_POINTER_EVENT);
        } else {
          jquery(this._element).on(EVENT_TOUCHSTART, function (event) {
            return start(event);
          });
          jquery(this._element).on(EVENT_TOUCHMOVE, function (event) {
            return move(event);
          });
          jquery(this._element).on(EVENT_TOUCHEND, function (event) {
            return end(event);
          });
        }
      }
    }, {
      key: "_keydown",
      value: function _keydown(event) {
        if (/input|textarea/i.test(event.target.tagName)) {
          return;
        }

        switch (event.which) {
          case ARROW_LEFT_KEYCODE:
            event.preventDefault();
            this.prev();
            break;

          case ARROW_RIGHT_KEYCODE:
            event.preventDefault();
            this.next();
            break;
        }
      }
    }, {
      key: "_getItemIndex",
      value: function _getItemIndex(element) {
        this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(SELECTOR_ITEM)) : [];
        return this._items.indexOf(element);
      }
    }, {
      key: "_getItemByDirection",
      value: function _getItemByDirection(direction, activeElement) {
        var isNextDirection = direction === DIRECTION_NEXT;
        var isPrevDirection = direction === DIRECTION_PREV;

        var activeIndex = this._getItemIndex(activeElement);

        var lastItemIndex = this._items.length - 1;
        var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

        if (isGoingToWrap && !this._config.wrap) {
          return activeElement;
        }

        var delta = direction === DIRECTION_PREV ? -1 : 1;
        var itemIndex = (activeIndex + delta) % this._items.length;
        return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
      }
    }, {
      key: "_triggerSlideEvent",
      value: function _triggerSlideEvent(relatedTarget, eventDirectionName) {
        var targetIndex = this._getItemIndex(relatedTarget);

        var fromIndex = this._getItemIndex(this._element.querySelector(SELECTOR_ACTIVE_ITEM));

        var slideEvent = jquery.Event(EVENT_SLIDE, {
          relatedTarget: relatedTarget,
          direction: eventDirectionName,
          from: fromIndex,
          to: targetIndex
        });
        jquery(this._element).trigger(slideEvent);
        return slideEvent;
      }
    }, {
      key: "_setActiveIndicatorElement",
      value: function _setActiveIndicatorElement(element) {
        if (this._indicatorsElement) {
          var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE$1));
          jquery(indicators).removeClass(CLASS_NAME_ACTIVE$1);

          var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

          if (nextIndicator) {
            jquery(nextIndicator).addClass(CLASS_NAME_ACTIVE$1);
          }
        }
      }
    }, {
      key: "_updateInterval",
      value: function _updateInterval() {
        var element = this._activeElement || this._element.querySelector(SELECTOR_ACTIVE_ITEM);

        if (!element) {
          return;
        }

        var elementInterval = parseInt(element.getAttribute('data-interval'), 10);

        if (elementInterval) {
          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
          this._config.interval = elementInterval;
        } else {
          this._config.interval = this._config.defaultInterval || this._config.interval;
        }
      }
    }, {
      key: "_slide",
      value: function _slide(direction, element) {
        var _this4 = this;

        var activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);

        var activeElementIndex = this._getItemIndex(activeElement);

        var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

        var nextElementIndex = this._getItemIndex(nextElement);

        var isCycling = Boolean(this._interval);
        var directionalClassName;
        var orderClassName;
        var eventDirectionName;

        if (direction === DIRECTION_NEXT) {
          directionalClassName = CLASS_NAME_LEFT;
          orderClassName = CLASS_NAME_NEXT;
          eventDirectionName = DIRECTION_LEFT;
        } else {
          directionalClassName = CLASS_NAME_RIGHT;
          orderClassName = CLASS_NAME_PREV;
          eventDirectionName = DIRECTION_RIGHT;
        }

        if (nextElement && jquery(nextElement).hasClass(CLASS_NAME_ACTIVE$1)) {
          this._isSliding = false;
          return;
        }

        var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

        if (slideEvent.isDefaultPrevented()) {
          return;
        }

        if (!activeElement || !nextElement) {
          // Some weirdness is happening, so we bail
          return;
        }

        this._isSliding = true;

        if (isCycling) {
          this.pause();
        }

        this._setActiveIndicatorElement(nextElement);

        this._activeElement = nextElement;
        var slidEvent = jquery.Event(EVENT_SLID, {
          relatedTarget: nextElement,
          direction: eventDirectionName,
          from: activeElementIndex,
          to: nextElementIndex
        });

        if (jquery(this._element).hasClass(CLASS_NAME_SLIDE)) {
          jquery(nextElement).addClass(orderClassName);
          Util.reflow(nextElement);
          jquery(activeElement).addClass(directionalClassName);
          jquery(nextElement).addClass(directionalClassName);
          var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
          jquery(activeElement).one(Util.TRANSITION_END, function () {
            jquery(nextElement).removeClass("".concat(directionalClassName, " ").concat(orderClassName)).addClass(CLASS_NAME_ACTIVE$1);
            jquery(activeElement).removeClass("".concat(CLASS_NAME_ACTIVE$1, " ").concat(orderClassName, " ").concat(directionalClassName));
            _this4._isSliding = false;
            setTimeout(function () {
              return jquery(_this4._element).trigger(slidEvent);
            }, 0);
          }).emulateTransitionEnd(transitionDuration);
        } else {
          jquery(activeElement).removeClass(CLASS_NAME_ACTIVE$1);
          jquery(nextElement).addClass(CLASS_NAME_ACTIVE$1);
          this._isSliding = false;
          jquery(this._element).trigger(slidEvent);
        }

        if (isCycling) {
          this.cycle();
        }
      } // Static

    }], [{
      key: "VERSION",
      get: function get() {
        return VERSION$2;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config) {
        return this.each(function () {
          var data = jquery(this).data(DATA_KEY$2);

          var _config = _objectSpread2(_objectSpread2({}, Default), jquery(this).data());

          if (_typeof(config) === 'object') {
            _config = _objectSpread2(_objectSpread2({}, _config), config);
          }

          var action = typeof config === 'string' ? config : _config.slide;

          if (!data) {
            data = new Carousel(this, _config);
            jquery(this).data(DATA_KEY$2, data);
          }

          if (typeof config === 'number') {
            data.to(config);
          } else if (typeof action === 'string') {
            if (typeof data[action] === 'undefined') {
              throw new TypeError("No method named \"".concat(action, "\""));
            }

            data[action]();
          } else if (_config.interval && _config.ride) {
            data.pause();
            data.cycle();
          }
        });
      }
    }, {
      key: "_dataApiClickHandler",
      value: function _dataApiClickHandler(event) {
        var selector = Util.getSelectorFromElement(this);

        if (!selector) {
          return;
        }

        var target = jquery(selector)[0];

        if (!target || !jquery(target).hasClass(CLASS_NAME_CAROUSEL)) {
          return;
        }

        var config = _objectSpread2(_objectSpread2({}, jquery(target).data()), jquery(this).data());

        var slideIndex = this.getAttribute('data-slide-to');

        if (slideIndex) {
          config.interval = false;
        }

        Carousel._jQueryInterface.call(jquery(target), config);

        if (slideIndex) {
          jquery(target).data(DATA_KEY$2).to(slideIndex);
        }

        event.preventDefault();
      }
    }]);

    return Carousel;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  jquery(document).on(EVENT_CLICK_DATA_API$2, SELECTOR_DATA_SLIDE, Carousel._dataApiClickHandler);
  jquery(window).on(EVENT_LOAD_DATA_API$1, function () {
    var carousels = [].slice.call(document.querySelectorAll(SELECTOR_DATA_RIDE));

    for (var i = 0, len = carousels.length; i < len; i++) {
      var $carousel = jquery(carousels[i]);

      Carousel._jQueryInterface.call($carousel, $carousel.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  jquery.fn[NAME$2] = Carousel._jQueryInterface;
  jquery.fn[NAME$2].Constructor = Carousel;

  jquery.fn[NAME$2].noConflict = function () {
    jquery.fn[NAME$2] = JQUERY_NO_CONFLICT$2;
    return Carousel._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$3 = 'collapse';
  var VERSION$3 = '4.6.0';
  var DATA_KEY$3 = 'bs.collapse';
  var EVENT_KEY$3 = ".".concat(DATA_KEY$3);
  var DATA_API_KEY$3 = '.data-api';
  var JQUERY_NO_CONFLICT$3 = jquery.fn[NAME$3];
  var Default$1 = {
    toggle: true,
    parent: ''
  };
  var DefaultType$1 = {
    toggle: 'boolean',
    parent: '(string|element)'
  };
  var EVENT_SHOW = "show".concat(EVENT_KEY$3);
  var EVENT_SHOWN = "shown".concat(EVENT_KEY$3);
  var EVENT_HIDE = "hide".concat(EVENT_KEY$3);
  var EVENT_HIDDEN = "hidden".concat(EVENT_KEY$3);
  var EVENT_CLICK_DATA_API$3 = "click".concat(EVENT_KEY$3).concat(DATA_API_KEY$3);
  var CLASS_NAME_SHOW$1 = 'show';
  var CLASS_NAME_COLLAPSE = 'collapse';
  var CLASS_NAME_COLLAPSING = 'collapsing';
  var CLASS_NAME_COLLAPSED = 'collapsed';
  var DIMENSION_WIDTH = 'width';
  var DIMENSION_HEIGHT = 'height';
  var SELECTOR_ACTIVES = '.show, .collapsing';
  var SELECTOR_DATA_TOGGLE$1 = '[data-toggle="collapse"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Collapse = /*#__PURE__*/function () {
    function Collapse(element, config) {
      _classCallCheck(this, Collapse);

      this._isTransitioning = false;
      this._element = element;
      this._config = this._getConfig(config);
      this._triggerArray = [].slice.call(document.querySelectorAll("[data-toggle=\"collapse\"][href=\"#".concat(element.id, "\"],") + "[data-toggle=\"collapse\"][data-target=\"#".concat(element.id, "\"]")));
      var toggleList = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$1));

      for (var i = 0, len = toggleList.length; i < len; i++) {
        var elem = toggleList[i];
        var selector = Util.getSelectorFromElement(elem);
        var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
          return foundElem === element;
        });

        if (selector !== null && filterElement.length > 0) {
          this._selector = selector;

          this._triggerArray.push(elem);
        }
      }

      this._parent = this._config.parent ? this._getParent() : null;

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }

      if (this._config.toggle) {
        this.toggle();
      }
    } // Getters


    _createClass(Collapse, [{
      key: "toggle",
      value: // Public
      function toggle() {
        if (jquery(this._element).hasClass(CLASS_NAME_SHOW$1)) {
          this.hide();
        } else {
          this.show();
        }
      }
    }, {
      key: "show",
      value: function show() {
        var _this = this;

        if (this._isTransitioning || jquery(this._element).hasClass(CLASS_NAME_SHOW$1)) {
          return;
        }

        var actives;
        var activesData;

        if (this._parent) {
          actives = [].slice.call(this._parent.querySelectorAll(SELECTOR_ACTIVES)).filter(function (elem) {
            if (typeof _this._config.parent === 'string') {
              return elem.getAttribute('data-parent') === _this._config.parent;
            }

            return elem.classList.contains(CLASS_NAME_COLLAPSE);
          });

          if (actives.length === 0) {
            actives = null;
          }
        }

        if (actives) {
          activesData = jquery(actives).not(this._selector).data(DATA_KEY$3);

          if (activesData && activesData._isTransitioning) {
            return;
          }
        }

        var startEvent = jquery.Event(EVENT_SHOW);
        jquery(this._element).trigger(startEvent);

        if (startEvent.isDefaultPrevented()) {
          return;
        }

        if (actives) {
          Collapse._jQueryInterface.call(jquery(actives).not(this._selector), 'hide');

          if (!activesData) {
            jquery(actives).data(DATA_KEY$3, null);
          }
        }

        var dimension = this._getDimension();

        jquery(this._element).removeClass(CLASS_NAME_COLLAPSE).addClass(CLASS_NAME_COLLAPSING);
        this._element.style[dimension] = 0;

        if (this._triggerArray.length) {
          jquery(this._triggerArray).removeClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', true);
        }

        this.setTransitioning(true);

        var complete = function complete() {
          jquery(_this._element).removeClass(CLASS_NAME_COLLAPSING).addClass("".concat(CLASS_NAME_COLLAPSE, " ").concat(CLASS_NAME_SHOW$1));
          _this._element.style[dimension] = '';

          _this.setTransitioning(false);

          jquery(_this._element).trigger(EVENT_SHOWN);
        };

        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        var scrollSize = "scroll".concat(capitalizedDimension);
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        jquery(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
        this._element.style[dimension] = "".concat(this._element[scrollSize], "px");
      }
    }, {
      key: "hide",
      value: function hide() {
        var _this2 = this;

        if (this._isTransitioning || !jquery(this._element).hasClass(CLASS_NAME_SHOW$1)) {
          return;
        }

        var startEvent = jquery.Event(EVENT_HIDE);
        jquery(this._element).trigger(startEvent);

        if (startEvent.isDefaultPrevented()) {
          return;
        }

        var dimension = this._getDimension();

        this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
        Util.reflow(this._element);
        jquery(this._element).addClass(CLASS_NAME_COLLAPSING).removeClass("".concat(CLASS_NAME_COLLAPSE, " ").concat(CLASS_NAME_SHOW$1));
        var triggerArrayLength = this._triggerArray.length;

        if (triggerArrayLength > 0) {
          for (var i = 0; i < triggerArrayLength; i++) {
            var trigger = this._triggerArray[i];
            var selector = Util.getSelectorFromElement(trigger);

            if (selector !== null) {
              var $elem = jquery([].slice.call(document.querySelectorAll(selector)));

              if (!$elem.hasClass(CLASS_NAME_SHOW$1)) {
                jquery(trigger).addClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', false);
              }
            }
          }
        }

        this.setTransitioning(true);

        var complete = function complete() {
          _this2.setTransitioning(false);

          jquery(_this2._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE).trigger(EVENT_HIDDEN);
        };

        this._element.style[dimension] = '';
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        jquery(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      }
    }, {
      key: "setTransitioning",
      value: function setTransitioning(isTransitioning) {
        this._isTransitioning = isTransitioning;
      }
    }, {
      key: "dispose",
      value: function dispose() {
        jquery.removeData(this._element, DATA_KEY$3);
        this._config = null;
        this._parent = null;
        this._element = null;
        this._triggerArray = null;
        this._isTransitioning = null;
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2({}, Default$1), config);
        config.toggle = Boolean(config.toggle); // Coerce string values

        Util.typeCheckConfig(NAME$3, config, DefaultType$1);
        return config;
      }
    }, {
      key: "_getDimension",
      value: function _getDimension() {
        var hasWidth = jquery(this._element).hasClass(DIMENSION_WIDTH);
        return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT;
      }
    }, {
      key: "_getParent",
      value: function _getParent() {
        var _this3 = this;

        var parent;

        if (Util.isElement(this._config.parent)) {
          parent = this._config.parent; // It's a jQuery object

          if (typeof this._config.parent.jquery !== 'undefined') {
            parent = this._config.parent[0];
          }
        } else {
          parent = document.querySelector(this._config.parent);
        }

        var selector = "[data-toggle=\"collapse\"][data-parent=\"".concat(this._config.parent, "\"]");
        var children = [].slice.call(parent.querySelectorAll(selector));
        jquery(children).each(function (i, element) {
          _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
        });
        return parent;
      }
    }, {
      key: "_addAriaAndCollapsedClass",
      value: function _addAriaAndCollapsedClass(element, triggerArray) {
        var isOpen = jquery(element).hasClass(CLASS_NAME_SHOW$1);

        if (triggerArray.length) {
          jquery(triggerArray).toggleClass(CLASS_NAME_COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
        }
      } // Static

    }], [{
      key: "VERSION",
      get: function get() {
        return VERSION$3;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$1;
      }
    }, {
      key: "_getTargetFromElement",
      value: function _getTargetFromElement(element) {
        var selector = Util.getSelectorFromElement(element);
        return selector ? document.querySelector(selector) : null;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config) {
        return this.each(function () {
          var $element = jquery(this);
          var data = $element.data(DATA_KEY$3);

          var _config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$1), $element.data()), _typeof(config) === 'object' && config ? config : {});

          if (!data && _config.toggle && typeof config === 'string' && /show|hide/.test(config)) {
            _config.toggle = false;
          }

          if (!data) {
            data = new Collapse(this, _config);
            $element.data(DATA_KEY$3, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Collapse;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  jquery(document).on(EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$1, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.currentTarget.tagName === 'A') {
      event.preventDefault();
    }

    var $trigger = jquery(this);
    var selector = Util.getSelectorFromElement(this);
    var selectors = [].slice.call(document.querySelectorAll(selector));
    jquery(selectors).each(function () {
      var $target = jquery(this);
      var data = $target.data(DATA_KEY$3);
      var config = data ? 'toggle' : $trigger.data();

      Collapse._jQueryInterface.call($target, config);
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  jquery.fn[NAME$3] = Collapse._jQueryInterface;
  jquery.fn[NAME$3].Constructor = Collapse;

  jquery.fn[NAME$3].noConflict = function () {
    jquery.fn[NAME$3] = JQUERY_NO_CONFLICT$3;
    return Collapse._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$4 = 'modal';
  var VERSION$4 = '4.6.0';
  var DATA_KEY$4 = 'bs.modal';
  var EVENT_KEY$4 = ".".concat(DATA_KEY$4);
  var DATA_API_KEY$4 = '.data-api';
  var JQUERY_NO_CONFLICT$4 = jquery.fn[NAME$4];
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var Default$2 = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };
  var DefaultType$2 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean',
    show: 'boolean'
  };
  var EVENT_HIDE$1 = "hide".concat(EVENT_KEY$4);
  var EVENT_HIDE_PREVENTED = "hidePrevented".concat(EVENT_KEY$4);
  var EVENT_HIDDEN$1 = "hidden".concat(EVENT_KEY$4);
  var EVENT_SHOW$1 = "show".concat(EVENT_KEY$4);
  var EVENT_SHOWN$1 = "shown".concat(EVENT_KEY$4);
  var EVENT_FOCUSIN = "focusin".concat(EVENT_KEY$4);
  var EVENT_RESIZE = "resize".concat(EVENT_KEY$4);
  var EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY$4);
  var EVENT_KEYDOWN_DISMISS = "keydown.dismiss".concat(EVENT_KEY$4);
  var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss".concat(EVENT_KEY$4);
  var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss".concat(EVENT_KEY$4);
  var EVENT_CLICK_DATA_API$4 = "click".concat(EVENT_KEY$4).concat(DATA_API_KEY$4);
  var CLASS_NAME_SCROLLABLE = 'modal-dialog-scrollable';
  var CLASS_NAME_SCROLLBAR_MEASURER = 'modal-scrollbar-measure';
  var CLASS_NAME_BACKDROP = 'modal-backdrop';
  var CLASS_NAME_OPEN = 'modal-open';
  var CLASS_NAME_FADE$1 = 'fade';
  var CLASS_NAME_SHOW$2 = 'show';
  var CLASS_NAME_STATIC = 'modal-static';
  var SELECTOR_DIALOG = '.modal-dialog';
  var SELECTOR_MODAL_BODY = '.modal-body';
  var SELECTOR_DATA_TOGGLE$2 = '[data-toggle="modal"]';
  var SELECTOR_DATA_DISMISS = '[data-dismiss="modal"]';
  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  var SELECTOR_STICKY_CONTENT = '.sticky-top';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Modal = /*#__PURE__*/function () {
    function Modal(element, config) {
      _classCallCheck(this, Modal);

      this._config = this._getConfig(config);
      this._element = element;
      this._dialog = element.querySelector(SELECTOR_DIALOG);
      this._backdrop = null;
      this._isShown = false;
      this._isBodyOverflowing = false;
      this._ignoreBackdropClick = false;
      this._isTransitioning = false;
      this._scrollbarWidth = 0;
    } // Getters


    _createClass(Modal, [{
      key: "toggle",
      value: // Public
      function toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
    }, {
      key: "show",
      value: function show(relatedTarget) {
        var _this = this;

        if (this._isShown || this._isTransitioning) {
          return;
        }

        if (jquery(this._element).hasClass(CLASS_NAME_FADE$1)) {
          this._isTransitioning = true;
        }

        var showEvent = jquery.Event(EVENT_SHOW$1, {
          relatedTarget: relatedTarget
        });
        jquery(this._element).trigger(showEvent);

        if (this._isShown || showEvent.isDefaultPrevented()) {
          return;
        }

        this._isShown = true;

        this._checkScrollbar();

        this._setScrollbar();

        this._adjustDialog();

        this._setEscapeEvent();

        this._setResizeEvent();

        jquery(this._element).on(EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function (event) {
          return _this.hide(event);
        });
        jquery(this._dialog).on(EVENT_MOUSEDOWN_DISMISS, function () {
          jquery(_this._element).one(EVENT_MOUSEUP_DISMISS, function (event) {
            if (jquery(event.target).is(_this._element)) {
              _this._ignoreBackdropClick = true;
            }
          });
        });

        this._showBackdrop(function () {
          return _this._showElement(relatedTarget);
        });
      }
    }, {
      key: "hide",
      value: function hide(event) {
        var _this2 = this;

        if (event) {
          event.preventDefault();
        }

        if (!this._isShown || this._isTransitioning) {
          return;
        }

        var hideEvent = jquery.Event(EVENT_HIDE$1);
        jquery(this._element).trigger(hideEvent);

        if (!this._isShown || hideEvent.isDefaultPrevented()) {
          return;
        }

        this._isShown = false;
        var transition = jquery(this._element).hasClass(CLASS_NAME_FADE$1);

        if (transition) {
          this._isTransitioning = true;
        }

        this._setEscapeEvent();

        this._setResizeEvent();

        jquery(document).off(EVENT_FOCUSIN);
        jquery(this._element).removeClass(CLASS_NAME_SHOW$2);
        jquery(this._element).off(EVENT_CLICK_DISMISS);
        jquery(this._dialog).off(EVENT_MOUSEDOWN_DISMISS);

        if (transition) {
          var transitionDuration = Util.getTransitionDurationFromElement(this._element);
          jquery(this._element).one(Util.TRANSITION_END, function (event) {
            return _this2._hideModal(event);
          }).emulateTransitionEnd(transitionDuration);
        } else {
          this._hideModal();
        }
      }
    }, {
      key: "dispose",
      value: function dispose() {
        [window, this._element, this._dialog].forEach(function (htmlElement) {
          return jquery(htmlElement).off(EVENT_KEY$4);
        });
        /**
         * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
         * Do not move `document` in `htmlElements` array
         * It will remove `EVENT_CLICK_DATA_API` event that should remain
         */

        jquery(document).off(EVENT_FOCUSIN);
        jquery.removeData(this._element, DATA_KEY$4);
        this._config = null;
        this._element = null;
        this._dialog = null;
        this._backdrop = null;
        this._isShown = null;
        this._isBodyOverflowing = null;
        this._ignoreBackdropClick = null;
        this._isTransitioning = null;
        this._scrollbarWidth = null;
      }
    }, {
      key: "handleUpdate",
      value: function handleUpdate() {
        this._adjustDialog();
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2({}, Default$2), config);
        Util.typeCheckConfig(NAME$4, config, DefaultType$2);
        return config;
      }
    }, {
      key: "_triggerBackdropTransition",
      value: function _triggerBackdropTransition() {
        var _this3 = this;

        var hideEventPrevented = jquery.Event(EVENT_HIDE_PREVENTED);
        jquery(this._element).trigger(hideEventPrevented);

        if (hideEventPrevented.isDefaultPrevented()) {
          return;
        }

        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

        if (!isModalOverflowing) {
          this._element.style.overflowY = 'hidden';
        }

        this._element.classList.add(CLASS_NAME_STATIC);

        var modalTransitionDuration = Util.getTransitionDurationFromElement(this._dialog);
        jquery(this._element).off(Util.TRANSITION_END);
        jquery(this._element).one(Util.TRANSITION_END, function () {
          _this3._element.classList.remove(CLASS_NAME_STATIC);

          if (!isModalOverflowing) {
            jquery(_this3._element).one(Util.TRANSITION_END, function () {
              _this3._element.style.overflowY = '';
            }).emulateTransitionEnd(_this3._element, modalTransitionDuration);
          }
        }).emulateTransitionEnd(modalTransitionDuration);

        this._element.focus();
      }
    }, {
      key: "_showElement",
      value: function _showElement(relatedTarget) {
        var _this4 = this;

        var transition = jquery(this._element).hasClass(CLASS_NAME_FADE$1);
        var modalBody = this._dialog ? this._dialog.querySelector(SELECTOR_MODAL_BODY) : null;

        if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
          // Don't move modal's DOM position
          document.body.appendChild(this._element);
        }

        this._element.style.display = 'block';

        this._element.removeAttribute('aria-hidden');

        this._element.setAttribute('aria-modal', true);

        this._element.setAttribute('role', 'dialog');

        if (jquery(this._dialog).hasClass(CLASS_NAME_SCROLLABLE) && modalBody) {
          modalBody.scrollTop = 0;
        } else {
          this._element.scrollTop = 0;
        }

        if (transition) {
          Util.reflow(this._element);
        }

        jquery(this._element).addClass(CLASS_NAME_SHOW$2);

        if (this._config.focus) {
          this._enforceFocus();
        }

        var shownEvent = jquery.Event(EVENT_SHOWN$1, {
          relatedTarget: relatedTarget
        });

        var transitionComplete = function transitionComplete() {
          if (_this4._config.focus) {
            _this4._element.focus();
          }

          _this4._isTransitioning = false;
          jquery(_this4._element).trigger(shownEvent);
        };

        if (transition) {
          var transitionDuration = Util.getTransitionDurationFromElement(this._dialog);
          jquery(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
        } else {
          transitionComplete();
        }
      }
    }, {
      key: "_enforceFocus",
      value: function _enforceFocus() {
        var _this5 = this;

        jquery(document).off(EVENT_FOCUSIN) // Guard against infinite focus loop
        .on(EVENT_FOCUSIN, function (event) {
          if (document !== event.target && _this5._element !== event.target && jquery(_this5._element).has(event.target).length === 0) {
            _this5._element.focus();
          }
        });
      }
    }, {
      key: "_setEscapeEvent",
      value: function _setEscapeEvent() {
        var _this6 = this;

        if (this._isShown) {
          jquery(this._element).on(EVENT_KEYDOWN_DISMISS, function (event) {
            if (_this6._config.keyboard && event.which === ESCAPE_KEYCODE) {
              event.preventDefault();

              _this6.hide();
            } else if (!_this6._config.keyboard && event.which === ESCAPE_KEYCODE) {
              _this6._triggerBackdropTransition();
            }
          });
        } else if (!this._isShown) {
          jquery(this._element).off(EVENT_KEYDOWN_DISMISS);
        }
      }
    }, {
      key: "_setResizeEvent",
      value: function _setResizeEvent() {
        var _this7 = this;

        if (this._isShown) {
          jquery(window).on(EVENT_RESIZE, function (event) {
            return _this7.handleUpdate(event);
          });
        } else {
          jquery(window).off(EVENT_RESIZE);
        }
      }
    }, {
      key: "_hideModal",
      value: function _hideModal() {
        var _this8 = this;

        this._element.style.display = 'none';

        this._element.setAttribute('aria-hidden', true);

        this._element.removeAttribute('aria-modal');

        this._element.removeAttribute('role');

        this._isTransitioning = false;

        this._showBackdrop(function () {
          jquery(document.body).removeClass(CLASS_NAME_OPEN);

          _this8._resetAdjustments();

          _this8._resetScrollbar();

          jquery(_this8._element).trigger(EVENT_HIDDEN$1);
        });
      }
    }, {
      key: "_removeBackdrop",
      value: function _removeBackdrop() {
        if (this._backdrop) {
          jquery(this._backdrop).remove();
          this._backdrop = null;
        }
      }
    }, {
      key: "_showBackdrop",
      value: function _showBackdrop(callback) {
        var _this9 = this;

        var animate = jquery(this._element).hasClass(CLASS_NAME_FADE$1) ? CLASS_NAME_FADE$1 : '';

        if (this._isShown && this._config.backdrop) {
          this._backdrop = document.createElement('div');
          this._backdrop.className = CLASS_NAME_BACKDROP;

          if (animate) {
            this._backdrop.classList.add(animate);
          }

          jquery(this._backdrop).appendTo(document.body);
          jquery(this._element).on(EVENT_CLICK_DISMISS, function (event) {
            if (_this9._ignoreBackdropClick) {
              _this9._ignoreBackdropClick = false;
              return;
            }

            if (event.target !== event.currentTarget) {
              return;
            }

            if (_this9._config.backdrop === 'static') {
              _this9._triggerBackdropTransition();
            } else {
              _this9.hide();
            }
          });

          if (animate) {
            Util.reflow(this._backdrop);
          }

          jquery(this._backdrop).addClass(CLASS_NAME_SHOW$2);

          if (!callback) {
            return;
          }

          if (!animate) {
            callback();
            return;
          }

          var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
          jquery(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
        } else if (!this._isShown && this._backdrop) {
          jquery(this._backdrop).removeClass(CLASS_NAME_SHOW$2);

          var callbackRemove = function callbackRemove() {
            _this9._removeBackdrop();

            if (callback) {
              callback();
            }
          };

          if (jquery(this._element).hasClass(CLASS_NAME_FADE$1)) {
            var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);

            jquery(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
          } else {
            callbackRemove();
          }
        } else if (callback) {
          callback();
        }
      } // ----------------------------------------------------------------------
      // the following methods are used to handle overflowing modals
      // todo (fat): these should probably be refactored out of modal.js
      // ----------------------------------------------------------------------

    }, {
      key: "_adjustDialog",
      value: function _adjustDialog() {
        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

        if (!this._isBodyOverflowing && isModalOverflowing) {
          this._element.style.paddingLeft = "".concat(this._scrollbarWidth, "px");
        }

        if (this._isBodyOverflowing && !isModalOverflowing) {
          this._element.style.paddingRight = "".concat(this._scrollbarWidth, "px");
        }
      }
    }, {
      key: "_resetAdjustments",
      value: function _resetAdjustments() {
        this._element.style.paddingLeft = '';
        this._element.style.paddingRight = '';
      }
    }, {
      key: "_checkScrollbar",
      value: function _checkScrollbar() {
        var rect = document.body.getBoundingClientRect();
        this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;
        this._scrollbarWidth = this._getScrollbarWidth();
      }
    }, {
      key: "_setScrollbar",
      value: function _setScrollbar() {
        var _this10 = this;

        if (this._isBodyOverflowing) {
          // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
          //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
          var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
          var stickyContent = [].slice.call(document.querySelectorAll(SELECTOR_STICKY_CONTENT)); // Adjust fixed content padding

          jquery(fixedContent).each(function (index, element) {
            var actualPadding = element.style.paddingRight;
            var calculatedPadding = jquery(element).css('padding-right');
            jquery(element).data('padding-right', actualPadding).css('padding-right', "".concat(parseFloat(calculatedPadding) + _this10._scrollbarWidth, "px"));
          }); // Adjust sticky content margin

          jquery(stickyContent).each(function (index, element) {
            var actualMargin = element.style.marginRight;
            var calculatedMargin = jquery(element).css('margin-right');
            jquery(element).data('margin-right', actualMargin).css('margin-right', "".concat(parseFloat(calculatedMargin) - _this10._scrollbarWidth, "px"));
          }); // Adjust body padding

          var actualPadding = document.body.style.paddingRight;
          var calculatedPadding = jquery(document.body).css('padding-right');
          jquery(document.body).data('padding-right', actualPadding).css('padding-right', "".concat(parseFloat(calculatedPadding) + this._scrollbarWidth, "px"));
        }

        jquery(document.body).addClass(CLASS_NAME_OPEN);
      }
    }, {
      key: "_resetScrollbar",
      value: function _resetScrollbar() {
        // Restore fixed content padding
        var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
        jquery(fixedContent).each(function (index, element) {
          var padding = jquery(element).data('padding-right');
          jquery(element).removeData('padding-right');
          element.style.paddingRight = padding ? padding : '';
        }); // Restore sticky content

        var elements = [].slice.call(document.querySelectorAll("".concat(SELECTOR_STICKY_CONTENT)));
        jquery(elements).each(function (index, element) {
          var margin = jquery(element).data('margin-right');

          if (typeof margin !== 'undefined') {
            jquery(element).css('margin-right', margin).removeData('margin-right');
          }
        }); // Restore body padding

        var padding = jquery(document.body).data('padding-right');
        jquery(document.body).removeData('padding-right');
        document.body.style.paddingRight = padding ? padding : '';
      }
    }, {
      key: "_getScrollbarWidth",
      value: function _getScrollbarWidth() {
        // thx d.walsh
        var scrollDiv = document.createElement('div');
        scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
      } // Static

    }], [{
      key: "VERSION",
      get: function get() {
        return VERSION$4;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$2;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config, relatedTarget) {
        return this.each(function () {
          var data = jquery(this).data(DATA_KEY$4);

          var _config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$2), jquery(this).data()), _typeof(config) === 'object' && config ? config : {});

          if (!data) {
            data = new Modal(this, _config);
            jquery(this).data(DATA_KEY$4, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config](relatedTarget);
          } else if (_config.show) {
            data.show(relatedTarget);
          }
        });
      }
    }]);

    return Modal;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  jquery(document).on(EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$2, function (event) {
    var _this11 = this;

    var target;
    var selector = Util.getSelectorFromElement(this);

    if (selector) {
      target = document.querySelector(selector);
    }

    var config = jquery(target).data(DATA_KEY$4) ? 'toggle' : _objectSpread2(_objectSpread2({}, jquery(target).data()), jquery(this).data());

    if (this.tagName === 'A' || this.tagName === 'AREA') {
      event.preventDefault();
    }

    var $target = jquery(target).one(EVENT_SHOW$1, function (showEvent) {
      if (showEvent.isDefaultPrevented()) {
        // Only register focus restorer if modal will actually get shown
        return;
      }

      $target.one(EVENT_HIDDEN$1, function () {
        if (jquery(_this11).is(':visible')) {
          _this11.focus();
        }
      });
    });

    Modal._jQueryInterface.call(jquery(target), config, this);
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  jquery.fn[NAME$4] = Modal._jQueryInterface;
  jquery.fn[NAME$4].Constructor = Modal;

  jquery.fn[NAME$4].noConflict = function () {
    jquery.fn[NAME$4] = JQUERY_NO_CONFLICT$4;
    return Modal._jQueryInterface;
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.6.0): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var DefaultWhitelist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

  function allowedAttribute(attr, allowedAttributeList) {
    var attrName = attr.nodeName.toLowerCase();

    if (allowedAttributeList.indexOf(attrName) !== -1) {
      if (uriAttrs.indexOf(attrName) !== -1) {
        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
      }

      return true;
    }

    var regExp = allowedAttributeList.filter(function (attrRegex) {
      return attrRegex instanceof RegExp;
    }); // Check if a regular expression validates the attribute.

    for (var i = 0, len = regExp.length; i < len; i++) {
      if (attrName.match(regExp[i])) {
        return true;
      }
    }

    return false;
  }

  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
    if (unsafeHtml.length === 0) {
      return unsafeHtml;
    }

    if (sanitizeFn && typeof sanitizeFn === 'function') {
      return sanitizeFn(unsafeHtml);
    }

    var domParser = new window.DOMParser();
    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    var whitelistKeys = Object.keys(whiteList);
    var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));

    var _loop = function _loop(i, len) {
      var el = elements[i];
      var elName = el.nodeName.toLowerCase();

      if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
        el.parentNode.removeChild(el);
        return "continue";
      }

      var attributeList = [].slice.call(el.attributes);
      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
      attributeList.forEach(function (attr) {
        if (!allowedAttribute(attr, whitelistedAttributes)) {
          el.removeAttribute(attr.nodeName);
        }
      });
    };

    for (var i = 0, len = elements.length; i < len; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }

    return createdDocument.body.innerHTML;
  }

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$5 = 'tooltip';
  var VERSION$5 = '4.6.0';
  var DATA_KEY$5 = 'bs.tooltip';
  var EVENT_KEY$5 = ".".concat(DATA_KEY$5);
  var JQUERY_NO_CONFLICT$5 = jquery.fn[NAME$5];
  var CLASS_PREFIX = 'bs-tooltip';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)".concat(CLASS_PREFIX, "\\S+"), 'g');
  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
  var DefaultType$3 = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(number|string|function)',
    container: '(string|element|boolean)',
    fallbackPlacement: '(string|array)',
    boundary: '(string|element)',
    customClass: '(string|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    whiteList: 'object',
    popperConfig: '(null|object)'
  };
  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: 'right',
    BOTTOM: 'bottom',
    LEFT: 'left'
  };
  var Default$3 = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: 0,
    container: false,
    fallbackPlacement: 'flip',
    boundary: 'scrollParent',
    customClass: '',
    sanitize: true,
    sanitizeFn: null,
    whiteList: DefaultWhitelist,
    popperConfig: null
  };
  var HOVER_STATE_SHOW = 'show';
  var HOVER_STATE_OUT = 'out';
  var Event = {
    HIDE: "hide".concat(EVENT_KEY$5),
    HIDDEN: "hidden".concat(EVENT_KEY$5),
    SHOW: "show".concat(EVENT_KEY$5),
    SHOWN: "shown".concat(EVENT_KEY$5),
    INSERTED: "inserted".concat(EVENT_KEY$5),
    CLICK: "click".concat(EVENT_KEY$5),
    FOCUSIN: "focusin".concat(EVENT_KEY$5),
    FOCUSOUT: "focusout".concat(EVENT_KEY$5),
    MOUSEENTER: "mouseenter".concat(EVENT_KEY$5),
    MOUSELEAVE: "mouseleave".concat(EVENT_KEY$5)
  };
  var CLASS_NAME_FADE$2 = 'fade';
  var CLASS_NAME_SHOW$3 = 'show';
  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  var SELECTOR_ARROW = '.arrow';
  var TRIGGER_HOVER = 'hover';
  var TRIGGER_FOCUS = 'focus';
  var TRIGGER_CLICK = 'click';
  var TRIGGER_MANUAL = 'manual';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tooltip = /*#__PURE__*/function () {
    function Tooltip(element, config) {
      _classCallCheck(this, Tooltip);

      if (typeof Popper$1 === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
      } // private


      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null; // Protected

      this.element = element;
      this.config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    } // Getters


    _createClass(Tooltip, [{
      key: "enable",
      value: // Public
      function enable() {
        this._isEnabled = true;
      }
    }, {
      key: "disable",
      value: function disable() {
        this._isEnabled = false;
      }
    }, {
      key: "toggleEnabled",
      value: function toggleEnabled() {
        this._isEnabled = !this._isEnabled;
      }
    }, {
      key: "toggle",
      value: function toggle(event) {
        if (!this._isEnabled) {
          return;
        }

        if (event) {
          var dataKey = this.constructor.DATA_KEY;
          var context = jquery(event.currentTarget).data(dataKey);

          if (!context) {
            context = new this.constructor(event.currentTarget, this._getDelegateConfig());
            jquery(event.currentTarget).data(dataKey, context);
          }

          context._activeTrigger.click = !context._activeTrigger.click;

          if (context._isWithActiveTrigger()) {
            context._enter(null, context);
          } else {
            context._leave(null, context);
          }
        } else {
          if (jquery(this.getTipElement()).hasClass(CLASS_NAME_SHOW$3)) {
            this._leave(null, this);

            return;
          }

          this._enter(null, this);
        }
      }
    }, {
      key: "dispose",
      value: function dispose() {
        clearTimeout(this._timeout);
        jquery.removeData(this.element, this.constructor.DATA_KEY);
        jquery(this.element).off(this.constructor.EVENT_KEY);
        jquery(this.element).closest('.modal').off('hide.bs.modal', this._hideModalHandler);

        if (this.tip) {
          jquery(this.tip).remove();
        }

        this._isEnabled = null;
        this._timeout = null;
        this._hoverState = null;
        this._activeTrigger = null;

        if (this._popper) {
          this._popper.destroy();
        }

        this._popper = null;
        this.element = null;
        this.config = null;
        this.tip = null;
      }
    }, {
      key: "show",
      value: function show() {
        var _this = this;

        if (jquery(this.element).css('display') === 'none') {
          throw new Error('Please use show on visible elements');
        }

        var showEvent = jquery.Event(this.constructor.Event.SHOW);

        if (this.isWithContent() && this._isEnabled) {
          jquery(this.element).trigger(showEvent);
          var shadowRoot = Util.findShadowRoot(this.element);
          var isInTheDom = jquery.contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);

          if (showEvent.isDefaultPrevented() || !isInTheDom) {
            return;
          }

          var tip = this.getTipElement();
          var tipId = Util.getUID(this.constructor.NAME);
          tip.setAttribute('id', tipId);
          this.element.setAttribute('aria-describedby', tipId);
          this.setContent();

          if (this.config.animation) {
            jquery(tip).addClass(CLASS_NAME_FADE$2);
          }

          var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

          var attachment = this._getAttachment(placement);

          this.addAttachmentClass(attachment);

          var container = this._getContainer();

          jquery(tip).data(this.constructor.DATA_KEY, this);

          if (!jquery.contains(this.element.ownerDocument.documentElement, this.tip)) {
            jquery(tip).appendTo(container);
          }

          jquery(this.element).trigger(this.constructor.Event.INSERTED);
          this._popper = new Popper$1(this.element, tip, this._getPopperConfig(attachment));
          jquery(tip).addClass(CLASS_NAME_SHOW$3);
          jquery(tip).addClass(this.config.customClass); // If this is a touch-enabled device we add extra
          // empty mouseover listeners to the body's immediate children;
          // only needed because of broken event delegation on iOS
          // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

          if ('ontouchstart' in document.documentElement) {
            jquery(document.body).children().on('mouseover', null, jquery.noop);
          }

          var complete = function complete() {
            if (_this.config.animation) {
              _this._fixTransition();
            }

            var prevHoverState = _this._hoverState;
            _this._hoverState = null;
            jquery(_this.element).trigger(_this.constructor.Event.SHOWN);

            if (prevHoverState === HOVER_STATE_OUT) {
              _this._leave(null, _this);
            }
          };

          if (jquery(this.tip).hasClass(CLASS_NAME_FADE$2)) {
            var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
            jquery(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
          } else {
            complete();
          }
        }
      }
    }, {
      key: "hide",
      value: function hide(callback) {
        var _this2 = this;

        var tip = this.getTipElement();
        var hideEvent = jquery.Event(this.constructor.Event.HIDE);

        var complete = function complete() {
          if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
            tip.parentNode.removeChild(tip);
          }

          _this2._cleanTipClass();

          _this2.element.removeAttribute('aria-describedby');

          jquery(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

          if (_this2._popper !== null) {
            _this2._popper.destroy();
          }

          if (callback) {
            callback();
          }
        };

        jquery(this.element).trigger(hideEvent);

        if (hideEvent.isDefaultPrevented()) {
          return;
        }

        jquery(tip).removeClass(CLASS_NAME_SHOW$3); // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support

        if ('ontouchstart' in document.documentElement) {
          jquery(document.body).children().off('mouseover', null, jquery.noop);
        }

        this._activeTrigger[TRIGGER_CLICK] = false;
        this._activeTrigger[TRIGGER_FOCUS] = false;
        this._activeTrigger[TRIGGER_HOVER] = false;

        if (jquery(this.tip).hasClass(CLASS_NAME_FADE$2)) {
          var transitionDuration = Util.getTransitionDurationFromElement(tip);
          jquery(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
        } else {
          complete();
        }

        this._hoverState = '';
      }
    }, {
      key: "update",
      value: function update() {
        if (this._popper !== null) {
          this._popper.scheduleUpdate();
        }
      } // Protected

    }, {
      key: "isWithContent",
      value: function isWithContent() {
        return Boolean(this.getTitle());
      }
    }, {
      key: "addAttachmentClass",
      value: function addAttachmentClass(attachment) {
        jquery(this.getTipElement()).addClass("".concat(CLASS_PREFIX, "-").concat(attachment));
      }
    }, {
      key: "getTipElement",
      value: function getTipElement() {
        this.tip = this.tip || jquery(this.config.template)[0];
        return this.tip;
      }
    }, {
      key: "setContent",
      value: function setContent() {
        var tip = this.getTipElement();
        this.setElementContent(jquery(tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)), this.getTitle());
        jquery(tip).removeClass("".concat(CLASS_NAME_FADE$2, " ").concat(CLASS_NAME_SHOW$3));
      }
    }, {
      key: "setElementContent",
      value: function setElementContent($element, content) {
        if (_typeof(content) === 'object' && (content.nodeType || content.jquery)) {
          // Content is a DOM node or a jQuery
          if (this.config.html) {
            if (!jquery(content).parent().is($element)) {
              $element.empty().append(content);
            }
          } else {
            $element.text(jquery(content).text());
          }

          return;
        }

        if (this.config.html) {
          if (this.config.sanitize) {
            content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
          }

          $element.html(content);
        } else {
          $element.text(content);
        }
      }
    }, {
      key: "getTitle",
      value: function getTitle() {
        var title = this.element.getAttribute('data-original-title');

        if (!title) {
          title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
        }

        return title;
      } // Private

    }, {
      key: "_getPopperConfig",
      value: function _getPopperConfig(attachment) {
        var _this3 = this;

        var defaultBsConfig = {
          placement: attachment,
          modifiers: {
            offset: this._getOffset(),
            flip: {
              behavior: this.config.fallbackPlacement
            },
            arrow: {
              element: SELECTOR_ARROW
            },
            preventOverflow: {
              boundariesElement: this.config.boundary
            }
          },
          onCreate: function onCreate(data) {
            if (data.originalPlacement !== data.placement) {
              _this3._handlePopperPlacementChange(data);
            }
          },
          onUpdate: function onUpdate(data) {
            return _this3._handlePopperPlacementChange(data);
          }
        };
        return _objectSpread2(_objectSpread2({}, defaultBsConfig), this.config.popperConfig);
      }
    }, {
      key: "_getOffset",
      value: function _getOffset() {
        var _this4 = this;

        var offset = {};

        if (typeof this.config.offset === 'function') {
          offset.fn = function (data) {
            data.offsets = _objectSpread2(_objectSpread2({}, data.offsets), _this4.config.offset(data.offsets, _this4.element) || {});
            return data;
          };
        } else {
          offset.offset = this.config.offset;
        }

        return offset;
      }
    }, {
      key: "_getContainer",
      value: function _getContainer() {
        if (this.config.container === false) {
          return document.body;
        }

        if (Util.isElement(this.config.container)) {
          return jquery(this.config.container);
        }

        return jquery(document).find(this.config.container);
      }
    }, {
      key: "_getAttachment",
      value: function _getAttachment(placement) {
        return AttachmentMap[placement.toUpperCase()];
      }
    }, {
      key: "_setListeners",
      value: function _setListeners() {
        var _this5 = this;

        var triggers = this.config.trigger.split(' ');
        triggers.forEach(function (trigger) {
          if (trigger === 'click') {
            jquery(_this5.element).on(_this5.constructor.Event.CLICK, _this5.config.selector, function (event) {
              return _this5.toggle(event);
            });
          } else if (trigger !== TRIGGER_MANUAL) {
            var eventIn = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;
            var eventOut = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;
            jquery(_this5.element).on(eventIn, _this5.config.selector, function (event) {
              return _this5._enter(event);
            }).on(eventOut, _this5.config.selector, function (event) {
              return _this5._leave(event);
            });
          }
        });

        this._hideModalHandler = function () {
          if (_this5.element) {
            _this5.hide();
          }
        };

        jquery(this.element).closest('.modal').on('hide.bs.modal', this._hideModalHandler);

        if (this.config.selector) {
          this.config = _objectSpread2(_objectSpread2({}, this.config), {}, {
            trigger: 'manual',
            selector: ''
          });
        } else {
          this._fixTitle();
        }
      }
    }, {
      key: "_fixTitle",
      value: function _fixTitle() {
        var titleType = _typeof(this.element.getAttribute('data-original-title'));

        if (this.element.getAttribute('title') || titleType !== 'string') {
          this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
          this.element.setAttribute('title', '');
        }
      }
    }, {
      key: "_enter",
      value: function _enter(event, context) {
        var dataKey = this.constructor.DATA_KEY;
        context = context || jquery(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          jquery(event.currentTarget).data(dataKey, context);
        }

        if (event) {
          context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
        }

        if (jquery(context.getTipElement()).hasClass(CLASS_NAME_SHOW$3) || context._hoverState === HOVER_STATE_SHOW) {
          context._hoverState = HOVER_STATE_SHOW;
          return;
        }

        clearTimeout(context._timeout);
        context._hoverState = HOVER_STATE_SHOW;

        if (!context.config.delay || !context.config.delay.show) {
          context.show();
          return;
        }

        context._timeout = setTimeout(function () {
          if (context._hoverState === HOVER_STATE_SHOW) {
            context.show();
          }
        }, context.config.delay.show);
      }
    }, {
      key: "_leave",
      value: function _leave(event, context) {
        var dataKey = this.constructor.DATA_KEY;
        context = context || jquery(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          jquery(event.currentTarget).data(dataKey, context);
        }

        if (event) {
          context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;
        }

        if (context._isWithActiveTrigger()) {
          return;
        }

        clearTimeout(context._timeout);
        context._hoverState = HOVER_STATE_OUT;

        if (!context.config.delay || !context.config.delay.hide) {
          context.hide();
          return;
        }

        context._timeout = setTimeout(function () {
          if (context._hoverState === HOVER_STATE_OUT) {
            context.hide();
          }
        }, context.config.delay.hide);
      }
    }, {
      key: "_isWithActiveTrigger",
      value: function _isWithActiveTrigger() {
        for (var trigger in this._activeTrigger) {
          if (this._activeTrigger[trigger]) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        var dataAttributes = jquery(this.element).data();
        Object.keys(dataAttributes).forEach(function (dataAttr) {
          if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
            delete dataAttributes[dataAttr];
          }
        });
        config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), dataAttributes), _typeof(config) === 'object' && config ? config : {});

        if (typeof config.delay === 'number') {
          config.delay = {
            show: config.delay,
            hide: config.delay
          };
        }

        if (typeof config.title === 'number') {
          config.title = config.title.toString();
        }

        if (typeof config.content === 'number') {
          config.content = config.content.toString();
        }

        Util.typeCheckConfig(NAME$5, config, this.constructor.DefaultType);

        if (config.sanitize) {
          config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
        }

        return config;
      }
    }, {
      key: "_getDelegateConfig",
      value: function _getDelegateConfig() {
        var config = {};

        if (this.config) {
          for (var key in this.config) {
            if (this.constructor.Default[key] !== this.config[key]) {
              config[key] = this.config[key];
            }
          }
        }

        return config;
      }
    }, {
      key: "_cleanTipClass",
      value: function _cleanTipClass() {
        var $tip = jquery(this.getTipElement());
        var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

        if (tabClass !== null && tabClass.length) {
          $tip.removeClass(tabClass.join(''));
        }
      }
    }, {
      key: "_handlePopperPlacementChange",
      value: function _handlePopperPlacementChange(popperData) {
        this.tip = popperData.instance.popper;

        this._cleanTipClass();

        this.addAttachmentClass(this._getAttachment(popperData.placement));
      }
    }, {
      key: "_fixTransition",
      value: function _fixTransition() {
        var tip = this.getTipElement();
        var initConfigAnimation = this.config.animation;

        if (tip.getAttribute('x-placement') !== null) {
          return;
        }

        jquery(tip).removeClass(CLASS_NAME_FADE$2);
        this.config.animation = false;
        this.hide();
        this.show();
        this.config.animation = initConfigAnimation;
      } // Static

    }], [{
      key: "VERSION",
      get: function get() {
        return VERSION$5;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$3;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$5;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$5;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$5;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$3;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config) {
        return this.each(function () {
          var $element = jquery(this);
          var data = $element.data(DATA_KEY$5);

          var _config = _typeof(config) === 'object' && config;

          if (!data && /dispose|hide/.test(config)) {
            return;
          }

          if (!data) {
            data = new Tooltip(this, _config);
            $element.data(DATA_KEY$5, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Tooltip;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  jquery.fn[NAME$5] = Tooltip._jQueryInterface;
  jquery.fn[NAME$5].Constructor = Tooltip;

  jquery.fn[NAME$5].noConflict = function () {
    jquery.fn[NAME$5] = JQUERY_NO_CONFLICT$5;
    return Tooltip._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$6 = 'popover';
  var VERSION$6 = '4.6.0';
  var DATA_KEY$6 = 'bs.popover';
  var EVENT_KEY$6 = ".".concat(DATA_KEY$6);
  var JQUERY_NO_CONFLICT$6 = jquery.fn[NAME$6];
  var CLASS_PREFIX$1 = 'bs-popover';
  var BSCLS_PREFIX_REGEX$1 = new RegExp("(^|\\s)".concat(CLASS_PREFIX$1, "\\S+"), 'g');

  var Default$4 = _objectSpread2(_objectSpread2({}, Tooltip.Default), {}, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
  });

  var DefaultType$4 = _objectSpread2(_objectSpread2({}, Tooltip.DefaultType), {}, {
    content: '(string|element|function)'
  });

  var CLASS_NAME_FADE$3 = 'fade';
  var CLASS_NAME_SHOW$4 = 'show';
  var SELECTOR_TITLE = '.popover-header';
  var SELECTOR_CONTENT = '.popover-body';
  var Event$1 = {
    HIDE: "hide".concat(EVENT_KEY$6),
    HIDDEN: "hidden".concat(EVENT_KEY$6),
    SHOW: "show".concat(EVENT_KEY$6),
    SHOWN: "shown".concat(EVENT_KEY$6),
    INSERTED: "inserted".concat(EVENT_KEY$6),
    CLICK: "click".concat(EVENT_KEY$6),
    FOCUSIN: "focusin".concat(EVENT_KEY$6),
    FOCUSOUT: "focusout".concat(EVENT_KEY$6),
    MOUSEENTER: "mouseenter".concat(EVENT_KEY$6),
    MOUSELEAVE: "mouseleave".concat(EVENT_KEY$6)
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Popover = /*#__PURE__*/function (_Tooltip) {
    _inherits(Popover, _Tooltip);

    var _super = _createSuper(Popover);

    function Popover() {
      _classCallCheck(this, Popover);

      return _super.apply(this, arguments);
    }

    _createClass(Popover, [{
      key: "isWithContent",
      value: // Overrides
      function isWithContent() {
        return this.getTitle() || this._getContent();
      }
    }, {
      key: "addAttachmentClass",
      value: function addAttachmentClass(attachment) {
        jquery(this.getTipElement()).addClass("".concat(CLASS_PREFIX$1, "-").concat(attachment));
      }
    }, {
      key: "getTipElement",
      value: function getTipElement() {
        this.tip = this.tip || jquery(this.config.template)[0];
        return this.tip;
      }
    }, {
      key: "setContent",
      value: function setContent() {
        var $tip = jquery(this.getTipElement()); // We use append for html objects to maintain js events

        this.setElementContent($tip.find(SELECTOR_TITLE), this.getTitle());

        var content = this._getContent();

        if (typeof content === 'function') {
          content = content.call(this.element);
        }

        this.setElementContent($tip.find(SELECTOR_CONTENT), content);
        $tip.removeClass("".concat(CLASS_NAME_FADE$3, " ").concat(CLASS_NAME_SHOW$4));
      } // Private

    }, {
      key: "_getContent",
      value: function _getContent() {
        return this.element.getAttribute('data-content') || this.config.content;
      }
    }, {
      key: "_cleanTipClass",
      value: function _cleanTipClass() {
        var $tip = jquery(this.getTipElement());
        var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX$1);

        if (tabClass !== null && tabClass.length > 0) {
          $tip.removeClass(tabClass.join(''));
        }
      } // Static

    }], [{
      key: "VERSION",
      get: // Getters
      function get() {
        return VERSION$6;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$4;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$6;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$6;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$1;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$6;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$4;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config) {
        return this.each(function () {
          var data = jquery(this).data(DATA_KEY$6);

          var _config = _typeof(config) === 'object' ? config : null;

          if (!data && /dispose|hide/.test(config)) {
            return;
          }

          if (!data) {
            data = new Popover(this, _config);
            jquery(this).data(DATA_KEY$6, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Popover;
  }(Tooltip);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  jquery.fn[NAME$6] = Popover._jQueryInterface;
  jquery.fn[NAME$6].Constructor = Popover;

  jquery.fn[NAME$6].noConflict = function () {
    jquery.fn[NAME$6] = JQUERY_NO_CONFLICT$6;
    return Popover._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$7 = 'scrollspy';
  var VERSION$7 = '4.6.0';
  var DATA_KEY$7 = 'bs.scrollspy';
  var EVENT_KEY$7 = ".".concat(DATA_KEY$7);
  var DATA_API_KEY$5 = '.data-api';
  var JQUERY_NO_CONFLICT$7 = jquery.fn[NAME$7];
  var Default$5 = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  var DefaultType$5 = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  var EVENT_ACTIVATE = "activate".concat(EVENT_KEY$7);
  var EVENT_SCROLL = "scroll".concat(EVENT_KEY$7);
  var EVENT_LOAD_DATA_API$2 = "load".concat(EVENT_KEY$7).concat(DATA_API_KEY$5);
  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  var CLASS_NAME_ACTIVE$2 = 'active';
  var SELECTOR_DATA_SPY = '[data-spy="scroll"]';
  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  var SELECTOR_NAV_LINKS = '.nav-link';
  var SELECTOR_NAV_ITEMS = '.nav-item';
  var SELECTOR_LIST_ITEMS = '.list-group-item';
  var SELECTOR_DROPDOWN = '.dropdown';
  var SELECTOR_DROPDOWN_ITEMS = '.dropdown-item';
  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  var METHOD_OFFSET = 'offset';
  var METHOD_POSITION = 'position';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var ScrollSpy = /*#__PURE__*/function () {
    function ScrollSpy(element, config) {
      var _this = this;

      _classCallCheck(this, ScrollSpy);

      this._element = element;
      this._scrollElement = element.tagName === 'BODY' ? window : element;
      this._config = this._getConfig(config);
      this._selector = "".concat(this._config.target, " ").concat(SELECTOR_NAV_LINKS, ",") + "".concat(this._config.target, " ").concat(SELECTOR_LIST_ITEMS, ",") + "".concat(this._config.target, " ").concat(SELECTOR_DROPDOWN_ITEMS);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;
      jquery(this._scrollElement).on(EVENT_SCROLL, function (event) {
        return _this._process(event);
      });
      this.refresh();

      this._process();
    } // Getters


    _createClass(ScrollSpy, [{
      key: "refresh",
      value: // Public
      function refresh() {
        var _this2 = this;

        var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
        var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
        var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
        this._offsets = [];
        this._targets = [];
        this._scrollHeight = this._getScrollHeight();
        var targets = [].slice.call(document.querySelectorAll(this._selector));
        targets.map(function (element) {
          var target;
          var targetSelector = Util.getSelectorFromElement(element);

          if (targetSelector) {
            target = document.querySelector(targetSelector);
          }

          if (target) {
            var targetBCR = target.getBoundingClientRect();

            if (targetBCR.width || targetBCR.height) {
              // TODO (fat): remove sketch reliance on jQuery position/offset
              return [jquery(target)[offsetMethod]().top + offsetBase, targetSelector];
            }
          }

          return null;
        }).filter(function (item) {
          return item;
        }).sort(function (a, b) {
          return a[0] - b[0];
        }).forEach(function (item) {
          _this2._offsets.push(item[0]);

          _this2._targets.push(item[1]);
        });
      }
    }, {
      key: "dispose",
      value: function dispose() {
        jquery.removeData(this._element, DATA_KEY$7);
        jquery(this._scrollElement).off(EVENT_KEY$7);
        this._element = null;
        this._scrollElement = null;
        this._config = null;
        this._selector = null;
        this._offsets = null;
        this._targets = null;
        this._activeTarget = null;
        this._scrollHeight = null;
      } // Private

    }, {
      key: "_getConfig",
      value: function _getConfig(config) {
        config = _objectSpread2(_objectSpread2({}, Default$5), _typeof(config) === 'object' && config ? config : {});

        if (typeof config.target !== 'string' && Util.isElement(config.target)) {
          var id = jquery(config.target).attr('id');

          if (!id) {
            id = Util.getUID(NAME$7);
            jquery(config.target).attr('id', id);
          }

          config.target = "#".concat(id);
        }

        Util.typeCheckConfig(NAME$7, config, DefaultType$5);
        return config;
      }
    }, {
      key: "_getScrollTop",
      value: function _getScrollTop() {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }
    }, {
      key: "_getScrollHeight",
      value: function _getScrollHeight() {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }
    }, {
      key: "_getOffsetHeight",
      value: function _getOffsetHeight() {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }
    }, {
      key: "_process",
      value: function _process() {
        var scrollTop = this._getScrollTop() + this._config.offset;

        var scrollHeight = this._getScrollHeight();

        var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

        if (this._scrollHeight !== scrollHeight) {
          this.refresh();
        }

        if (scrollTop >= maxScroll) {
          var target = this._targets[this._targets.length - 1];

          if (this._activeTarget !== target) {
            this._activate(target);
          }

          return;
        }

        if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
          this._activeTarget = null;

          this._clear();

          return;
        }

        for (var i = this._offsets.length; i--;) {
          var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

          if (isActiveTarget) {
            this._activate(this._targets[i]);
          }
        }
      }
    }, {
      key: "_activate",
      value: function _activate(target) {
        this._activeTarget = target;

        this._clear();

        var queries = this._selector.split(',').map(function (selector) {
          return "".concat(selector, "[data-target=\"").concat(target, "\"],").concat(selector, "[href=\"").concat(target, "\"]");
        });

        var $link = jquery([].slice.call(document.querySelectorAll(queries.join(','))));

        if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {
          $link.closest(SELECTOR_DROPDOWN).find(SELECTOR_DROPDOWN_TOGGLE).addClass(CLASS_NAME_ACTIVE$2);
          $link.addClass(CLASS_NAME_ACTIVE$2);
        } else {
          // Set triggered link as active
          $link.addClass(CLASS_NAME_ACTIVE$2); // Set triggered links parents as active
          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

          $link.parents(SELECTOR_NAV_LIST_GROUP).prev("".concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_LIST_ITEMS)).addClass(CLASS_NAME_ACTIVE$2); // Handle special case when .nav-link is inside .nav-item

          $link.parents(SELECTOR_NAV_LIST_GROUP).prev(SELECTOR_NAV_ITEMS).children(SELECTOR_NAV_LINKS).addClass(CLASS_NAME_ACTIVE$2);
        }

        jquery(this._scrollElement).trigger(EVENT_ACTIVATE, {
          relatedTarget: target
        });
      }
    }, {
      key: "_clear",
      value: function _clear() {
        [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {
          return node.classList.contains(CLASS_NAME_ACTIVE$2);
        }).forEach(function (node) {
          return node.classList.remove(CLASS_NAME_ACTIVE$2);
        });
      } // Static

    }], [{
      key: "VERSION",
      get: function get() {
        return VERSION$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$5;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config) {
        return this.each(function () {
          var data = jquery(this).data(DATA_KEY$7);

          var _config = _typeof(config) === 'object' && config;

          if (!data) {
            data = new ScrollSpy(this, _config);
            jquery(this).data(DATA_KEY$7, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return ScrollSpy;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  jquery(window).on(EVENT_LOAD_DATA_API$2, function () {
    var scrollSpys = [].slice.call(document.querySelectorAll(SELECTOR_DATA_SPY));
    var scrollSpysLength = scrollSpys.length;

    for (var i = scrollSpysLength; i--;) {
      var $spy = jquery(scrollSpys[i]);

      ScrollSpy._jQueryInterface.call($spy, $spy.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  jquery.fn[NAME$7] = ScrollSpy._jQueryInterface;
  jquery.fn[NAME$7].Constructor = ScrollSpy;

  jquery.fn[NAME$7].noConflict = function () {
    jquery.fn[NAME$7] = JQUERY_NO_CONFLICT$7;
    return ScrollSpy._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$8 = 'tab';
  var VERSION$8 = '4.6.0';
  var DATA_KEY$8 = 'bs.tab';
  var EVENT_KEY$8 = ".".concat(DATA_KEY$8);
  var DATA_API_KEY$6 = '.data-api';
  var JQUERY_NO_CONFLICT$8 = jquery.fn[NAME$8];
  var EVENT_HIDE$2 = "hide".concat(EVENT_KEY$8);
  var EVENT_HIDDEN$2 = "hidden".concat(EVENT_KEY$8);
  var EVENT_SHOW$2 = "show".concat(EVENT_KEY$8);
  var EVENT_SHOWN$2 = "shown".concat(EVENT_KEY$8);
  var EVENT_CLICK_DATA_API$5 = "click".concat(EVENT_KEY$8).concat(DATA_API_KEY$6);
  var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
  var CLASS_NAME_ACTIVE$3 = 'active';
  var CLASS_NAME_DISABLED = 'disabled';
  var CLASS_NAME_FADE$4 = 'fade';
  var CLASS_NAME_SHOW$5 = 'show';
  var SELECTOR_DROPDOWN$1 = '.dropdown';
  var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';
  var SELECTOR_ACTIVE$2 = '.active';
  var SELECTOR_ACTIVE_UL = '> li > .active';
  var SELECTOR_DATA_TOGGLE$3 = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]';
  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  var SELECTOR_DROPDOWN_ACTIVE_CHILD = '> .dropdown-menu .active';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tab = /*#__PURE__*/function () {
    function Tab(element) {
      _classCallCheck(this, Tab);

      this._element = element;
    } // Getters


    _createClass(Tab, [{
      key: "show",
      value: // Public
      function show() {
        var _this = this;

        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && jquery(this._element).hasClass(CLASS_NAME_ACTIVE$3) || jquery(this._element).hasClass(CLASS_NAME_DISABLED)) {
          return;
        }

        var target;
        var previous;
        var listElement = jquery(this._element).closest(SELECTOR_NAV_LIST_GROUP$1)[0];
        var selector = Util.getSelectorFromElement(this._element);

        if (listElement) {
          var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE$2;
          previous = jquery.makeArray(jquery(listElement).find(itemSelector));
          previous = previous[previous.length - 1];
        }

        var hideEvent = jquery.Event(EVENT_HIDE$2, {
          relatedTarget: this._element
        });
        var showEvent = jquery.Event(EVENT_SHOW$2, {
          relatedTarget: previous
        });

        if (previous) {
          jquery(previous).trigger(hideEvent);
        }

        jquery(this._element).trigger(showEvent);

        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
          return;
        }

        if (selector) {
          target = document.querySelector(selector);
        }

        this._activate(this._element, listElement);

        var complete = function complete() {
          var hiddenEvent = jquery.Event(EVENT_HIDDEN$2, {
            relatedTarget: _this._element
          });
          var shownEvent = jquery.Event(EVENT_SHOWN$2, {
            relatedTarget: previous
          });
          jquery(previous).trigger(hiddenEvent);
          jquery(_this._element).trigger(shownEvent);
        };

        if (target) {
          this._activate(target, target.parentNode, complete);
        } else {
          complete();
        }
      }
    }, {
      key: "dispose",
      value: function dispose() {
        jquery.removeData(this._element, DATA_KEY$8);
        this._element = null;
      } // Private

    }, {
      key: "_activate",
      value: function _activate(element, container, callback) {
        var _this2 = this;

        var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? jquery(container).find(SELECTOR_ACTIVE_UL) : jquery(container).children(SELECTOR_ACTIVE$2);
        var active = activeElements[0];
        var isTransitioning = callback && active && jquery(active).hasClass(CLASS_NAME_FADE$4);

        var complete = function complete() {
          return _this2._transitionComplete(element, active, callback);
        };

        if (active && isTransitioning) {
          var transitionDuration = Util.getTransitionDurationFromElement(active);
          jquery(active).removeClass(CLASS_NAME_SHOW$5).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
        } else {
          complete();
        }
      }
    }, {
      key: "_transitionComplete",
      value: function _transitionComplete(element, active, callback) {
        if (active) {
          jquery(active).removeClass(CLASS_NAME_ACTIVE$3);
          var dropdownChild = jquery(active.parentNode).find(SELECTOR_DROPDOWN_ACTIVE_CHILD)[0];

          if (dropdownChild) {
            jquery(dropdownChild).removeClass(CLASS_NAME_ACTIVE$3);
          }

          if (active.getAttribute('role') === 'tab') {
            active.setAttribute('aria-selected', false);
          }
        }

        jquery(element).addClass(CLASS_NAME_ACTIVE$3);

        if (element.getAttribute('role') === 'tab') {
          element.setAttribute('aria-selected', true);
        }

        Util.reflow(element);

        if (element.classList.contains(CLASS_NAME_FADE$4)) {
          element.classList.add(CLASS_NAME_SHOW$5);
        }

        if (element.parentNode && jquery(element.parentNode).hasClass(CLASS_NAME_DROPDOWN_MENU)) {
          var dropdownElement = jquery(element).closest(SELECTOR_DROPDOWN$1)[0];

          if (dropdownElement) {
            var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE$1));
            jquery(dropdownToggleList).addClass(CLASS_NAME_ACTIVE$3);
          }

          element.setAttribute('aria-expanded', true);
        }

        if (callback) {
          callback();
        }
      } // Static

    }], [{
      key: "VERSION",
      get: function get() {
        return VERSION$8;
      }
    }, {
      key: "_jQueryInterface",
      value: function _jQueryInterface(config) {
        return this.each(function () {
          var $this = jquery(this);
          var data = $this.data(DATA_KEY$8);

          if (!data) {
            data = new Tab(this);
            $this.data(DATA_KEY$8, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"".concat(config, "\""));
            }

            data[config]();
          }
        });
      }
    }]);

    return Tab;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  jquery(document).on(EVENT_CLICK_DATA_API$5, SELECTOR_DATA_TOGGLE$3, function (event) {
    event.preventDefault();

    Tab._jQueryInterface.call(jquery(this), 'show');
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  jquery.fn[NAME$8] = Tab._jQueryInterface;
  jquery.fn[NAME$8].Constructor = Tab;

  jquery.fn[NAME$8].noConflict = function () {
    jquery.fn[NAME$8] = JQUERY_NO_CONFLICT$8;
    return Tab._jQueryInterface;
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.1.0): dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

  var Dropdown = function ($) {
    /**
     * Check for Popper dependency
     * Popper - https://popper.js.org
     */
    if (typeof Popper === 'undefined') {
      throw new Error('Bootstrap dropdown require Popper.js (https://popper.js.org)');
    }
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */


    var NAME = 'dropdown';
    var VERSION = '4.1.0';
    var DATA_KEY = 'bs.dropdown';
    var EVENT_KEY = ".".concat(DATA_KEY);
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $.fn[NAME];
    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

    var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

    var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

    var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

    var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

    var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

    var REGEXP_KEYDOWN = new RegExp("".concat(ARROW_UP_KEYCODE, "|").concat(ARROW_DOWN_KEYCODE, "|").concat(ESCAPE_KEYCODE));
    var Event = {
      HIDE: "hide".concat(EVENT_KEY),
      HIDDEN: "hidden".concat(EVENT_KEY),
      SHOW: "show".concat(EVENT_KEY),
      SHOWN: "shown".concat(EVENT_KEY),
      CLICK: "click".concat(EVENT_KEY),
      CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY),
      KEYDOWN_DATA_API: "keydown".concat(EVENT_KEY).concat(DATA_API_KEY),
      KEYUP_DATA_API: "keyup".concat(EVENT_KEY).concat(DATA_API_KEY),
      TRANSITION_END: 'transitionend webkitTransitionEnd oTransitionEnd animationend webkitAnimationEnd oAnimationEnd'
    };
    var ClassName = {
      DISABLED: 'disabled',
      SHOW: 'show',
      SHOWING: 'showing',
      HIDING: 'hiding',
      DROPUP: 'dropup',
      MENURIGHT: 'dropdown-menu-right',
      MENULEFT: 'dropdown-menu-left'
    };
    var Selector = {
      DATA_TOGGLE: '[data-toggle="dropdown"]',
      FORM_CHILD: '.dropdown form',
      MENU: '.dropdown-menu',
      NAVBAR_NAV: '.navbar-nav',
      VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled)'
    };
    var AttachmentMap = {
      TOP: 'top-start',
      TOPEND: 'top-end',
      BOTTOM: 'bottom-start',
      BOTTOMEND: 'bottom-end'
    };
    var Default = {
      placement: AttachmentMap.BOTTOM,
      offset: 0,
      flip: true
    };
    var DefaultType = {
      placement: 'string',
      offset: '(number|string)',
      flip: 'boolean'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var Dropdown = /*#__PURE__*/function () {
      function Dropdown(element, config) {
        _classCallCheck(this, Dropdown);

        this._element = element;
        this._popper = null;
        this._config = this._getConfig(config);
        this._menu = this._getMenuElement();
        this._inNavbar = this._detectNavbar();

        this._addEventListeners();
      } // getters


      _createClass(Dropdown, [{
        key: "toggle",
        value: // public
        function toggle() {
          var _this = this;

          if (this._element.disabled || $(this._element).hasClass(ClassName.DISABLED)) {
            return;
          }

          var parent = Dropdown._getParentFromElement(this._element);

          var isActive = $(this._menu).hasClass(ClassName.SHOW);

          Dropdown._clearMenus();

          if (isActive) {
            return;
          }

          var relatedTarget = {
            relatedTarget: this._element
          };
          var showEvent = $.Event(Event.SHOW, relatedTarget);
          $(parent).trigger(showEvent);

          if (showEvent.isDefaultPrevented()) {
            return;
          }

          var element = this._element; // for dropup with alignment we use the parent as popper container

          if ($(parent).hasClass(ClassName.DROPUP)) {
            if ($(this._menu).hasClass(ClassName.MENULEFT) || $(this._menu).hasClass(ClassName.MENURIGHT)) {
              element = parent;
            }
          }

          this._popper = new Popper(element, this._menu, this._getPopperConfig()); // if this is a touch-enabled device we add extra
          // empty mouseover listeners to the body's immediate children;
          // only needed because of broken event delegation on iOS
          // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

          if ('ontouchstart' in document.documentElement && !$(parent).closest(Selector.NAVBAR_NAV).length) {
            $('body').children().on('mouseover', null, $.noop);
          }

          this._element.focus();

          this._element.setAttribute('aria-expanded', true);

          $(this._menu).one(Event.TRANSITION_END, function () {
            $(parent).trigger($.Event(Event.SHOWN, relatedTarget));
            $(_this._menu).removeClass(ClassName.SHOWING);
          });
          $(this._menu).addClass("".concat(ClassName.SHOW, " ").concat(ClassName.SHOWING));
          $(parent).addClass(ClassName.SHOW);
        }
      }, {
        key: "dispose",
        value: function dispose() {
          $.removeData(this._element, DATA_KEY);
          $(this._element).off(EVENT_KEY);
          this._element = null;
          this._menu = null;

          if (this._popper !== null) {
            this._popper.destroy();
          }

          this._popper = null;
        }
      }, {
        key: "update",
        value: function update() {
          this._inNavbar = this._detectNavbar();

          if (this._popper !== null) {
            this._popper.scheduleUpdate();
          }
        } // private

      }, {
        key: "_addEventListeners",
        value: function _addEventListeners() {
          var _this2 = this;

          $(this._element).on(Event.CLICK, function (event) {
            event.preventDefault();
            event.stopPropagation();

            _this2.toggle();
          });
        }
      }, {
        key: "_getConfig",
        value: function _getConfig(config) {
          var elementData = $(this._element).data();

          if (elementData.placement !== undefined) {
            elementData.placement = AttachmentMap[elementData.placement.toUpperCase()];
          }

          config = $.extend({}, this.constructor.Default, $(this._element).data(), config);
          Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
          return config;
        }
      }, {
        key: "_getMenuElement",
        value: function _getMenuElement() {
          if (!this._menu) {
            var parent = Dropdown._getParentFromElement(this._element);

            this._menu = $(parent).find(Selector.MENU)[0];
          }

          return this._menu;
        }
      }, {
        key: "_getPlacement",
        value: function _getPlacement() {
          var $parentDropdown = $(this._element).parent();
          var placement = this._config.placement; // Handle dropup

          if ($parentDropdown.hasClass(ClassName.DROPUP) || this._config.placement === AttachmentMap.TOP) {
            placement = AttachmentMap.TOP;

            if ($(this._menu).hasClass(ClassName.MENURIGHT)) {
              placement = AttachmentMap.TOPEND;
            }
          } else if ($(this._menu).hasClass(ClassName.MENURIGHT)) {
            placement = AttachmentMap.BOTTOMEND;
          }

          return placement;
        }
      }, {
        key: "_detectNavbar",
        value: function _detectNavbar() {
          return $(this._element).closest('.navbar').length > 0;
        }
      }, {
        key: "_getPopperConfig",
        value: function _getPopperConfig() {
          var popperConfig = {
            placement: this._getPlacement(),
            modifiers: {
              offset: {
                offset: this._config.offset
              },
              flip: {
                enabled: this._config.flip
              }
            }
          }; // Disable Popper.js for Dropdown in Navbar

          if (this._inNavbar) {
            popperConfig.modifiers.applyStyle = {
              enabled: !this._inNavbar
            };
          }

          return popperConfig;
        } // static

      }], [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }, {
        key: "Default",
        get: function get() {
          return Default;
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return DefaultType;
        }
      }, {
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var data = $(this).data(DATA_KEY);

            var _config = _typeof(config) === 'object' ? config : null;

            if (!data) {
              data = new Dropdown(this, _config);
              $(this).data(DATA_KEY, data);
            }

            if (typeof config === 'string') {
              if (data[config] === undefined) {
                throw new Error("No method named \"".concat(config, "\""));
              }

              data[config]();
            }
          });
        }
      }, {
        key: "_clearMenus",
        value: function _clearMenus(event) {
          if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
            return;
          }

          var toggles = $.makeArray($(Selector.DATA_TOGGLE));

          var _loop = function _loop(i) {
            var parent = Dropdown._getParentFromElement(toggles[i]);

            var context = $(toggles[i]).data(DATA_KEY);
            var relatedTarget = {
              relatedTarget: toggles[i]
            };

            if (!context) {
              return "continue";
            }

            var dropdownMenu = context._menu;

            if (!$(parent).hasClass(ClassName.SHOW)) {
              return "continue";
            }

            if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $.contains(parent, event.target)) {
              return "continue";
            }

            var hideEvent = $.Event(Event.HIDE, relatedTarget);
            $(parent).trigger(hideEvent);

            if (hideEvent.isDefaultPrevented()) {
              return "continue";
            } // if this is a touch-enabled device we remove the extra
            // empty mouseover listeners we added for iOS support


            if ('ontouchstart' in document.documentElement) {
              $('body').children().off('mouseover', null, $.noop);
            }

            toggles[i].setAttribute('aria-expanded', 'false');
            $(dropdownMenu).addClass(ClassName.HIDING).removeClass(ClassName.SHOW);
            $(parent).removeClass(ClassName.SHOW);
            $(dropdownMenu).one(Event.TRANSITION_END, function () {
              $(parent).trigger($.Event(Event.HIDDEN, relatedTarget));
              $(dropdownMenu).removeClass(ClassName.HIDING);
            });
          };

          for (var i = 0; i < toggles.length; i++) {
            var _ret = _loop(i);

            if (_ret === "continue") continue;
          }
        }
      }, {
        key: "_getParentFromElement",
        value: function _getParentFromElement(element) {
          var parent;
          var selector = Util.getSelectorFromElement(element);

          if (selector) {
            parent = $(selector)[0];
          }

          return parent || element.parentNode;
        }
      }, {
        key: "_dataApiKeydownHandler",
        value: function _dataApiKeydownHandler(event) {
          if (!REGEXP_KEYDOWN.test(event.which) || /button/i.test(event.target.tagName) && event.which === SPACE_KEYCODE || /input|textarea/i.test(event.target.tagName)) {
            return;
          }

          event.preventDefault();
          event.stopPropagation();

          if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {
            return;
          }

          var parent = Dropdown._getParentFromElement(this);

          var isActive = $(parent).hasClass(ClassName.SHOW);

          if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
            if (event.which === ESCAPE_KEYCODE) {
              var toggle = $(parent).find(Selector.DATA_TOGGLE)[0];
              $(toggle).trigger('focus');
            }

            $(this).trigger('click');
            return;
          }

          var items = $(parent).find(Selector.VISIBLE_ITEMS).get();

          if (!items.length) {
            return;
          }

          var index = items.indexOf(event.target);

          if (event.which === ARROW_UP_KEYCODE && index > 0) {
            // up
            index--;
          }

          if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
            // down
            index++;
          }

          if (index < 0) {
            index = 0;
          }

          items[index].focus();
        }
      }]);

      return Dropdown;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on("".concat(Event.CLICK_DATA_API, " ").concat(Event.KEYUP_DATA_API), Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
      event.preventDefault();
      event.stopPropagation();

      Dropdown._jQueryInterface.call($(this), 'toggle');
    }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
      e.stopPropagation();
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $.fn[NAME] = Dropdown._jQueryInterface;
    $.fn[NAME].Constructor = Dropdown;

    $.fn[NAME].noConflict = function () {
      $.fn[NAME] = JQUERY_NO_CONFLICT;
      return Dropdown._jQueryInterface;
    };

    return Dropdown;
  }(jQuery);

  var Util$1 = function () {
    /**
     * ------------------------------------------------------------------------
     * Private TransitionEnd Helpers
     * ------------------------------------------------------------------------
     */
    var transitionEnd = false;
    var _transitionEndSelector = "";
    var TransitionEndEvent = {
      WebkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      OTransition: "oTransitionEnd otransitionend",
      transition: "transitionend"
    };

    function transitionEndTest() {
      if (window.QUnit) {
        return false;
      }

      var el = document.createElement("bmd");

      for (var name in TransitionEndEvent) {
        if (el.style[name] !== undefined) {
          return TransitionEndEvent[name]; // { end: TransitionEndEvent[name] }
        }
      }

      return false;
    }

    function setTransitionEndSupport() {
      transitionEnd = transitionEndTest(); // generate a concatenated transition end event selector

      for (var name in TransitionEndEvent) {
        _transitionEndSelector += " ".concat(TransitionEndEvent[name]);
      }
    }
    /**
     * --------------------------------------------------------------------------
     * Public Util Api
     * --------------------------------------------------------------------------
     */


    var Util = {
      transitionEndSupported: function transitionEndSupported() {
        return transitionEnd;
      },
      transitionEndSelector: function transitionEndSelector() {
        return _transitionEndSelector;
      },
      isChar: function isChar(event) {
        if (typeof event.which === "undefined") {
          return true;
        } else if (typeof event.which === "number" && event.which > 0) {
          return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8 && // backspace
          event.which !== 9 && // tab
          event.which !== 13 && // enter
          event.which !== 16 && // shift
          event.which !== 17 && // ctrl
          event.which !== 20 && // caps lock
          event.which !== 27 // escape
          ;
        }

        return false;
      },
      assert: function assert($element, invalidTest, message) {
        if (invalidTest) {
          if (!$element === undefined) {
            $element.css("border", "1px solid red");
          }

          console.error(message, $element); // eslint-disable-line no-console

          throw message;
        }
      },
      describe: function describe($element) {
        if ($element === undefined) {
          return "undefined";
        } else if ($element.length === 0) {
          return "(no matching elements)";
        }

        return "".concat($element[0].outerHTML.split(">")[0], ">");
      }
    };
    setTransitionEndSupport();
    return Util;
  }(jQuery);

  var Base = function ($) {
    var ClassName = {
      BMD_FORM_GROUP: "bmd-form-group",
      IS_FILLED: "is-filled",
      IS_FOCUSED: "is-focused"
    };
    var Selector = {
      BMD_FORM_GROUP: ".".concat(ClassName.BMD_FORM_GROUP)
    };
    var Default = {};
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var Base = /*#__PURE__*/function () {
      /**
       *
       * @param element
       * @param config
       * @param properties - anything that needs to be set as this[key] = value.  Works around the need to call `super` before using `this`
       */
      function Base($element, config) {
        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        _classCallCheck(this, Base);

        this.$element = $element;
        this.config = $.extend(true, {}, Default, config); // set properties for use in the constructor initialization

        for (var key in properties) {
          this[key] = properties[key];
        }
      }

      _createClass(Base, [{
        key: "dispose",
        value: function dispose(dataKey) {
          this.$element.data(dataKey, null);
          this.$element = null;
          this.config = null;
        } // ------------------------------------------------------------------------
        // protected

      }, {
        key: "addFormGroupFocus",
        value: function addFormGroupFocus() {
          if (!this.$element.prop("disabled")) {
            this.$bmdFormGroup.addClass(ClassName.IS_FOCUSED);
          }
        }
      }, {
        key: "removeFormGroupFocus",
        value: function removeFormGroupFocus() {
          this.$bmdFormGroup.removeClass(ClassName.IS_FOCUSED);
        }
      }, {
        key: "removeIsFilled",
        value: function removeIsFilled() {
          this.$bmdFormGroup.removeClass(ClassName.IS_FILLED);
        }
      }, {
        key: "addIsFilled",
        value: function addIsFilled() {
          this.$bmdFormGroup.addClass(ClassName.IS_FILLED);
        } // Find bmd-form-group

      }, {
        key: "findMdbFormGroup",
        value: function findMdbFormGroup() {
          var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
          var mfg = this.$element.closest(Selector.BMD_FORM_GROUP);

          if (mfg.length === 0 && raiseError) {
            $.error("Failed to find ".concat(Selector.BMD_FORM_GROUP, " for ").concat(Util$1.describe(this.$element)));
          }

          return mfg;
        } // ------------------------------------------------------------------------
        // private
        // ------------------------------------------------------------------------
        // static

      }]);

      return Base;
    }();

    return Base;
  }(jQuery);

  var BaseInput = function ($) {
    var ClassName = {
      FORM_GROUP: "form-group",
      BMD_FORM_GROUP: "bmd-form-group",
      BMD_LABEL: "bmd-label",
      BMD_LABEL_STATIC: "bmd-label-static",
      BMD_LABEL_PLACEHOLDER: "bmd-label-placeholder",
      BMD_LABEL_FLOATING: "bmd-label-floating",
      HAS_DANGER: "has-danger",
      IS_FILLED: "is-filled",
      IS_FOCUSED: "is-focused",
      INPUT_GROUP: "input-group"
    };
    var Selector = {
      FORM_GROUP: ".".concat(ClassName.FORM_GROUP),
      BMD_FORM_GROUP: ".".concat(ClassName.BMD_FORM_GROUP),
      BMD_LABEL_WILDCARD: "label[class^='".concat(ClassName.BMD_LABEL, "'], label[class*=' ").concat(ClassName.BMD_LABEL, "']") // match any label variant if specified

    };
    var Default = {
      validate: false,
      formGroup: {
        required: false
      },
      bmdFormGroup: {
        template: "<span class='".concat(ClassName.BMD_FORM_GROUP, "'></span>"),
        create: true,
        // create a wrapper if form-group not found
        required: true // not recommended to turn this off, only used for inline components

      },
      label: {
        required: false,
        // Prioritized find order for resolving the label to be used as an bmd-label if not specified in the markup
        //  - a function(thisComponent); or
        //  - a string selector used like $bmdFormGroup.find(selector)
        //
        // Note this only runs if $bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD) fails to find a label (as authored in the markup)
        //
        selectors: [".form-control-label", // in the case of horizontal or inline forms, this will be marked
        "> label" // usual case for text inputs, first child.  Deeper would find toggle labels so don't do that.
        ],
        className: ClassName.BMD_LABEL_STATIC
      },
      requiredClasses: [],
      invalidComponentMatches: [],
      convertInputSizeVariations: true
    };
    var FormControlSizeMarkers = {
      "form-control-lg": "bmd-form-group-lg",
      "form-control-sm": "bmd-form-group-sm"
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var BaseInput = /*#__PURE__*/function (_Base) {
      _inherits(BaseInput, _Base);

      var _super = _createSuper(BaseInput);

      /**
       *
       * @param element
       * @param config
       * @param properties - anything that needs to be set as this[key] = value.  Works around the need to call `super` before using `this`
       */
      function BaseInput($element, config) {
        var _this;

        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        _classCallCheck(this, BaseInput);

        _this = _super.call(this, $element, $.extend(true, {}, Default, config), properties); // Enforce no overlap between components to prevent side effects

        _this._rejectInvalidComponentMatches(); // Enforce expected structure (if any)


        _this.rejectWithoutRequiredStructure(); // Enforce required classes for a consistent rendering


        _this._rejectWithoutRequiredClasses(); // Resolve the form-group first, it will be used for bmd-form-group if possible
        //   note: different components have different rules


        _this.$formGroup = _this.findFormGroup(_this.config.formGroup.required); // Will add bmd-form-group to form-group or create an bmd-form-group
        //  Performance Note: for those forms that are really performance driven, create the markup with the .bmd-form-group to avoid
        //    rendering changes once added.

        _this.$bmdFormGroup = _this.resolveMdbFormGroup(); // Resolve and mark the bmdLabel if necessary as defined by the config

        _this.$bmdLabel = _this.resolveMdbLabel(); // Signal to the bmd-form-group that a form-control-* variation is being used

        _this.resolveMdbFormGroupSizing();

        _this.addFocusListener();

        _this.addChangeListener();

        if (_this.$element.val() != "") {
          _this.addIsFilled();
        }

        return _this;
      }

      _createClass(BaseInput, [{
        key: "dispose",
        value: function dispose(dataKey) {
          _get(_getPrototypeOf(BaseInput.prototype), "dispose", this).call(this, dataKey);

          this.$bmdFormGroup = null;
          this.$formGroup = null;
        } // ------------------------------------------------------------------------
        // protected

      }, {
        key: "rejectWithoutRequiredStructure",
        value: function rejectWithoutRequiredStructure() {// implement
        }
      }, {
        key: "addFocusListener",
        value: function addFocusListener() {
          var _this2 = this;

          this.$element.on("focus", function () {
            _this2.addFormGroupFocus();
          }).on("blur", function () {
            _this2.removeFormGroupFocus();
          });
        }
      }, {
        key: "addChangeListener",
        value: function addChangeListener() {
          var _this3 = this;

          this.$element.on("keydown paste", function (event) {
            if (Util$1.isChar(event)) {
              _this3.addIsFilled();
            }
          }).on("keyup change", function () {
            // make sure empty is added back when there is a programmatic value change.
            //  NOTE: programmatic changing of value using $.val() must trigger the change event i.e. $.val('x').trigger('change')
            if (_this3.isEmpty()) {
              _this3.removeIsFilled();
            } else {
              _this3.addIsFilled();
            }

            if (_this3.config.validate) {
              // Validation events do not bubble, so they must be attached directly to the text: http://jsfiddle.net/PEpRM/1/
              //  Further, even the bind method is being caught, but since we are already calling #checkValidity here, just alter
              //  the form-group on change.
              //
              // NOTE: I'm not sure we should be intervening regarding validation, this seems better as a README and snippet of code.
              //        BUT, I've left it here for backwards compatibility.
              var isValid = typeof _this3.$element[0].checkValidity === "undefined" || _this3.$element[0].checkValidity();

              if (isValid) {
                _this3.removeHasDanger();
              } else {
                _this3.addHasDanger();
              }
            }
          });
        }
      }, {
        key: "addHasDanger",
        value: function addHasDanger() {
          this.$bmdFormGroup.addClass(ClassName.HAS_DANGER);
        }
      }, {
        key: "removeHasDanger",
        value: function removeHasDanger() {
          this.$bmdFormGroup.removeClass(ClassName.HAS_DANGER);
        }
      }, {
        key: "isEmpty",
        value: function isEmpty() {
          return this.$element.val() === null || this.$element.val() === undefined || this.$element.val() === "";
        } // Will add bmd-form-group to form-group or create a bmd-form-group if necessary

      }, {
        key: "resolveMdbFormGroup",
        value: function resolveMdbFormGroup() {
          var mfg = this.findMdbFormGroup(false);

          if (mfg === undefined || mfg.length === 0) {
            if (this.config.bmdFormGroup.create && (this.$formGroup === undefined || this.$formGroup.length === 0)) {
              // If a form-group doesn't exist (not recommended), take a guess and wrap the element (assuming no label).
              //  note: it's possible to make this smarter, but I need to see valid cases before adding any complexity.
              // this may be an input-group, wrap that instead
              if (this.outerElement().parent().hasClass(ClassName.INPUT_GROUP)) {
                this.outerElement().parent().wrap(this.config.bmdFormGroup.template);
              } else {
                this.outerElement().wrap(this.config.bmdFormGroup.template);
              }
            } else {
              // a form-group does exist, add our marker class to it
              this.$formGroup.addClass(ClassName.BMD_FORM_GROUP); // OLD: may want to implement this after all, see how the styling turns out, but using an existing form-group is less manipulation of the dom and therefore preferable
              // A form-group does exist, so add an bmd-form-group wrapping it's internal contents
              //fg.wrapInner(this.config.bmdFormGroup.template)
            }

            mfg = this.findMdbFormGroup(this.config.bmdFormGroup.required);
          }

          return mfg;
        } // Demarcation element (e.g. first child of a form-group)
        //  Subclasses such as file inputs may have different structures

      }, {
        key: "outerElement",
        value: function outerElement() {
          return this.$element;
        } // Will add bmd-label to bmd-form-group if not already specified

      }, {
        key: "resolveMdbLabel",
        value: function resolveMdbLabel() {
          var label = this.$bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD);

          if (label === undefined || label.length === 0) {
            // we need to find it based on the configured selectors
            label = this.findMdbLabel(this.config.label.required);

            if (label === undefined || label.length === 0) ; else {
              // a candidate label was found, add the configured default class name
              label.addClass(this.config.label.className);
            }
          }

          return label;
        } // Find bmd-label variant based on the config selectors

      }, {
        key: "findMdbLabel",
        value: function findMdbLabel() {
          var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
          var label = null; // use the specified selector order

          var _iterator = _createForOfIteratorHelper(this.config.label.selectors),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var selector = _step.value;

              if ($.isFunction(selector)) {
                label = selector(this);
              } else {
                label = this.$bmdFormGroup.find(selector);
              }

              if (label !== undefined && label.length > 0) {
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          if (label.length === 0 && raiseError) {
            $.error("Failed to find ".concat(Selector.BMD_LABEL_WILDCARD, " within form-group for ").concat(Util$1.describe(this.$element)));
          }

          return label;
        } // Find bmd-form-group

      }, {
        key: "findFormGroup",
        value: function findFormGroup() {
          var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
          var fg = this.$element.closest(Selector.FORM_GROUP);

          if (fg.length === 0 && raiseError) {
            $.error("Failed to find ".concat(Selector.FORM_GROUP, " for ").concat(Util$1.describe(this.$element)));
          }

          return fg;
        } // Due to the interconnected nature of labels/inputs/help-blocks, signal the bmd-form-group-* size variation based on
        //  a found form-control-* size

      }, {
        key: "resolveMdbFormGroupSizing",
        value: function resolveMdbFormGroupSizing() {
          if (!this.config.convertInputSizeVariations) {
            return;
          } // Modification - Change text-sm/lg to form-group-sm/lg instead (preferred standard and simpler css/less variants)


          for (var inputSize in FormControlSizeMarkers) {
            if (this.$element.hasClass(inputSize)) {
              //this.$element.removeClass(inputSize)
              this.$bmdFormGroup.addClass(FormControlSizeMarkers[inputSize]);
            }
          }
        } // ------------------------------------------------------------------------
        // private

      }, {
        key: "_rejectInvalidComponentMatches",
        value: function _rejectInvalidComponentMatches() {
          var _iterator2 = _createForOfIteratorHelper(this.config.invalidComponentMatches),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var otherComponent = _step2.value;
              otherComponent.rejectMatch(this.constructor.name, this.$element);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }, {
        key: "_rejectWithoutRequiredClasses",
        value: function _rejectWithoutRequiredClasses() {
          var _iterator3 = _createForOfIteratorHelper(this.config.requiredClasses),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var requiredClass = _step3.value;
              var found = false; // allow one of several classes to be passed in x||y

              if (requiredClass.indexOf("||") !== -1) {
                var oneOf = requiredClass.split("||");

                var _iterator4 = _createForOfIteratorHelper(oneOf),
                    _step4;

                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    var _requiredClass = _step4.value;

                    if (this.$element.hasClass(_requiredClass)) {
                      found = true;
                      break;
                    }
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
              } else if (this.$element.hasClass(requiredClass)) {
                found = true;
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        } // ------------------------------------------------------------------------
        // static

      }]);

      return BaseInput;
    }(Base);

    return BaseInput;
  }(jQuery);

  var BaseFormControl = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var Default = {
      requiredClasses: ["form-control"]
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var BaseFormControl = /*#__PURE__*/function (_BaseInput) {
      _inherits(BaseFormControl, _BaseInput);

      var _super = _createSuper(BaseFormControl);

      function BaseFormControl($element, config) {
        var _this;

        _classCallCheck(this, BaseFormControl);

        _this = _super.call(this, $element, $.extend(true, Default, config)); // Initially mark as empty

        if (_this.isEmpty()) {
          _this.removeIsFilled();
        }

        return _this;
      }

      return BaseFormControl;
    }(BaseInput);

    return BaseFormControl;
  }(jQuery);

  var Text = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = "text";
    var DATA_KEY = "bmd.".concat(NAME);
    var JQUERY_NAME = "bmd".concat(NAME.charAt(0).toUpperCase() + NAME.slice(1));
    var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];
    var Default = {};
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var Text = /*#__PURE__*/function (_BaseFormControl) {
      _inherits(Text, _BaseFormControl);

      var _super = _createSuper(Text);

      function Text($element, config) {
        _classCallCheck(this, Text);

        return _super.call(this, $element, $.extend(true, //{invalidComponentMatches: [Checkbox, File, Radio, Switch, Select, Textarea]},
        Default, config));
      }

      _createClass(Text, [{
        key: "dispose",
        value: function dispose() {
          var dataKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DATA_KEY;

          _get(_getPrototypeOf(Text.prototype), "dispose", this).call(this, dataKey);
        }
      }], [{
        key: "matches",
        value: function matches($element) {
          if ($element.attr("type") === "text") {
            return true;
          }

          return false;
        }
      }, {
        key: "rejectMatch",
        value: function rejectMatch(component, $element) {
          Util$1.assert(this.$element, this.matches($element), "".concat(component, " component element ").concat(Util$1.describe($element), " is invalid for type='text'."));
        } // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // private
        // ------------------------------------------------------------------------
        // static

      }, {
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var $element = $(this);
            var data = $element.data(DATA_KEY);

            if (!data) {
              data = new Text($element, config);
              $element.data(DATA_KEY, data);
            }
          });
        }
      }]);

      return Text;
    }(BaseFormControl);
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $.fn[JQUERY_NAME] = Text._jQueryInterface;
    $.fn[JQUERY_NAME].Constructor = Text;

    $.fn[JQUERY_NAME].noConflict = function () {
      $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
      return Text._jQueryInterface;
    };

    return Text;
  }(jQuery);

  var Textarea = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = "textarea";
    var DATA_KEY = "bmd.".concat(NAME);
    var JQUERY_NAME = "bmd".concat(NAME.charAt(0).toUpperCase() + NAME.slice(1));
    var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];
    var Default = {};
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var Textarea = /*#__PURE__*/function (_BaseFormControl) {
      _inherits(Textarea, _BaseFormControl);

      var _super = _createSuper(Textarea);

      function Textarea($element, config) {
        _classCallCheck(this, Textarea);

        return _super.call(this, $element, $.extend(true, //{invalidComponentMatches: [Checkbox, File, Radio, Text, Select, Switch]},
        Default, config));
      }

      _createClass(Textarea, [{
        key: "dispose",
        value: function dispose() {
          _get(_getPrototypeOf(Textarea.prototype), "dispose", this).call(this, DATA_KEY);
        }
      }], [{
        key: "matches",
        value: function matches($element) {
          if ($element.prop("tagName") === "textarea") {
            return true;
          }

          return false;
        }
      }, {
        key: "rejectMatch",
        value: function rejectMatch(component, $element) {
          Util$1.assert(this.$element, this.matches($element), "".concat(component, " component element ").concat(Util$1.describe($element), " is invalid for <textarea>."));
        } // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // private
        // ------------------------------------------------------------------------
        // static

      }, {
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var $element = $(this);
            var data = $element.data(DATA_KEY);

            if (!data) {
              data = new Textarea($element, config);
              $element.data(DATA_KEY, data);
            }
          });
        }
      }]);

      return Textarea;
    }(BaseFormControl);
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $.fn[JQUERY_NAME] = Textarea._jQueryInterface;
    $.fn[JQUERY_NAME].Constructor = Textarea;

    $.fn[JQUERY_NAME].noConflict = function () {
      $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
      return Textarea._jQueryInterface;
    };

    return Textarea;
  }(jQuery);

  var Select = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = "select";
    var DATA_KEY = "bmd.".concat(NAME);
    var JQUERY_NAME = "bmd".concat(NAME.charAt(0).toUpperCase() + NAME.slice(1));
    var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];
    var Default = {
      requiredClasses: ["form-control||custom-select"]
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var Select = /*#__PURE__*/function (_BaseFormControl) {
      _inherits(Select, _BaseFormControl);

      var _super = _createSuper(Select);

      function Select($element, config) {
        var _this;

        _classCallCheck(this, Select);

        _this = _super.call(this, $element, $.extend(true, //{invalidComponentMatches: [Checkbox, File, Radio, Switch, Text, Textarea]},
        Default, config)); // floating labels will cover the options, so trigger them to be above (if used)

        _this.addIsFilled();

        return _this;
      }

      _createClass(Select, [{
        key: "dispose",
        value: function dispose() {
          _get(_getPrototypeOf(Select.prototype), "dispose", this).call(this, DATA_KEY);
        }
      }], [{
        key: "matches",
        value: function matches($element) {
          if ($element.prop("tagName") === "select") {
            return true;
          }

          return false;
        }
      }, {
        key: "rejectMatch",
        value: function rejectMatch(component, $element) {
          Util$1.assert(this.$element, this.matches($element), "".concat(component, " component element ").concat(Util$1.describe($element), " is invalid for <select>."));
        } // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // private
        // ------------------------------------------------------------------------
        // static

      }, {
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var $element = $(this);
            var data = $element.data(DATA_KEY);

            if (!data) {
              data = new Select($element, config);
              $element.data(DATA_KEY, data);
            }
          });
        }
      }]);

      return Select;
    }(BaseFormControl);
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $.fn[JQUERY_NAME] = Select._jQueryInterface;
    $.fn[JQUERY_NAME].Constructor = Select;

    $.fn[JQUERY_NAME].noConflict = function () {
      $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
      return Select._jQueryInterface;
    };

    return Select;
  }(jQuery);

  var BaseSelection = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var Default = {
      label: {
        required: false // Prioritized find order for resolving the label to be used as an bmd-label if not specified in the markup
        //  - a function(thisComponent); or
        //  - a string selector used like $bmdFormGroup.find(selector)
        //
        // Note this only runs if $bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD) fails to find a label (as authored in the markup)
        //
        //selectors: [
        //  `.form-control-label`, // in the case of horizontal or inline forms, this will be marked
        //  `> label` // usual case for text inputs
        //]

      }
    };
    var Selector = {
      LABEL: "label"
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var BaseSelection = /*#__PURE__*/function (_BaseInput) {
      _inherits(BaseSelection, _BaseInput);

      var _super = _createSuper(BaseSelection);

      function BaseSelection($element, config, properties) {
        var _this;

        _classCallCheck(this, BaseSelection);

        // properties = {inputType: checkbox, outerClass: checkbox-inline}
        // '.checkbox|switch|radio > label > input[type=checkbox|radio]'
        // '.${this.outerClass} > label > input[type=${this.inputType}]'
        _this = _super.call(this, $element, $.extend(true, {}, Default, config), properties);

        _this.decorateMarkup();

        return _this;
      } // ------------------------------------------------------------------------
      // protected


      _createClass(BaseSelection, [{
        key: "decorateMarkup",
        value: function decorateMarkup() {
          var $decorator = $(this.config.template);
          this.$element.after($decorator); // initialize ripples after decorator has been inserted into DOM

          if (this.config.ripples !== false) {
            $decorator.bmdRipples();
          }
        } // Demarcation element (e.g. first child of a form-group)

      }, {
        key: "outerElement",
        value: function outerElement() {
          // .checkbox|switch|radio > label > input[type=checkbox|radio]
          // label.checkbox-inline > input[type=checkbox|radio]
          // .${this.outerClass} > label > input[type=${this.inputType}]
          return this.$element.parent().closest(".".concat(this.outerClass));
        }
      }, {
        key: "rejectWithoutRequiredStructure",
        value: function rejectWithoutRequiredStructure() {
          // '.checkbox|switch|radio > label > input[type=checkbox|radio]'
          // '.${this.outerClass} > label > input[type=${this.inputType}]'
          Util$1.assert(this.$element, !this.$element.parent().prop("tagName") === "label", "".concat(this.constructor.name, "'s ").concat(Util$1.describe(this.$element), " parent element should be <label>."));
          Util$1.assert(this.$element, !this.outerElement().hasClass(this.outerClass), "".concat(this.constructor.name, "'s ").concat(Util$1.describe(this.$element), " outer element should have class ").concat(this.outerClass, "."));
        }
      }, {
        key: "addFocusListener",
        value: function addFocusListener() {
          var _this2 = this;

          // checkboxes didn't appear to bubble to the document, so we'll bind these directly
          this.$element.closest(Selector.LABEL).hover(function () {
            _this2.addFormGroupFocus();
          }, function () {
            _this2.removeFormGroupFocus();
          });
        }
      }, {
        key: "addChangeListener",
        value: function addChangeListener() {
          var _this3 = this;

          this.$element.change(function () {
            _this3.$element.blur();
          });
        } // ------------------------------------------------------------------------
        // private

      }]);

      return BaseSelection;
    }(BaseInput);

    return BaseSelection;
  }(jQuery);

  var Radio = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = "radio";
    var DATA_KEY = "bmd.".concat(NAME);
    var JQUERY_NAME = "bmd".concat(NAME.charAt(0).toUpperCase() + NAME.slice(1));
    var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];
    var Default = {
      template: "<span class='bmd-radio'></span>"
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var Radio = /*#__PURE__*/function (_BaseSelection) {
      _inherits(Radio, _BaseSelection);

      var _super = _createSuper(Radio);

      function Radio($element, config) {
        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          inputType: NAME,
          outerClass: NAME
        };

        _classCallCheck(this, Radio);

        return _super.call(this, $element, $.extend(true, //{invalidComponentMatches: [Checkbox, File, Switch, Text]},
        Default, config), properties);
      }

      _createClass(Radio, [{
        key: "dispose",
        value: function dispose() {
          var dataKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DATA_KEY;

          _get(_getPrototypeOf(Radio.prototype), "dispose", this).call(this, dataKey);
        }
      }], [{
        key: "matches",
        value: function matches($element) {
          // '.radio > label > input[type=radio]'
          if ($element.attr("type") === "radio") {
            return true;
          }

          return false;
        }
      }, {
        key: "rejectMatch",
        value: function rejectMatch(component, $element) {
          Util$1.assert(this.$element, this.matches($element), "".concat(component, " component element ").concat(Util$1.describe($element), " is invalid for type='radio'."));
        } // ------------------------------------------------------------------------
        // protected
        //decorateMarkup() {
        //  this.$element.after(this.config.template)
        //}
        // ------------------------------------------------------------------------
        // private
        // ------------------------------------------------------------------------
        // static

      }, {
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var $element = $(this);
            var data = $element.data(DATA_KEY);

            if (!data) {
              data = new Radio($element, config);
              $element.data(DATA_KEY, data);
            }
          });
        }
      }]);

      return Radio;
    }(BaseSelection);
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $.fn[JQUERY_NAME] = Radio._jQueryInterface;
    $.fn[JQUERY_NAME].Constructor = Radio;

    $.fn[JQUERY_NAME].noConflict = function () {
      $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
      return Radio._jQueryInterface;
    };

    return Radio;
  }(jQuery);

  var RadioInline = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = "radioInline";
    var DATA_KEY = "bmd.".concat(NAME);
    var JQUERY_NAME = "bmd".concat(NAME.charAt(0).toUpperCase() + NAME.slice(1));
    var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];
    var Default = {
      bmdFormGroup: {
        create: false,
        // no bmd-form-group creation if form-group not present. It messes with the layout.
        required: false
      }
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var RadioInline = /*#__PURE__*/function (_Radio) {
      _inherits(RadioInline, _Radio);

      var _super = _createSuper(RadioInline);

      function RadioInline($element, config) {
        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          inputType: "radio",
          outerClass: "radio-inline"
        };

        _classCallCheck(this, RadioInline);

        return _super.call(this, $element, $.extend(true, {}, Default, config), properties);
      }

      _createClass(RadioInline, [{
        key: "dispose",
        value: function dispose() {
          _get(_getPrototypeOf(RadioInline.prototype), "dispose", this).call(this, DATA_KEY);
        } // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // private
        // ------------------------------------------------------------------------
        // static

      }], [{
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var $element = $(this);
            var data = $element.data(DATA_KEY);

            if (!data) {
              data = new RadioInline($element, config);
              $element.data(DATA_KEY, data);
            }
          });
        }
      }]);

      return RadioInline;
    }(Radio);
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $.fn[JQUERY_NAME] = RadioInline._jQueryInterface;
    $.fn[JQUERY_NAME].Constructor = RadioInline;

    $.fn[JQUERY_NAME].noConflict = function () {
      $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
      return RadioInline._jQueryInterface;
    };

    return RadioInline;
  }(jQuery);

  var Checkbox = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = "checkbox";
    var DATA_KEY = "bmd.".concat(NAME);
    var JQUERY_NAME = "bmd".concat(NAME.charAt(0).toUpperCase() + NAME.slice(1));
    var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];
    var Default = {
      template: "<span class='checkbox-decorator'><span class='check'></span></span>"
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var Checkbox = /*#__PURE__*/function (_BaseSelection) {
      _inherits(Checkbox, _BaseSelection);

      var _super = _createSuper(Checkbox);

      function Checkbox($element, config) {
        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          inputType: NAME,
          outerClass: NAME
        };

        _classCallCheck(this, Checkbox);

        return _super.call(this, $element, $.extend(true, //{invalidComponentMatches: [File, Radio, Text, Textarea, Select]},
        Default, config), properties);
      }

      _createClass(Checkbox, [{
        key: "dispose",
        value: function dispose() {
          var dataKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DATA_KEY;

          _get(_getPrototypeOf(Checkbox.prototype), "dispose", this).call(this, dataKey);
        }
      }], [{
        key: "matches",
        value: function matches($element) {
          // '.checkbox > label > input[type=checkbox]'
          if ($element.attr("type") === "checkbox") {
            return true;
          }

          return false;
        }
      }, {
        key: "rejectMatch",
        value: function rejectMatch(component, $element) {
          Util$1.assert(this.$element, this.matches($element), "".concat(component, " component element ").concat(Util$1.describe($element), " is invalid for type='checkbox'."));
        } // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // private
        // ------------------------------------------------------------------------
        // static

      }, {
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var $element = $(this);
            var data = $element.data(DATA_KEY);

            if (!data) {
              data = new Checkbox($element, config);
              $element.data(DATA_KEY, data);
            }
          });
        }
      }]);

      return Checkbox;
    }(BaseSelection);
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $.fn[JQUERY_NAME] = Checkbox._jQueryInterface;
    $.fn[JQUERY_NAME].Constructor = Checkbox;

    $.fn[JQUERY_NAME].noConflict = function () {
      $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
      return Checkbox._jQueryInterface;
    };

    return Checkbox;
  }(jQuery);

  var CheckboxInline = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = "checkboxInline";
    var DATA_KEY = "bmd.".concat(NAME);
    var JQUERY_NAME = "bmd".concat(NAME.charAt(0).toUpperCase() + NAME.slice(1));
    var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];
    var Default = {
      bmdFormGroup: {
        create: false,
        // no bmd-form-group creation if form-group not present. It messes with the layout.
        required: false
      }
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var CheckboxInline = /*#__PURE__*/function (_Checkbox) {
      _inherits(CheckboxInline, _Checkbox);

      var _super = _createSuper(CheckboxInline);

      function CheckboxInline($element, config) {
        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          inputType: "checkbox",
          outerClass: "checkbox-inline"
        };

        _classCallCheck(this, CheckboxInline);

        return _super.call(this, $element, $.extend(true, {}, Default, config), properties);
      }

      _createClass(CheckboxInline, [{
        key: "dispose",
        value: function dispose() {
          _get(_getPrototypeOf(CheckboxInline.prototype), "dispose", this).call(this, DATA_KEY);
        } //static matches($element) {
        //  // '.checkbox-inline > input[type=checkbox]'
        //  if ($element.attr('type') === 'checkbox') {
        //    return true
        //  }
        //  return false
        //}
        //
        //static rejectMatch(component, $element) {
        //  Util.assert(this.$element, this.matches($element), `${component} component element ${Util.describe($element)} is invalid for type='checkbox'.`)
        //}
        // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // protected
        // ------------------------------------------------------------------------
        // private
        // ------------------------------------------------------------------------
        // static

      }], [{
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var $element = $(this);
            var data = $element.data(DATA_KEY);

            if (!data) {
              data = new CheckboxInline($element, config);
              $element.data(DATA_KEY, data);
            }
          });
        }
      }]);

      return CheckboxInline;
    }(Checkbox);
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $.fn[JQUERY_NAME] = CheckboxInline._jQueryInterface;
    $.fn[JQUERY_NAME].Constructor = CheckboxInline;

    $.fn[JQUERY_NAME].noConflict = function () {
      $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
      return CheckboxInline._jQueryInterface;
    };

    return CheckboxInline;
  }(jQuery);

  /* globals Popper */
  Popper.Defaults.modifiers.computeStyle.gpuAcceleration = false;
  /**
   * $.bootstrapMaterialDesign(config) is a macro class to configure the components generally
   *  used in Material Design for Bootstrap.  You may pass overrides to the configurations
   *  which will be passed into each component, or you may omit use of this class and
   *  configure each component separately.
   */

  var BootstrapMaterialDesign = function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = "bootstrapMaterialDesign";
    var DATA_KEY = "bmd.".concat(NAME);
    var JQUERY_NAME = NAME; // retain this full name since it is long enough not to conflict

    var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];
    /**
     * Global configuration:
     *  The global configuration hash will be mixed in to each components' config.
     *    e.g. calling $.bootstrapMaterialDesign({global: { validate: true } }) would pass `validate:true` to every component
     *
     *
     * Component configuration:
     *  - selector: may be a string or an array.  Any array will be joined with a comma to generate the selector
     *  - disable any component by defining it as false with an override. e.g. $.bootstrapMaterialDesign({ autofill: false })
     *
     *  @see each individual component for more configuration settings.
     */

    var Default = {
      global: {
        validate: false,
        label: {
          className: "bmd-label-static" // default style of label to be used if not specified in the html markup

        },
        ripples: false
      },
      // autofill: {
      //   selector: "body"
      // },
      checkbox: {
        selector: ".bmd-custom-checkbox > label > input[type=checkbox]"
      },
      checkboxInline: {
        selector: ".bmd-custom-checkbox-inline > input[type=checkbox]"
      },
      // collapseInline: {
      //   selector: '.bmd-collapse-inline [data-toggle="collapse"]'
      // },
      // drawer: {
      //   selector: ".bmd-layout-drawer"
      // },
      // file: {
      //   selector: "input[type=file]"
      // },
      radio: {
        selector: ".bmd-custom-radio > label > input[type=radio]"
      },
      radioInline: {
        selector: ".bmd-custom-radio-inline input[type=radio]"
      },
      select: {
        selector: ["select.bmd-form-control"]
      },
      // switch: {
      //   selector: ".switch > label > input[type=checkbox]"
      // },
      text: {
        // omit inputs we have specialized components to handle - we need to match text, email, etc.  The easiest way to do this appears to be just omit the ones we don't want to match and let the rest fall through to this.
        selector: ["input.bmd-form-control:not([type=hidden]):not([type=checkbox]):not([type=radio]):not([type=file]):not([type=button]):not([type=submit]):not([type=reset])"]
      },
      textarea: {
        selector: ["textarea.bmd-form-control"]
      },
      arrive: true,
      // create an ordered component list for instantiation
      instantiation: ["checkbox", "checkboxInline", //"collapseInline",
      //"drawer",
      //'file',
      "radio", "radioInline", //"switch",
      "text", "textarea", "select" //"autofill"
      ]
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    var BootstrapMaterialDesign = /*#__PURE__*/function () {
      function BootstrapMaterialDesign($element, config) {
        var _this = this;

        _classCallCheck(this, BootstrapMaterialDesign);

        this.$element = $element;
        this.config = $.extend(true, {}, Default, config);
        var $document = $(document);

        var _iterator = _createForOfIteratorHelper(this.config.instantiation),
            _step;

        try {
          var _loop = function _loop() {
            var component = _step.value;
            // the component's config fragment is passed in directly, allowing users to override
            var componentConfig = _this.config[component]; // check to make sure component config is enabled (not `false`)

            if (componentConfig) {
              // assemble the selector as it may be an array
              var selector = _this._resolveSelector(componentConfig); // mix in global options


              componentConfig = $.extend(true, {}, _this.config.global, componentConfig); // create the jquery fn name e.g. 'bmdText' for 'text'

              var componentName = "".concat(component.charAt(0).toUpperCase() + component.slice(1));
              var jqueryFn = "bmd".concat(componentName);

              try {
                // safely instantiate component on selector elements with config, report errors and move on.
                // console.debug(`instantiating: $('${selector}')[${jqueryFn}](${componentConfig})`) // eslint-disable-line no-console
                $(selector)[jqueryFn](componentConfig); // add to arrive if present and enabled

                if (document.arrive && _this.config.arrive) {
                  $document.arrive(selector, function () {
                    // eslint-disable-line no-loop-func
                    $(this)[jqueryFn](componentConfig);
                  });
                }
              } catch (e) {
                var message = "Failed to instantiate component: $('".concat(selector, "')[").concat(jqueryFn, "](").concat(componentConfig, ")");
                console.error(message, e, "\nSelected elements: ", $(selector)); // eslint-disable-line no-console

                throw e;
              }
            }
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      _createClass(BootstrapMaterialDesign, [{
        key: "dispose",
        value: function dispose() {
          this.$element.data(DATA_KEY, null);
          this.$element = null;
          this.config = null;
        } // ------------------------------------------------------------------------
        // private

      }, {
        key: "_resolveSelector",
        value: function _resolveSelector(componentConfig) {
          var selector = componentConfig.selector;

          if (Array.isArray(selector)) {
            selector = selector.join(", ");
          }

          return selector;
        } // ------------------------------------------------------------------------
        // static

      }], [{
        key: "_jQueryInterface",
        value: function _jQueryInterface(config) {
          return this.each(function () {
            var $element = $(this);
            var data = $element.data(DATA_KEY);

            if (!data) {
              data = new BootstrapMaterialDesign($element, config);
              $element.data(DATA_KEY, data);
            }
          });
        }
      }]);

      return BootstrapMaterialDesign;
    }();
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $.fn[JQUERY_NAME] = BootstrapMaterialDesign._jQueryInterface;
    $.fn[JQUERY_NAME].Constructor = BootstrapMaterialDesign;

    $.fn[JQUERY_NAME].noConflict = function () {
      $.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
      return BootstrapMaterialDesign._jQueryInterface;
    };

    return BootstrapMaterialDesign;
  }(jQuery);

  (function ($, window, document, undefined$1) {
    /**
     * Creates a carousel.
     * @class The Owl Carousel.
     * @public
     * @param {HTMLElement|jQuery} element - The element to create the carousel for.
     * @param {Object} [options] - The options
     */
    function Owl(element, options) {
      /**
       * Current settings for the carousel.
       * @public
       */
      this.settings = null;
      /**
       * Current options set by the caller including defaults.
       * @public
       */

      this.options = $.extend({}, Owl.Defaults, options);
      /**
       * Plugin element.
       * @public
       */

      this.$element = $(element);
      /**
       * Proxied event handlers.
       * @protected
       */

      this._handlers = {};
      /**
       * References to the running plugins of this carousel.
       * @protected
       */

      this._plugins = {};
      /**
       * Currently suppressed events to prevent them from being retriggered.
       * @protected
       */

      this._supress = {};
      /**
       * Absolute current position.
       * @protected
       */

      this._current = null;
      /**
       * Animation speed in milliseconds.
       * @protected
       */

      this._speed = null;
      /**
       * Coordinates of all items in pixel.
       * @todo The name of this member is missleading.
       * @protected
       */

      this._coordinates = [];
      /**
       * Current breakpoint.
       * @todo Real media queries would be nice.
       * @protected
       */

      this._breakpoint = null;
      /**
       * Current width of the plugin element.
       */

      this._width = null;
      /**
       * All real items.
       * @protected
       */

      this._items = [];
      /**
       * All cloned items.
       * @protected
       */

      this._clones = [];
      /**
       * Merge values of all items.
       * @todo Maybe this could be part of a plugin.
       * @protected
       */

      this._mergers = [];
      /**
       * Widths of all items.
       */

      this._widths = [];
      /**
       * Invalidated parts within the update process.
       * @protected
       */

      this._invalidated = {};
      /**
       * Ordered list of workers for the update process.
       * @protected
       */

      this._pipe = [];
      /**
       * Current state information for the drag operation.
       * @todo #261
       * @protected
       */

      this._drag = {
        time: null,
        target: null,
        pointer: null,
        stage: {
          start: null,
          current: null
        },
        direction: null
      };
      /**
       * Current state information and their tags.
       * @type {Object}
       * @protected
       */

      this._states = {
        current: {},
        tags: {
          'initializing': ['busy'],
          'animating': ['busy'],
          'dragging': ['interacting']
        }
      };
      $.each(['onResize', 'onThrottledResize'], $.proxy(function (i, handler) {
        this._handlers[handler] = $.proxy(this[handler], this);
      }, this));
      $.each(Owl.Plugins, $.proxy(function (key, plugin) {
        this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);
      }, this));
      $.each(Owl.Workers, $.proxy(function (priority, worker) {
        this._pipe.push({
          'filter': worker.filter,
          'run': $.proxy(worker.run, this)
        });
      }, this));
      this.setup();
      this.initialize();
    }
    /**
     * Default options for the carousel.
     * @public
     */


    Owl.Defaults = {
      items: 3,
      loop: false,
      center: false,
      rewind: false,
      checkVisibility: true,
      mouseDrag: true,
      touchDrag: true,
      pullDrag: true,
      freeDrag: false,
      margin: 0,
      stagePadding: 0,
      merge: false,
      mergeFit: true,
      autoWidth: false,
      startPosition: 0,
      rtl: false,
      smartSpeed: 250,
      fluidSpeed: false,
      dragEndSpeed: false,
      responsive: {},
      responsiveRefreshRate: 200,
      responsiveBaseElement: window,
      fallbackEasing: 'swing',
      slideTransition: '',
      info: false,
      nestedItemSelector: false,
      itemElement: 'div',
      stageElement: 'div',
      refreshClass: 'owl-refresh',
      loadedClass: 'owl-loaded',
      loadingClass: 'owl-loading',
      rtlClass: 'owl-rtl',
      responsiveClass: 'owl-responsive',
      dragClass: 'owl-drag',
      itemClass: 'owl-item',
      stageClass: 'owl-stage',
      stageOuterClass: 'owl-stage-outer',
      grabClass: 'owl-grab'
    };
    /**
     * Enumeration for width.
     * @public
     * @readonly
     * @enum {String}
     */

    Owl.Width = {
      Default: 'default',
      Inner: 'inner',
      Outer: 'outer'
    };
    /**
     * Enumeration for types.
     * @public
     * @readonly
     * @enum {String}
     */

    Owl.Type = {
      Event: 'event',
      State: 'state'
    };
    /**
     * Contains all registered plugins.
     * @public
     */

    Owl.Plugins = {};
    /**
     * List of workers involved in the update process.
     */

    Owl.Workers = [{
      filter: ['width', 'settings'],
      run: function run() {
        this._width = this.$element.width();
      }
    }, {
      filter: ['width', 'items', 'settings'],
      run: function run(cache) {
        cache.current = this._items && this._items[this.relative(this._current)];
      }
    }, {
      filter: ['items', 'settings'],
      run: function run() {
        this.$stage.children('.cloned').remove();
      }
    }, {
      filter: ['width', 'items', 'settings'],
      run: function run(cache) {
        var margin = this.settings.margin || '',
            grid = !this.settings.autoWidth,
            rtl = this.settings.rtl,
            css = {
          'width': 'auto',
          'margin-left': rtl ? margin : '',
          'margin-right': rtl ? '' : margin
        };
        !grid && this.$stage.children().css(css);
        cache.css = css;
      }
    }, {
      filter: ['width', 'items', 'settings'],
      run: function run(cache) {
        var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
            merge = null,
            iterator = this._items.length,
            grid = !this.settings.autoWidth,
            widths = [];
        cache.items = {
          merge: false,
          width: width
        };

        while (iterator--) {
          merge = this._mergers[iterator];
          merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;
          cache.items.merge = merge > 1 || cache.items.merge;
          widths[iterator] = !grid ? this._items[iterator].width() : width * merge;
        }

        this._widths = widths;
      }
    }, {
      filter: ['items', 'settings'],
      run: function run() {
        var clones = [],
            items = this._items,
            settings = this.settings,
            // TODO: Should be computed from number of min width items in stage
        view = Math.max(settings.items * 2, 4),
            size = Math.ceil(items.length / 2) * 2,
            repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,
            append = '',
            prepend = '';
        repeat /= 2;

        while (repeat > 0) {
          // Switch to only using appended clones
          clones.push(this.normalize(clones.length / 2, true));
          append = append + items[clones[clones.length - 1]][0].outerHTML;
          clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));
          prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;
          repeat -= 1;
        }

        this._clones = clones;
        $(append).addClass('cloned').appendTo(this.$stage);
        $(prepend).addClass('cloned').prependTo(this.$stage);
      }
    }, {
      filter: ['width', 'items', 'settings'],
      run: function run() {
        var rtl = this.settings.rtl ? 1 : -1,
            size = this._clones.length + this._items.length,
            iterator = -1,
            previous = 0,
            current = 0,
            coordinates = [];

        while (++iterator < size) {
          previous = coordinates[iterator - 1] || 0;
          current = this._widths[this.relative(iterator)] + this.settings.margin;
          coordinates.push(previous + current * rtl);
        }

        this._coordinates = coordinates;
      }
    }, {
      filter: ['width', 'items', 'settings'],
      run: function run() {
        var padding = this.settings.stagePadding,
            coordinates = this._coordinates,
            css = {
          'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,
          'padding-left': padding || '',
          'padding-right': padding || ''
        };
        this.$stage.css(css);
      }
    }, {
      filter: ['width', 'items', 'settings'],
      run: function run(cache) {
        var iterator = this._coordinates.length,
            grid = !this.settings.autoWidth,
            items = this.$stage.children();

        if (grid && cache.items.merge) {
          while (iterator--) {
            cache.css.width = this._widths[this.relative(iterator)];
            items.eq(iterator).css(cache.css);
          }
        } else if (grid) {
          cache.css.width = cache.items.width;
          items.css(cache.css);
        }
      }
    }, {
      filter: ['items'],
      run: function run() {
        this._coordinates.length < 1 && this.$stage.removeAttr('style');
      }
    }, {
      filter: ['width', 'items', 'settings'],
      run: function run(cache) {
        cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;
        cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));
        this.reset(cache.current);
      }
    }, {
      filter: ['position'],
      run: function run() {
        this.animate(this.coordinates(this._current));
      }
    }, {
      filter: ['width', 'position', 'items', 'settings'],
      run: function run() {
        var rtl = this.settings.rtl ? 1 : -1,
            padding = this.settings.stagePadding * 2,
            begin = this.coordinates(this.current()) + padding,
            end = begin + this.width() * rtl,
            inner,
            outer,
            matches = [],
            i,
            n;

        for (i = 0, n = this._coordinates.length; i < n; i++) {
          inner = this._coordinates[i - 1] || 0;
          outer = Math.abs(this._coordinates[i]) + padding * rtl;

          if (this.op(inner, '<=', begin) && this.op(inner, '>', end) || this.op(outer, '<', begin) && this.op(outer, '>', end)) {
            matches.push(i);
          }
        }

        this.$stage.children('.active').removeClass('active');
        this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');
        this.$stage.children('.center').removeClass('center');

        if (this.settings.center) {
          this.$stage.children().eq(this.current()).addClass('center');
        }
      }
    }];
    /**
     * Create the stage DOM element
     */

    Owl.prototype.initializeStage = function () {
      this.$stage = this.$element.find('.' + this.settings.stageClass); // if the stage is already in the DOM, grab it and skip stage initialization

      if (this.$stage.length) {
        return;
      }

      this.$element.addClass(this.options.loadingClass); // create stage

      this.$stage = $('<' + this.settings.stageElement + '>', {
        "class": this.settings.stageClass
      }).wrap($('<div/>', {
        "class": this.settings.stageOuterClass
      })); // append stage

      this.$element.append(this.$stage.parent());
    };
    /**
     * Create item DOM elements
     */


    Owl.prototype.initializeItems = function () {
      var $items = this.$element.find('.owl-item'); // if the items are already in the DOM, grab them and skip item initialization

      if ($items.length) {
        this._items = $items.get().map(function (item) {
          return $(item);
        });
        this._mergers = this._items.map(function () {
          return 1;
        });
        this.refresh();
        return;
      } // append content


      this.replace(this.$element.children().not(this.$stage.parent())); // check visibility

      if (this.isVisible()) {
        // update view
        this.refresh();
      } else {
        // invalidate width
        this.invalidate('width');
      }

      this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);
    };
    /**
     * Initializes the carousel.
     * @protected
     */


    Owl.prototype.initialize = function () {
      this.enter('initializing');
      this.trigger('initialize');
      this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);

      if (this.settings.autoWidth && !this.is('pre-loading')) {
        var imgs, nestedSelector, width;
        imgs = this.$element.find('img');
        nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined$1;
        width = this.$element.children(nestedSelector).width();

        if (imgs.length && width <= 0) {
          this.preloadAutoWidthImages(imgs);
        }
      }

      this.initializeStage();
      this.initializeItems(); // register event handlers

      this.registerEventHandlers();
      this.leave('initializing');
      this.trigger('initialized');
    };
    /**
     * @returns {Boolean} visibility of $element
     *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to
     *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does
     */


    Owl.prototype.isVisible = function () {
      return this.settings.checkVisibility ? this.$element.is(':visible') : true;
    };
    /**
     * Setups the current settings.
     * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
     * @todo Support for media queries by using `matchMedia` would be nice.
     * @public
     */


    Owl.prototype.setup = function () {
      var viewport = this.viewport(),
          overwrites = this.options.responsive,
          match = -1,
          settings = null;

      if (!overwrites) {
        settings = $.extend({}, this.options);
      } else {
        $.each(overwrites, function (breakpoint) {
          if (breakpoint <= viewport && breakpoint > match) {
            match = Number(breakpoint);
          }
        });
        settings = $.extend({}, this.options, overwrites[match]);

        if (typeof settings.stagePadding === 'function') {
          settings.stagePadding = settings.stagePadding();
        }

        delete settings.responsive; // responsive class

        if (settings.responsiveClass) {
          this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\S+\\s', 'g'), '$1' + match));
        }
      }

      this.trigger('change', {
        property: {
          name: 'settings',
          value: settings
        }
      });
      this._breakpoint = match;
      this.settings = settings;
      this.invalidate('settings');
      this.trigger('changed', {
        property: {
          name: 'settings',
          value: this.settings
        }
      });
    };
    /**
     * Updates option logic if necessery.
     * @protected
     */


    Owl.prototype.optionsLogic = function () {
      if (this.settings.autoWidth) {
        this.settings.stagePadding = false;
        this.settings.merge = false;
      }
    };
    /**
     * Prepares an item before add.
     * @todo Rename event parameter `content` to `item`.
     * @protected
     * @returns {jQuery|HTMLElement} - The item container.
     */


    Owl.prototype.prepare = function (item) {
      var event = this.trigger('prepare', {
        content: item
      });

      if (!event.data) {
        event.data = $('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(item);
      }

      this.trigger('prepared', {
        content: event.data
      });
      return event.data;
    };
    /**
     * Updates the view.
     * @public
     */


    Owl.prototype.update = function () {
      var i = 0,
          n = this._pipe.length,
          filter = $.proxy(function (p) {
        return this[p];
      }, this._invalidated),
          cache = {};

      while (i < n) {
        if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {
          this._pipe[i].run(cache);
        }

        i++;
      }

      this._invalidated = {};
      !this.is('valid') && this.enter('valid');
    };
    /**
     * Gets the width of the view.
     * @public
     * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.
     * @returns {Number} - The width of the view in pixel.
     */


    Owl.prototype.width = function (dimension) {
      dimension = dimension || Owl.Width.Default;

      switch (dimension) {
        case Owl.Width.Inner:
        case Owl.Width.Outer:
          return this._width;

        default:
          return this._width - this.settings.stagePadding * 2 + this.settings.margin;
      }
    };
    /**
     * Refreshes the carousel primarily for adaptive purposes.
     * @public
     */


    Owl.prototype.refresh = function () {
      this.enter('refreshing');
      this.trigger('refresh');
      this.setup();
      this.optionsLogic();
      this.$element.addClass(this.options.refreshClass);
      this.update();
      this.$element.removeClass(this.options.refreshClass);
      this.leave('refreshing');
      this.trigger('refreshed');
    };
    /**
     * Checks window `resize` event.
     * @protected
     */


    Owl.prototype.onThrottledResize = function () {
      window.clearTimeout(this.resizeTimer);
      this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
    };
    /**
     * Checks window `resize` event.
     * @protected
     */


    Owl.prototype.onResize = function () {
      if (!this._items.length) {
        return false;
      }

      if (this._width === this.$element.width()) {
        return false;
      }

      if (!this.isVisible()) {
        return false;
      }

      this.enter('resizing');

      if (this.trigger('resize').isDefaultPrevented()) {
        this.leave('resizing');
        return false;
      }

      this.invalidate('width');
      this.refresh();
      this.leave('resizing');
      this.trigger('resized');
    };
    /**
     * Registers event handlers.
     * @todo Check `msPointerEnabled`
     * @todo #261
     * @protected
     */


    Owl.prototype.registerEventHandlers = function () {
      if ($.support.transition) {
        this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));
      }

      if (this.settings.responsive !== false) {
        this.on(window, 'resize', this._handlers.onThrottledResize);
      }

      if (this.settings.mouseDrag) {
        this.$element.addClass(this.options.dragClass);
        this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));
        this.$stage.on('dragstart.owl.core selectstart.owl.core', function () {
          return false;
        });
      }

      if (this.settings.touchDrag) {
        this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));
        this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));
      }
    };
    /**
     * Handles `touchstart` and `mousedown` events.
     * @todo Horizontal swipe threshold as option
     * @todo #261
     * @protected
     * @param {Event} event - The event arguments.
     */


    Owl.prototype.onDragStart = function (event) {
      var stage = null;

      if (event.which === 3) {
        return;
      }

      if ($.support.transform) {
        stage = this.$stage.css('transform').replace(/.*\(|\)| /g, '').split(',');
        stage = {
          x: stage[stage.length === 16 ? 12 : 4],
          y: stage[stage.length === 16 ? 13 : 5]
        };
      } else {
        stage = this.$stage.position();
        stage = {
          x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,
          y: stage.top
        };
      }

      if (this.is('animating')) {
        $.support.transform ? this.animate(stage.x) : this.$stage.stop();
        this.invalidate('position');
      }

      this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');
      this.speed(0);
      this._drag.time = new Date().getTime();
      this._drag.target = $(event.target);
      this._drag.stage.start = stage;
      this._drag.stage.current = stage;
      this._drag.pointer = this.pointer(event);
      $(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));
      $(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function (event) {
        var delta = this.difference(this._drag.pointer, this.pointer(event));
        $(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));

        if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {
          return;
        }

        event.preventDefault();
        this.enter('dragging');
        this.trigger('drag');
      }, this));
    };
    /**
     * Handles the `touchmove` and `mousemove` events.
     * @todo #261
     * @protected
     * @param {Event} event - The event arguments.
     */


    Owl.prototype.onDragMove = function (event) {
      var minimum = null,
          maximum = null,
          pull = null,
          delta = this.difference(this._drag.pointer, this.pointer(event)),
          stage = this.difference(this._drag.stage.start, delta);

      if (!this.is('dragging')) {
        return;
      }

      event.preventDefault();

      if (this.settings.loop) {
        minimum = this.coordinates(this.minimum());
        maximum = this.coordinates(this.maximum() + 1) - minimum;
        stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;
      } else {
        minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());
        maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());
        pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;
        stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);
      }

      this._drag.stage.current = stage;
      this.animate(stage.x);
    };
    /**
     * Handles the `touchend` and `mouseup` events.
     * @todo #261
     * @todo Threshold for click event
     * @protected
     * @param {Event} event - The event arguments.
     */


    Owl.prototype.onDragEnd = function (event) {
      var delta = this.difference(this._drag.pointer, this.pointer(event)),
          stage = this._drag.stage.current,
          direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';
      $(document).off('.owl.core');
      this.$element.removeClass(this.options.grabClass);

      if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {
        this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);
        this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));
        this.invalidate('position');
        this.update();
        this._drag.direction = direction;

        if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {
          this._drag.target.one('click.owl.core', function () {
            return false;
          });
        }
      }

      if (!this.is('dragging')) {
        return;
      }

      this.leave('dragging');
      this.trigger('dragged');
    };
    /**
     * Gets absolute position of the closest item for a coordinate.
     * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
     * @protected
     * @param {Number} coordinate - The coordinate in pixel.
     * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.
     * @return {Number} - The absolute position of the closest item.
     */


    Owl.prototype.closest = function (coordinate, direction) {
      var position = -1,
          pull = 30,
          width = this.width(),
          coordinates = this.coordinates();

      if (!this.settings.freeDrag) {
        // check closest item
        $.each(coordinates, $.proxy(function (index, value) {
          // on a left pull, check on current index
          if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {
            position = index; // on a right pull, check on previous index
            // to do so, subtract width from value and set position = index + 1
          } else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {
            position = index + 1;
          } else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] !== undefined$1 ? coordinates[index + 1] : value - width)) {
            position = direction === 'left' ? index + 1 : index;
          }

          return position === -1;
        }, this));
      }

      if (!this.settings.loop) {
        // non loop boundries
        if (this.op(coordinate, '>', coordinates[this.minimum()])) {
          position = coordinate = this.minimum();
        } else if (this.op(coordinate, '<', coordinates[this.maximum()])) {
          position = coordinate = this.maximum();
        }
      }

      return position;
    };
    /**
     * Animates the stage.
     * @todo #270
     * @public
     * @param {Number} coordinate - The coordinate in pixels.
     */


    Owl.prototype.animate = function (coordinate) {
      var animate = this.speed() > 0;
      this.is('animating') && this.onTransitionEnd();

      if (animate) {
        this.enter('animating');
        this.trigger('translate');
      }

      if ($.support.transform3d && $.support.transition) {
        this.$stage.css({
          transform: 'translate3d(' + coordinate + 'px,0px,0px)',
          transition: this.speed() / 1000 + 's' + (this.settings.slideTransition ? ' ' + this.settings.slideTransition : '')
        });
      } else if (animate) {
        this.$stage.animate({
          left: coordinate + 'px'
        }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));
      } else {
        this.$stage.css({
          left: coordinate + 'px'
        });
      }
    };
    /**
     * Checks whether the carousel is in a specific state or not.
     * @param {String} state - The state to check.
     * @returns {Boolean} - The flag which indicates if the carousel is busy.
     */


    Owl.prototype.is = function (state) {
      return this._states.current[state] && this._states.current[state] > 0;
    };
    /**
     * Sets the absolute position of the current item.
     * @public
     * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.
     * @returns {Number} - The absolute position of the current item.
     */


    Owl.prototype.current = function (position) {
      if (position === undefined$1) {
        return this._current;
      }

      if (this._items.length === 0) {
        return undefined$1;
      }

      position = this.normalize(position);

      if (this._current !== position) {
        var event = this.trigger('change', {
          property: {
            name: 'position',
            value: position
          }
        });

        if (event.data !== undefined$1) {
          position = this.normalize(event.data);
        }

        this._current = position;
        this.invalidate('position');
        this.trigger('changed', {
          property: {
            name: 'position',
            value: this._current
          }
        });
      }

      return this._current;
    };
    /**
     * Invalidates the given part of the update routine.
     * @param {String} [part] - The part to invalidate.
     * @returns {Array.<String>} - The invalidated parts.
     */


    Owl.prototype.invalidate = function (part) {
      if ($.type(part) === 'string') {
        this._invalidated[part] = true;
        this.is('valid') && this.leave('valid');
      }

      return $.map(this._invalidated, function (v, i) {
        return i;
      });
    };
    /**
     * Resets the absolute position of the current item.
     * @public
     * @param {Number} position - The absolute position of the new item.
     */


    Owl.prototype.reset = function (position) {
      position = this.normalize(position);

      if (position === undefined$1) {
        return;
      }

      this._speed = 0;
      this._current = position;
      this.suppress(['translate', 'translated']);
      this.animate(this.coordinates(position));
      this.release(['translate', 'translated']);
    };
    /**
     * Normalizes an absolute or a relative position of an item.
     * @public
     * @param {Number} position - The absolute or relative position to normalize.
     * @param {Boolean} [relative=false] - Whether the given position is relative or not.
     * @returns {Number} - The normalized position.
     */


    Owl.prototype.normalize = function (position, relative) {
      var n = this._items.length,
          m = relative ? 0 : this._clones.length;

      if (!this.isNumeric(position) || n < 1) {
        position = undefined$1;
      } else if (position < 0 || position >= n + m) {
        position = ((position - m / 2) % n + n) % n + m / 2;
      }

      return position;
    };
    /**
     * Converts an absolute position of an item into a relative one.
     * @public
     * @param {Number} position - The absolute position to convert.
     * @returns {Number} - The converted position.
     */


    Owl.prototype.relative = function (position) {
      position -= this._clones.length / 2;
      return this.normalize(position, true);
    };
    /**
     * Gets the maximum position for the current item.
     * @public
     * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
     * @returns {Number}
     */


    Owl.prototype.maximum = function (relative) {
      var settings = this.settings,
          maximum = this._coordinates.length,
          iterator,
          reciprocalItemsWidth,
          elementWidth;

      if (settings.loop) {
        maximum = this._clones.length / 2 + this._items.length - 1;
      } else if (settings.autoWidth || settings.merge) {
        iterator = this._items.length;

        if (iterator) {
          reciprocalItemsWidth = this._items[--iterator].width();
          elementWidth = this.$element.width();

          while (iterator--) {
            reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;

            if (reciprocalItemsWidth > elementWidth) {
              break;
            }
          }
        }

        maximum = iterator + 1;
      } else if (settings.center) {
        maximum = this._items.length - 1;
      } else {
        maximum = this._items.length - settings.items;
      }

      if (relative) {
        maximum -= this._clones.length / 2;
      }

      return Math.max(maximum, 0);
    };
    /**
     * Gets the minimum position for the current item.
     * @public
     * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
     * @returns {Number}
     */


    Owl.prototype.minimum = function (relative) {
      return relative ? 0 : this._clones.length / 2;
    };
    /**
     * Gets an item at the specified relative position.
     * @public
     * @param {Number} [position] - The relative position of the item.
     * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
     */


    Owl.prototype.items = function (position) {
      if (position === undefined$1) {
        return this._items.slice();
      }

      position = this.normalize(position, true);
      return this._items[position];
    };
    /**
     * Gets an item at the specified relative position.
     * @public
     * @param {Number} [position] - The relative position of the item.
     * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
     */


    Owl.prototype.mergers = function (position) {
      if (position === undefined$1) {
        return this._mergers.slice();
      }

      position = this.normalize(position, true);
      return this._mergers[position];
    };
    /**
     * Gets the absolute positions of clones for an item.
     * @public
     * @param {Number} [position] - The relative position of the item.
     * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.
     */


    Owl.prototype.clones = function (position) {
      var odd = this._clones.length / 2,
          even = odd + this._items.length,
          map = function map(index) {
        return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;
      };

      if (position === undefined$1) {
        return $.map(this._clones, function (v, i) {
          return map(i);
        });
      }

      return $.map(this._clones, function (v, i) {
        return v === position ? map(i) : null;
      });
    };
    /**
     * Sets the current animation speed.
     * @public
     * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.
     * @returns {Number} - The current animation speed in milliseconds.
     */


    Owl.prototype.speed = function (speed) {
      if (speed !== undefined$1) {
        this._speed = speed;
      }

      return this._speed;
    };
    /**
     * Gets the coordinate of an item.
     * @todo The name of this method is missleanding.
     * @public
     * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.
     * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.
     */


    Owl.prototype.coordinates = function (position) {
      var multiplier = 1,
          newPosition = position - 1,
          coordinate;

      if (position === undefined$1) {
        return $.map(this._coordinates, $.proxy(function (coordinate, index) {
          return this.coordinates(index);
        }, this));
      }

      if (this.settings.center) {
        if (this.settings.rtl) {
          multiplier = -1;
          newPosition = position + 1;
        }

        coordinate = this._coordinates[position];
        coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;
      } else {
        coordinate = this._coordinates[newPosition] || 0;
      }

      coordinate = Math.ceil(coordinate);
      return coordinate;
    };
    /**
     * Calculates the speed for a translation.
     * @protected
     * @param {Number} from - The absolute position of the start item.
     * @param {Number} to - The absolute position of the target item.
     * @param {Number} [factor=undefined] - The time factor in milliseconds.
     * @returns {Number} - The time in milliseconds for the translation.
     */


    Owl.prototype.duration = function (from, to, factor) {
      if (factor === 0) {
        return 0;
      }

      return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);
    };
    /**
     * Slides to the specified item.
     * @public
     * @param {Number} position - The position of the item.
     * @param {Number} [speed] - The time in milliseconds for the transition.
     */


    Owl.prototype.to = function (position, speed) {
      var current = this.current(),
          revert = null,
          distance = position - this.relative(current),
          direction = (distance > 0) - (distance < 0),
          items = this._items.length,
          minimum = this.minimum(),
          maximum = this.maximum();

      if (this.settings.loop) {
        if (!this.settings.rewind && Math.abs(distance) > items / 2) {
          distance += direction * -1 * items;
        }

        position = current + distance;
        revert = ((position - minimum) % items + items) % items + minimum;

        if (revert !== position && revert - distance <= maximum && revert - distance > 0) {
          current = revert - distance;
          position = revert;
          this.reset(current);
        }
      } else if (this.settings.rewind) {
        maximum += 1;
        position = (position % maximum + maximum) % maximum;
      } else {
        position = Math.max(minimum, Math.min(maximum, position));
      }

      this.speed(this.duration(current, position, speed));
      this.current(position);

      if (this.isVisible()) {
        this.update();
      }
    };
    /**
     * Slides to the next item.
     * @public
     * @param {Number} [speed] - The time in milliseconds for the transition.
     */


    Owl.prototype.next = function (speed) {
      speed = speed || false;
      this.to(this.relative(this.current()) + 1, speed);
    };
    /**
     * Slides to the previous item.
     * @public
     * @param {Number} [speed] - The time in milliseconds for the transition.
     */


    Owl.prototype.prev = function (speed) {
      speed = speed || false;
      this.to(this.relative(this.current()) - 1, speed);
    };
    /**
     * Handles the end of an animation.
     * @protected
     * @param {Event} event - The event arguments.
     */


    Owl.prototype.onTransitionEnd = function (event) {
      // if css2 animation then event object is undefined
      if (event !== undefined$1) {
        event.stopPropagation(); // Catch only owl-stage transitionEnd event

        if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {
          return false;
        }
      }

      this.leave('animating');
      this.trigger('translated');
    };
    /**
     * Gets viewport width.
     * @protected
     * @return {Number} - The width in pixel.
     */


    Owl.prototype.viewport = function () {
      var width;

      if (this.options.responsiveBaseElement !== window) {
        width = $(this.options.responsiveBaseElement).width();
      } else if (window.innerWidth) {
        width = window.innerWidth;
      } else if (document.documentElement && document.documentElement.clientWidth) {
        width = document.documentElement.clientWidth;
      } else {
        console.warn('Can not detect viewport width.');
      }

      return width;
    };
    /**
     * Replaces the current content.
     * @public
     * @param {HTMLElement|jQuery|String} content - The new content.
     */


    Owl.prototype.replace = function (content) {
      this.$stage.empty();
      this._items = [];

      if (content) {
        content = content instanceof jQuery ? content : $(content);
      }

      if (this.settings.nestedItemSelector) {
        content = content.find('.' + this.settings.nestedItemSelector);
      }

      content.filter(function () {
        return this.nodeType === 1;
      }).each($.proxy(function (index, item) {
        item = this.prepare(item);
        this.$stage.append(item);

        this._items.push(item);

        this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
      }, this));
      this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);
      this.invalidate('items');
    };
    /**
     * Adds an item.
     * @todo Use `item` instead of `content` for the event arguments.
     * @public
     * @param {HTMLElement|jQuery|String} content - The item content to add.
     * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.
     */


    Owl.prototype.add = function (content, position) {
      var current = this.relative(this._current);
      position = position === undefined$1 ? this._items.length : this.normalize(position, true);
      content = content instanceof jQuery ? content : $(content);
      this.trigger('add', {
        content: content,
        position: position
      });
      content = this.prepare(content);

      if (this._items.length === 0 || position === this._items.length) {
        this._items.length === 0 && this.$stage.append(content);
        this._items.length !== 0 && this._items[position - 1].after(content);

        this._items.push(content);

        this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
      } else {
        this._items[position].before(content);

        this._items.splice(position, 0, content);

        this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
      }

      this._items[current] && this.reset(this._items[current].index());
      this.invalidate('items');
      this.trigger('added', {
        content: content,
        position: position
      });
    };
    /**
     * Removes an item by its position.
     * @todo Use `item` instead of `content` for the event arguments.
     * @public
     * @param {Number} position - The relative position of the item to remove.
     */


    Owl.prototype.remove = function (position) {
      position = this.normalize(position, true);

      if (position === undefined$1) {
        return;
      }

      this.trigger('remove', {
        content: this._items[position],
        position: position
      });

      this._items[position].remove();

      this._items.splice(position, 1);

      this._mergers.splice(position, 1);

      this.invalidate('items');
      this.trigger('removed', {
        content: null,
        position: position
      });
    };
    /**
     * Preloads images with auto width.
     * @todo Replace by a more generic approach
     * @protected
     */


    Owl.prototype.preloadAutoWidthImages = function (images) {
      images.each($.proxy(function (i, element) {
        this.enter('pre-loading');
        element = $(element);
        $(new Image()).one('load', $.proxy(function (e) {
          element.attr('src', e.target.src);
          element.css('opacity', 1);
          this.leave('pre-loading');
          !this.is('pre-loading') && !this.is('initializing') && this.refresh();
        }, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));
      }, this));
    };
    /**
     * Destroys the carousel.
     * @public
     */


    Owl.prototype.destroy = function () {
      this.$element.off('.owl.core');
      this.$stage.off('.owl.core');
      $(document).off('.owl.core');

      if (this.settings.responsive !== false) {
        window.clearTimeout(this.resizeTimer);
        this.off(window, 'resize', this._handlers.onThrottledResize);
      }

      for (var i in this._plugins) {
        this._plugins[i].destroy();
      }

      this.$stage.children('.cloned').remove();
      this.$stage.unwrap();
      this.$stage.children().contents().unwrap();
      this.$stage.children().unwrap();
      this.$stage.remove();
      this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\S+\\s', 'g'), '')).removeData('owl.carousel');
    };
    /**
     * Operators to calculate right-to-left and left-to-right.
     * @protected
     * @param {Number} [a] - The left side operand.
     * @param {String} [o] - The operator.
     * @param {Number} [b] - The right side operand.
     */


    Owl.prototype.op = function (a, o, b) {
      var rtl = this.settings.rtl;

      switch (o) {
        case '<':
          return rtl ? a > b : a < b;

        case '>':
          return rtl ? a < b : a > b;

        case '>=':
          return rtl ? a <= b : a >= b;

        case '<=':
          return rtl ? a >= b : a <= b;
      }
    };
    /**
     * Attaches to an internal event.
     * @protected
     * @param {HTMLElement} element - The event source.
     * @param {String} event - The event name.
     * @param {Function} listener - The event handler to attach.
     * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.
     */


    Owl.prototype.on = function (element, event, listener, capture) {
      if (element.addEventListener) {
        element.addEventListener(event, listener, capture);
      } else if (element.attachEvent) {
        element.attachEvent('on' + event, listener);
      }
    };
    /**
     * Detaches from an internal event.
     * @protected
     * @param {HTMLElement} element - The event source.
     * @param {String} event - The event name.
     * @param {Function} listener - The attached event handler to detach.
     * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.
     */


    Owl.prototype.off = function (element, event, listener, capture) {
      if (element.removeEventListener) {
        element.removeEventListener(event, listener, capture);
      } else if (element.detachEvent) {
        element.detachEvent('on' + event, listener);
      }
    };
    /**
     * Triggers a public event.
     * @todo Remove `status`, `relatedTarget` should be used instead.
     * @protected
     * @param {String} name - The event name.
     * @param {*} [data=null] - The event data.
     * @param {String} [namespace=carousel] - The event namespace.
     * @param {String} [state] - The state which is associated with the event.
     * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.
     * @returns {Event} - The event arguments.
     */


    Owl.prototype.trigger = function (name, data, namespace, state, enter) {
      var status = {
        item: {
          count: this._items.length,
          index: this.current()
        }
      },
          handler = $.camelCase($.grep(['on', name, namespace], function (v) {
        return v;
      }).join('-').toLowerCase()),
          event = $.Event([name, 'owl', namespace || 'carousel'].join('.').toLowerCase(), $.extend({
        relatedTarget: this
      }, status, data));

      if (!this._supress[name]) {
        $.each(this._plugins, function (name, plugin) {
          if (plugin.onTrigger) {
            plugin.onTrigger(event);
          }
        });
        this.register({
          type: Owl.Type.Event,
          name: name
        });
        this.$element.trigger(event);

        if (this.settings && typeof this.settings[handler] === 'function') {
          this.settings[handler].call(this, event);
        }
      }

      return event;
    };
    /**
     * Enters a state.
     * @param name - The state name.
     */


    Owl.prototype.enter = function (name) {
      $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
        if (this._states.current[name] === undefined$1) {
          this._states.current[name] = 0;
        }

        this._states.current[name]++;
      }, this));
    };
    /**
     * Leaves a state.
     * @param name - The state name.
     */


    Owl.prototype.leave = function (name) {
      $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
        this._states.current[name]--;
      }, this));
    };
    /**
     * Registers an event or state.
     * @public
     * @param {Object} object - The event or state to register.
     */


    Owl.prototype.register = function (object) {
      if (object.type === Owl.Type.Event) {
        if (!$.event.special[object.name]) {
          $.event.special[object.name] = {};
        }

        if (!$.event.special[object.name].owl) {
          var _default = $.event.special[object.name]._default;

          $.event.special[object.name]._default = function (e) {
            if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {
              return _default.apply(this, arguments);
            }

            return e.namespace && e.namespace.indexOf('owl') > -1;
          };

          $.event.special[object.name].owl = true;
        }
      } else if (object.type === Owl.Type.State) {
        if (!this._states.tags[object.name]) {
          this._states.tags[object.name] = object.tags;
        } else {
          this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);
        }

        this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function (tag, i) {
          return $.inArray(tag, this._states.tags[object.name]) === i;
        }, this));
      }
    };
    /**
     * Suppresses events.
     * @protected
     * @param {Array.<String>} events - The events to suppress.
     */


    Owl.prototype.suppress = function (events) {
      $.each(events, $.proxy(function (index, event) {
        this._supress[event] = true;
      }, this));
    };
    /**
     * Releases suppressed events.
     * @protected
     * @param {Array.<String>} events - The events to release.
     */


    Owl.prototype.release = function (events) {
      $.each(events, $.proxy(function (index, event) {
        delete this._supress[event];
      }, this));
    };
    /**
     * Gets unified pointer coordinates from event.
     * @todo #261
     * @protected
     * @param {Event} - The `mousedown` or `touchstart` event.
     * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.
     */


    Owl.prototype.pointer = function (event) {
      var result = {
        x: null,
        y: null
      };
      event = event.originalEvent || event || window.event;
      event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;

      if (event.pageX) {
        result.x = event.pageX;
        result.y = event.pageY;
      } else {
        result.x = event.clientX;
        result.y = event.clientY;
      }

      return result;
    };
    /**
     * Determines if the input is a Number or something that can be coerced to a Number
     * @protected
     * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested
     * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number
     */


    Owl.prototype.isNumeric = function (number) {
      return !isNaN(parseFloat(number));
    };
    /**
     * Gets the difference of two vectors.
     * @todo #261
     * @protected
     * @param {Object} - The first vector.
     * @param {Object} - The second vector.
     * @returns {Object} - The difference.
     */


    Owl.prototype.difference = function (first, second) {
      return {
        x: first.x - second.x,
        y: first.y - second.y
      };
    };
    /**
     * The jQuery Plugin for the Owl Carousel
     * @todo Navigation plugin `next` and `prev`
     * @public
     */


    $.fn.owlCarousel = function (option) {
      var args = Array.prototype.slice.call(arguments, 1);
      return this.each(function () {
        var $this = $(this),
            data = $this.data('owl.carousel');

        if (!data) {
          data = new Owl(this, _typeof(option) == 'object' && option);
          $this.data('owl.carousel', data);
          $.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (i, event) {
            data.register({
              type: Owl.Type.Event,
              name: event
            });
            data.$element.on(event + '.owl.carousel.core', $.proxy(function (e) {
              if (e.namespace && e.relatedTarget !== this) {
                this.suppress([event]);
                data[event].apply(this, [].slice.call(arguments, 1));
                this.release([event]);
              }
            }, data));
          });
        }

        if (typeof option == 'string' && option.charAt(0) !== '_') {
          data[option].apply(data, args);
        }
      });
    };
    /**
     * The constructor for the jQuery Plugin
     * @public
     */


    $.fn.owlCarousel.Constructor = Owl;
  })(window.Zepto || window.jQuery, window, document);

  (function ($, window, document, undefined$1) {
    /**
     * Creates the auto refresh plugin.
     * @class The Auto Refresh Plugin
     * @param {Owl} carousel - The Owl Carousel
     */
    var AutoRefresh = function AutoRefresh(carousel) {
      /**
       * Reference to the core.
       * @protected
       * @type {Owl}
       */
      this._core = carousel;
      /**
       * Refresh interval.
       * @protected
       * @type {number}
       */

      this._interval = null;
      /**
       * Whether the element is currently visible or not.
       * @protected
       * @type {Boolean}
       */

      this._visible = null;
      /**
       * All event handlers.
       * @protected
       * @type {Object}
       */

      this._handlers = {
        'initialized.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.autoRefresh) {
            this.watch();
          }
        }, this)
      }; // set default options

      this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options); // register event handlers

      this._core.$element.on(this._handlers);
    };
    /**
     * Default options.
     * @public
     */


    AutoRefresh.Defaults = {
      autoRefresh: true,
      autoRefreshInterval: 500
    };
    /**
     * Watches the element.
     */

    AutoRefresh.prototype.watch = function () {
      if (this._interval) {
        return;
      }

      this._visible = this._core.isVisible();
      this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);
    };
    /**
     * Refreshes the element.
     */


    AutoRefresh.prototype.refresh = function () {
      if (this._core.isVisible() === this._visible) {
        return;
      }

      this._visible = !this._visible;

      this._core.$element.toggleClass('owl-hidden', !this._visible);

      this._visible && this._core.invalidate('width') && this._core.refresh();
    };
    /**
     * Destroys the plugin.
     */


    AutoRefresh.prototype.destroy = function () {
      var handler, property;
      window.clearInterval(this._interval);

      for (handler in this._handlers) {
        this._core.$element.off(handler, this._handlers[handler]);
      }

      for (property in Object.getOwnPropertyNames(this)) {
        typeof this[property] != 'function' && (this[property] = null);
      }
    };

    $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;
  })(window.Zepto || window.jQuery, window);

  (function ($, window, document, undefined$1) {
    /**
     * Creates the lazy plugin.
     * @class The Lazy Plugin
     * @param {Owl} carousel - The Owl Carousel
     */
    var Lazy = function Lazy(carousel) {
      /**
       * Reference to the core.
       * @protected
       * @type {Owl}
       */
      this._core = carousel;
      /**
       * Already loaded items.
       * @protected
       * @type {Array.<jQuery>}
       */

      this._loaded = [];
      /**
       * Event handlers.
       * @protected
       * @type {Object}
       */

      this._handlers = {
        'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function (e) {
          if (!e.namespace) {
            return;
          }

          if (!this._core.settings || !this._core.settings.lazyLoad) {
            return;
          }

          if (e.property && e.property.name == 'position' || e.type == 'initialized') {
            var settings = this._core.settings,
                n = settings.center && Math.ceil(settings.items / 2) || settings.items,
                i = settings.center && n * -1 || 0,
                position = (e.property && e.property.value !== undefined$1 ? e.property.value : this._core.current()) + i,
                clones = this._core.clones().length,
                load = $.proxy(function (i, v) {
              this.load(v);
            }, this); //TODO: Need documentation for this new option


            if (settings.lazyLoadEager > 0) {
              n += settings.lazyLoadEager; // If the carousel is looping also preload images that are to the "left"

              if (settings.loop) {
                position -= settings.lazyLoadEager;
                n++;
              }
            }

            while (i++ < n) {
              this.load(clones / 2 + this._core.relative(position));
              clones && $.each(this._core.clones(this._core.relative(position)), load);
              position++;
            }
          }
        }, this)
      }; // set the default options

      this._core.options = $.extend({}, Lazy.Defaults, this._core.options); // register event handler

      this._core.$element.on(this._handlers);
    };
    /**
     * Default options.
     * @public
     */


    Lazy.Defaults = {
      lazyLoad: false,
      lazyLoadEager: 0
    };
    /**
     * Loads all resources of an item at the specified position.
     * @param {Number} position - The absolute position of the item.
     * @protected
     */

    Lazy.prototype.load = function (position) {
      var $item = this._core.$stage.children().eq(position),
          $elements = $item && $item.find('.owl-lazy');

      if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {
        return;
      }

      $elements.each($.proxy(function (index, element) {
        var $element = $(element),
            image,
            url = window.devicePixelRatio > 1 && $element.attr('data-src-retina') || $element.attr('data-src') || $element.attr('data-srcset');

        this._core.trigger('load', {
          element: $element,
          url: url
        }, 'lazy');

        if ($element.is('img')) {
          $element.one('load.owl.lazy', $.proxy(function () {
            $element.css('opacity', 1);

            this._core.trigger('loaded', {
              element: $element,
              url: url
            }, 'lazy');
          }, this)).attr('src', url);
        } else if ($element.is('source')) {
          $element.one('load.owl.lazy', $.proxy(function () {
            this._core.trigger('loaded', {
              element: $element,
              url: url
            }, 'lazy');
          }, this)).attr('srcset', url);
        } else {
          image = new Image();
          image.onload = $.proxy(function () {
            $element.css({
              'background-image': 'url("' + url + '")',
              'opacity': '1'
            });

            this._core.trigger('loaded', {
              element: $element,
              url: url
            }, 'lazy');
          }, this);
          image.src = url;
        }
      }, this));

      this._loaded.push($item.get(0));
    };
    /**
     * Destroys the plugin.
     * @public
     */


    Lazy.prototype.destroy = function () {
      var handler, property;

      for (handler in this.handlers) {
        this._core.$element.off(handler, this.handlers[handler]);
      }

      for (property in Object.getOwnPropertyNames(this)) {
        typeof this[property] != 'function' && (this[property] = null);
      }
    };

    $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;
  })(window.Zepto || window.jQuery, window);

  (function ($, window, document, undefined$1) {
    /**
     * Creates the auto height plugin.
     * @class The Auto Height Plugin
     * @param {Owl} carousel - The Owl Carousel
     */
    var AutoHeight = function AutoHeight(carousel) {
      /**
       * Reference to the core.
       * @protected
       * @type {Owl}
       */
      this._core = carousel;
      this._previousHeight = null;
      /**
       * All event handlers.
       * @protected
       * @type {Object}
       */

      this._handlers = {
        'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.autoHeight) {
            this.update();
          }
        }, this),
        'changed.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.autoHeight && e.property.name === 'position') {
            this.update();
          }
        }, this),
        'loaded.owl.lazy': $.proxy(function (e) {
          if (e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {
            this.update();
          }
        }, this)
      }; // set default options

      this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options); // register event handlers

      this._core.$element.on(this._handlers);

      this._intervalId = null;
      var refThis = this; // These changes have been taken from a PR by gavrochelegnou proposed in #1575
      // and have been made compatible with the latest jQuery version

      $(window).on('load', function () {
        if (refThis._core.settings.autoHeight) {
          refThis.update();
        }
      }); // Autoresize the height of the carousel when window is resized
      // When carousel has images, the height is dependent on the width
      // and should also change on resize

      $(window).resize(function () {
        if (refThis._core.settings.autoHeight) {
          if (refThis._intervalId != null) {
            clearTimeout(refThis._intervalId);
          }

          refThis._intervalId = setTimeout(function () {
            refThis.update();
          }, 250);
        }
      });
    };
    /**
     * Default options.
     * @public
     */


    AutoHeight.Defaults = {
      autoHeight: false,
      autoHeightClass: 'owl-height'
    };
    /**
     * Updates the view.
     */

    AutoHeight.prototype.update = function () {
      var start = this._core._current,
          end = start + this._core.settings.items,
          lazyLoadEnabled = this._core.settings.lazyLoad,
          visible = this._core.$stage.children().toArray().slice(start, end),
          heights = [],
          maxheight = 0;

      $.each(visible, function (index, item) {
        heights.push($(item).height());
      });
      maxheight = Math.max.apply(null, heights);

      if (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) {
        maxheight = this._previousHeight;
      }

      this._previousHeight = maxheight;

      this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);
    };

    AutoHeight.prototype.destroy = function () {
      var handler, property;

      for (handler in this._handlers) {
        this._core.$element.off(handler, this._handlers[handler]);
      }

      for (property in Object.getOwnPropertyNames(this)) {
        typeof this[property] !== 'function' && (this[property] = null);
      }
    };

    $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;
  })(window.Zepto || window.jQuery, window);

  (function ($, window, document, undefined$1) {
    /**
     * Creates the video plugin.
     * @class The Video Plugin
     * @param {Owl} carousel - The Owl Carousel
     */
    var Video = function Video(carousel) {
      /**
       * Reference to the core.
       * @protected
       * @type {Owl}
       */
      this._core = carousel;
      /**
       * Cache all video URLs.
       * @protected
       * @type {Object}
       */

      this._videos = {};
      /**
       * Current playing item.
       * @protected
       * @type {jQuery}
       */

      this._playing = null;
      /**
       * All event handlers.
       * @todo The cloned content removale is too late
       * @protected
       * @type {Object}
       */

      this._handlers = {
        'initialized.owl.carousel': $.proxy(function (e) {
          if (e.namespace) {
            this._core.register({
              type: 'state',
              name: 'playing',
              tags: ['interacting']
            });
          }
        }, this),
        'resize.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.video && this.isInFullScreen()) {
            e.preventDefault();
          }
        }, this),
        'refreshed.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.is('resizing')) {
            this._core.$stage.find('.cloned .owl-video-frame').remove();
          }
        }, this),
        'changed.owl.carousel': $.proxy(function (e) {
          if (e.namespace && e.property.name === 'position' && this._playing) {
            this.stop();
          }
        }, this),
        'prepared.owl.carousel': $.proxy(function (e) {
          if (!e.namespace) {
            return;
          }

          var $element = $(e.content).find('.owl-video');

          if ($element.length) {
            $element.css('display', 'none');
            this.fetch($element, $(e.content));
          }
        }, this)
      }; // set default options

      this._core.options = $.extend({}, Video.Defaults, this._core.options); // register event handlers

      this._core.$element.on(this._handlers);

      this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function (e) {
        this.play(e);
      }, this));
    };
    /**
     * Default options.
     * @public
     */


    Video.Defaults = {
      video: false,
      videoHeight: false,
      videoWidth: false
    };
    /**
     * Gets the video ID and the type (YouTube/Vimeo/vzaar only).
     * @protected
     * @param {jQuery} target - The target containing the video data.
     * @param {jQuery} item - The item containing the video.
     */

    Video.prototype.fetch = function (target, item) {
      var type = function () {
        if (target.attr('data-vimeo-id')) {
          return 'vimeo';
        } else if (target.attr('data-vzaar-id')) {
          return 'vzaar';
        } else {
          return 'youtube';
        }
      }(),
          id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),
          width = target.attr('data-width') || this._core.settings.videoWidth,
          height = target.attr('data-height') || this._core.settings.videoHeight,
          url = target.attr('href');

      if (url) {
        /*
        		Parses the id's out of the following urls (and probably more):
        		https://www.youtube.com/watch?v=:id
        		https://youtu.be/:id
        		https://vimeo.com/:id
        		https://vimeo.com/channels/:channel/:id
        		https://vimeo.com/groups/:group/videos/:id
        		https://app.vzaar.com/videos/:id
        			Visual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F
        */
        id = url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);

        if (id[3].indexOf('youtu') > -1) {
          type = 'youtube';
        } else if (id[3].indexOf('vimeo') > -1) {
          type = 'vimeo';
        } else if (id[3].indexOf('vzaar') > -1) {
          type = 'vzaar';
        } else {
          throw new Error('Video URL not supported.');
        }

        id = id[6];
      } else {
        throw new Error('Missing video URL.');
      }

      this._videos[url] = {
        type: type,
        id: id,
        width: width,
        height: height
      };
      item.attr('data-video', url);
      this.thumbnail(target, this._videos[url]);
    };
    /**
     * Creates video thumbnail.
     * @protected
     * @param {jQuery} target - The target containing the video data.
     * @param {Object} info - The video info object.
     * @see `fetch`
     */


    Video.prototype.thumbnail = function (target, video) {
      var tnLink,
          icon,
          path,
          dimensions = video.width && video.height ? 'width:' + video.width + 'px;height:' + video.height + 'px;' : '',
          customTn = target.find('img'),
          srcType = 'src',
          lazyClass = '',
          settings = this._core.settings,
          create = function create(path) {
        icon = '<div class="owl-video-play-icon"></div>';

        if (settings.lazyLoad) {
          tnLink = $('<div/>', {
            "class": 'owl-video-tn ' + lazyClass,
            "srcType": path
          });
        } else {
          tnLink = $('<div/>', {
            "class": "owl-video-tn",
            "style": 'opacity:1;background-image:url(' + path + ')'
          });
        }

        target.after(tnLink);
        target.after(icon);
      }; // wrap video content into owl-video-wrapper div


      target.wrap($('<div/>', {
        "class": "owl-video-wrapper",
        "style": dimensions
      }));

      if (this._core.settings.lazyLoad) {
        srcType = 'data-src';
        lazyClass = 'owl-lazy';
      } // custom thumbnail


      if (customTn.length) {
        create(customTn.attr(srcType));
        customTn.remove();
        return false;
      }

      if (video.type === 'youtube') {
        path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg";
        create(path);
      } else if (video.type === 'vimeo') {
        $.ajax({
          type: 'GET',
          url: '//vimeo.com/api/v2/video/' + video.id + '.json',
          jsonp: 'callback',
          dataType: 'jsonp',
          success: function success(data) {
            path = data[0].thumbnail_large;
            create(path);
          }
        });
      } else if (video.type === 'vzaar') {
        $.ajax({
          type: 'GET',
          url: '//vzaar.com/api/videos/' + video.id + '.json',
          jsonp: 'callback',
          dataType: 'jsonp',
          success: function success(data) {
            path = data.framegrab_url;
            create(path);
          }
        });
      }
    };
    /**
     * Stops the current video.
     * @public
     */


    Video.prototype.stop = function () {
      this._core.trigger('stop', null, 'video');

      this._playing.find('.owl-video-frame').remove();

      this._playing.removeClass('owl-video-playing');

      this._playing = null;

      this._core.leave('playing');

      this._core.trigger('stopped', null, 'video');
    };
    /**
     * Starts the current video.
     * @public
     * @param {Event} event - The event arguments.
     */


    Video.prototype.play = function (event) {
      var target = $(event.target),
          item = target.closest('.' + this._core.settings.itemClass),
          video = this._videos[item.attr('data-video')],
          width = video.width || '100%',
          height = video.height || this._core.$stage.height(),
          html,
          iframe;

      if (this._playing) {
        return;
      }

      this._core.enter('playing');

      this._core.trigger('play', null, 'video');

      item = this._core.items(this._core.relative(item.index()));

      this._core.reset(item.index());

      html = $('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>');
      html.attr('height', height);
      html.attr('width', width);

      if (video.type === 'youtube') {
        html.attr('src', '//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id);
      } else if (video.type === 'vimeo') {
        html.attr('src', '//player.vimeo.com/video/' + video.id + '?autoplay=1');
      } else if (video.type === 'vzaar') {
        html.attr('src', '//view.vzaar.com/' + video.id + '/player?autoplay=true');
      }

      iframe = $(html).wrap('<div class="owl-video-frame" />').insertAfter(item.find('.owl-video'));
      this._playing = item.addClass('owl-video-playing');
    };
    /**
     * Checks whether an video is currently in full screen mode or not.
     * @todo Bad style because looks like a readonly method but changes members.
     * @protected
     * @returns {Boolean}
     */


    Video.prototype.isInFullScreen = function () {
      var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
      return element && $(element).parent().hasClass('owl-video-frame');
    };
    /**
     * Destroys the plugin.
     */


    Video.prototype.destroy = function () {
      var handler, property;

      this._core.$element.off('click.owl.video');

      for (handler in this._handlers) {
        this._core.$element.off(handler, this._handlers[handler]);
      }

      for (property in Object.getOwnPropertyNames(this)) {
        typeof this[property] != 'function' && (this[property] = null);
      }
    };

    $.fn.owlCarousel.Constructor.Plugins.Video = Video;
  })(window.Zepto || window.jQuery, window, document);

  (function ($, window, document, undefined$1) {
    /**
     * Creates the animate plugin.
     * @class The Navigation Plugin
     * @param {Owl} scope - The Owl Carousel
     */
    var Animate = function Animate(scope) {
      this.core = scope;
      this.core.options = $.extend({}, Animate.Defaults, this.core.options);
      this.swapping = true;
      this.previous = undefined$1;
      this.next = undefined$1;
      this.handlers = {
        'change.owl.carousel': $.proxy(function (e) {
          if (e.namespace && e.property.name == 'position') {
            this.previous = this.core.current();
            this.next = e.property.value;
          }
        }, this),
        'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function (e) {
          if (e.namespace) {
            this.swapping = e.type == 'translated';
          }
        }, this),
        'translate.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {
            this.swap();
          }
        }, this)
      };
      this.core.$element.on(this.handlers);
    };
    /**
     * Default options.
     * @public
     */


    Animate.Defaults = {
      animateOut: false,
      animateIn: false
    };
    /**
     * Toggles the animation classes whenever an translations starts.
     * @protected
     * @returns {Boolean|undefined}
     */

    Animate.prototype.swap = function () {
      if (this.core.settings.items !== 1) {
        return;
      }

      if (!$.support.animation || !$.support.transition) {
        return;
      }

      this.core.speed(0);
      var left,
          clear = $.proxy(this.clear, this),
          previous = this.core.$stage.children().eq(this.previous),
          next = this.core.$stage.children().eq(this.next),
          incoming = this.core.settings.animateIn,
          outgoing = this.core.settings.animateOut;

      if (this.core.current() === this.previous) {
        return;
      }

      if (outgoing) {
        left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);
        previous.one($.support.animation.end, clear).css({
          'left': left + 'px'
        }).addClass('animated owl-animated-out').addClass(outgoing);
      }

      if (incoming) {
        next.one($.support.animation.end, clear).addClass('animated owl-animated-in').addClass(incoming);
      }
    };

    Animate.prototype.clear = function (e) {
      $(e.target).css({
        'left': ''
      }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);
      this.core.onTransitionEnd();
    };
    /**
     * Destroys the plugin.
     * @public
     */


    Animate.prototype.destroy = function () {
      var handler, property;

      for (handler in this.handlers) {
        this.core.$element.off(handler, this.handlers[handler]);
      }

      for (property in Object.getOwnPropertyNames(this)) {
        typeof this[property] != 'function' && (this[property] = null);
      }
    };

    $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;
  })(window.Zepto || window.jQuery);

  (function ($, window, document, undefined$1) {
    /**
     * Creates the autoplay plugin.
     * @class The Autoplay Plugin
     * @param {Owl} scope - The Owl Carousel
     */
    var Autoplay = function Autoplay(carousel) {
      /**
       * Reference to the core.
       * @protected
       * @type {Owl}
       */
      this._core = carousel;
      /**
       * The autoplay timeout id.
       * @type {Number}
       */

      this._call = null;
      /**
       * Depending on the state of the plugin, this variable contains either
       * the start time of the timer or the current timer value if it's
       * paused. Since we start in a paused state we initialize the timer
       * value.
       * @type {Number}
       */

      this._time = 0;
      /**
       * Stores the timeout currently used.
       * @type {Number}
       */

      this._timeout = 0;
      /**
       * Indicates whenever the autoplay is paused.
       * @type {Boolean}
       */

      this._paused = true;
      /**
       * All event handlers.
       * @protected
       * @type {Object}
       */

      this._handlers = {
        'changed.owl.carousel': $.proxy(function (e) {
          if (e.namespace && e.property.name === 'settings') {
            if (this._core.settings.autoplay) {
              this.play();
            } else {
              this.stop();
            }
          } else if (e.namespace && e.property.name === 'position' && this._paused) {
            // Reset the timer. This code is triggered when the position
            // of the carousel was changed through user interaction.
            this._time = 0;
          }
        }, this),
        'initialized.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.autoplay) {
            this.play();
          }
        }, this),
        'play.owl.autoplay': $.proxy(function (e, t, s) {
          if (e.namespace) {
            this.play(t, s);
          }
        }, this),
        'stop.owl.autoplay': $.proxy(function (e) {
          if (e.namespace) {
            this.stop();
          }
        }, this),
        'mouseover.owl.autoplay': $.proxy(function () {
          if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
            this.pause();
          }
        }, this),
        'mouseleave.owl.autoplay': $.proxy(function () {
          if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
            this.play();
          }
        }, this),
        'touchstart.owl.core': $.proxy(function () {
          if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
            this.pause();
          }
        }, this),
        'touchend.owl.core': $.proxy(function () {
          if (this._core.settings.autoplayHoverPause) {
            this.play();
          }
        }, this)
      }; // register event handlers

      this._core.$element.on(this._handlers); // set default options


      this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);
    };
    /**
     * Default options.
     * @public
     */


    Autoplay.Defaults = {
      autoplay: false,
      autoplayTimeout: 5000,
      autoplayHoverPause: false,
      autoplaySpeed: false
    };
    /**
     * Transition to the next slide and set a timeout for the next transition.
     * @private
     * @param {Number} [speed] - The animation speed for the animations.
     */

    Autoplay.prototype._next = function (speed) {
      this._call = window.setTimeout($.proxy(this._next, this, speed), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read());

      if (this._core.is('interacting') || document.hidden) {
        return;
      }

      this._core.next(speed || this._core.settings.autoplaySpeed);
    };
    /**
     * Reads the current timer value when the timer is playing.
     * @public
     */


    Autoplay.prototype.read = function () {
      return new Date().getTime() - this._time;
    };
    /**
     * Starts the autoplay.
     * @public
     * @param {Number} [timeout] - The interval before the next animation starts.
     * @param {Number} [speed] - The animation speed for the animations.
     */


    Autoplay.prototype.play = function (timeout, speed) {
      var elapsed;

      if (!this._core.is('rotating')) {
        this._core.enter('rotating');
      }

      timeout = timeout || this._core.settings.autoplayTimeout; // Calculate the elapsed time since the last transition. If the carousel
      // wasn't playing this calculation will yield zero.

      elapsed = Math.min(this._time % (this._timeout || timeout), timeout);

      if (this._paused) {
        // Start the clock.
        this._time = this.read();
        this._paused = false;
      } else {
        // Clear the active timeout to allow replacement.
        window.clearTimeout(this._call);
      } // Adjust the origin of the timer to match the new timeout value.


      this._time += this.read() % timeout - elapsed;
      this._timeout = timeout;
      this._call = window.setTimeout($.proxy(this._next, this, speed), timeout - elapsed);
    };
    /**
     * Stops the autoplay.
     * @public
     */


    Autoplay.prototype.stop = function () {
      if (this._core.is('rotating')) {
        // Reset the clock.
        this._time = 0;
        this._paused = true;
        window.clearTimeout(this._call);

        this._core.leave('rotating');
      }
    };
    /**
     * Pauses the autoplay.
     * @public
     */


    Autoplay.prototype.pause = function () {
      if (this._core.is('rotating') && !this._paused) {
        // Pause the clock.
        this._time = this.read();
        this._paused = true;
        window.clearTimeout(this._call);
      }
    };
    /**
     * Destroys the plugin.
     */


    Autoplay.prototype.destroy = function () {
      var handler, property;
      this.stop();

      for (handler in this._handlers) {
        this._core.$element.off(handler, this._handlers[handler]);
      }

      for (property in Object.getOwnPropertyNames(this)) {
        typeof this[property] != 'function' && (this[property] = null);
      }
    };

    $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;
  })(window.Zepto || window.jQuery, window, document);

  (function ($, window, document, undefined$1) {
    /**
     * Creates the navigation plugin.
     * @class The Navigation Plugin
     * @param {Owl} carousel - The Owl Carousel.
     */

    var Navigation = function Navigation(carousel) {
      /**
       * Reference to the core.
       * @protected
       * @type {Owl}
       */
      this._core = carousel;
      /**
       * Indicates whether the plugin is initialized or not.
       * @protected
       * @type {Boolean}
       */

      this._initialized = false;
      /**
       * The current paging indexes.
       * @protected
       * @type {Array}
       */

      this._pages = [];
      /**
       * All DOM elements of the user interface.
       * @protected
       * @type {Object}
       */

      this._controls = {};
      /**
       * Markup for an indicator.
       * @protected
       * @type {Array.<String>}
       */

      this._templates = [];
      /**
       * The carousel element.
       * @type {jQuery}
       */

      this.$element = this._core.$element;
      /**
       * Overridden methods of the carousel.
       * @protected
       * @type {Object}
       */

      this._overrides = {
        next: this._core.next,
        prev: this._core.prev,
        to: this._core.to
      };
      /**
       * All event handlers.
       * @protected
       * @type {Object}
       */

      this._handlers = {
        'prepared.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.dotsData) {
            this._templates.push('<div class="' + this._core.settings.dotClass + '">' + $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');
          }
        }, this),
        'added.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.dotsData) {
            this._templates.splice(e.position, 0, this._templates.pop());
          }
        }, this),
        'remove.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.dotsData) {
            this._templates.splice(e.position, 1);
          }
        }, this),
        'changed.owl.carousel': $.proxy(function (e) {
          if (e.namespace && e.property.name == 'position') {
            this.draw();
          }
        }, this),
        'initialized.owl.carousel': $.proxy(function (e) {
          if (e.namespace && !this._initialized) {
            this._core.trigger('initialize', null, 'navigation');

            this.initialize();
            this.update();
            this.draw();
            this._initialized = true;

            this._core.trigger('initialized', null, 'navigation');
          }
        }, this),
        'refreshed.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._initialized) {
            this._core.trigger('refresh', null, 'navigation');

            this.update();
            this.draw();

            this._core.trigger('refreshed', null, 'navigation');
          }
        }, this)
      }; // set default options

      this._core.options = $.extend({}, Navigation.Defaults, this._core.options); // register event handlers

      this.$element.on(this._handlers);
    };
    /**
     * Default options.
     * @public
     * @todo Rename `slideBy` to `navBy`
     */


    Navigation.Defaults = {
      nav: false,
      navText: ['<span aria-label="' + 'Previous' + '">&#x2039;</span>', '<span aria-label="' + 'Next' + '">&#x203a;</span>'],
      navSpeed: false,
      navElement: 'button type="button" role="presentation"',
      navContainer: false,
      navContainerClass: 'owl-nav',
      navClass: ['owl-prev', 'owl-next'],
      slideBy: 1,
      dotClass: 'owl-dot',
      dotsClass: 'owl-dots',
      dots: true,
      dotsEach: false,
      dotsData: false,
      dotsSpeed: false,
      dotsContainer: false
    };
    /**
     * Initializes the layout of the plugin and extends the carousel.
     * @protected
     */

    Navigation.prototype.initialize = function () {
      var override,
          settings = this._core.settings; // create DOM structure for relative navigation

      this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');
      this._controls.$previous = $('<' + settings.navElement + '>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click', $.proxy(function (e) {
        this.prev(settings.navSpeed);
      }, this));
      this._controls.$next = $('<' + settings.navElement + '>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click', $.proxy(function (e) {
        this.next(settings.navSpeed);
      }, this)); // create DOM structure for absolute navigation

      if (!settings.dotsData) {
        this._templates = [$('<button role="button">').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')];
      }

      this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');

      this._controls.$absolute.on('click', 'button', $.proxy(function (e) {
        var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();
        e.preventDefault();
        this.to(index, settings.dotsSpeed);
      }, this));
      /*$el.on('focusin', function() {
      	$(document).off(".carousel");
      		$(document).on('keydown.carousel', function(e) {
      		if(e.keyCode == 37) {
      			$el.trigger('prev.owl')
      		}
      		if(e.keyCode == 39) {
      			$el.trigger('next.owl')
      		}
      	});
      });*/
      // override public methods of the carousel


      for (override in this._overrides) {
        this._core[override] = $.proxy(this[override], this);
      }
    };
    /**
     * Destroys the plugin.
     * @protected
     */


    Navigation.prototype.destroy = function () {
      var handler, control, property, override, settings;
      settings = this._core.settings;

      for (handler in this._handlers) {
        this.$element.off(handler, this._handlers[handler]);
      }

      for (control in this._controls) {
        if (control === '$relative' && settings.navContainer) {
          this._controls[control].html('');
        } else {
          this._controls[control].remove();
        }
      }

      for (override in this.overides) {
        this._core[override] = this._overrides[override];
      }

      for (property in Object.getOwnPropertyNames(this)) {
        typeof this[property] != 'function' && (this[property] = null);
      }
    };
    /**
     * Updates the internal state.
     * @protected
     */


    Navigation.prototype.update = function () {
      var i,
          j,
          k,
          lower = this._core.clones().length / 2,
          upper = lower + this._core.items().length,
          maximum = this._core.maximum(true),
          settings = this._core.settings,
          size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;

      if (settings.slideBy !== 'page') {
        settings.slideBy = Math.min(settings.slideBy, settings.items);
      }

      if (settings.dots || settings.slideBy == 'page') {
        this._pages = [];

        for (i = lower, j = 0, k = 0; i < upper; i++) {
          if (j >= size || j === 0) {
            this._pages.push({
              start: Math.min(maximum, i - lower),
              end: i - lower + size - 1
            });

            if (Math.min(maximum, i - lower) === maximum) {
              break;
            }

            j = 0, ++k;
          }

          j += this._core.mergers(this._core.relative(i));
        }
      }
    };
    /**
     * Draws the user interface.
     * @todo The option `dotsData` wont work.
     * @protected
     */


    Navigation.prototype.draw = function () {
      var difference,
          settings = this._core.settings,
          disabled = this._core.items().length <= settings.items,
          index = this._core.relative(this._core.current()),
          loop = settings.loop || settings.rewind;

      this._controls.$relative.toggleClass('disabled', !settings.nav || disabled);

      if (settings.nav) {
        this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));

        this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));
      }

      this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);

      if (settings.dots) {
        difference = this._pages.length - this._controls.$absolute.children().length;

        if (settings.dotsData && difference !== 0) {
          this._controls.$absolute.html(this._templates.join(''));
        } else if (difference > 0) {
          this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));
        } else if (difference < 0) {
          this._controls.$absolute.children().slice(difference).remove();
        }

        this._controls.$absolute.find('.active').removeClass('active');

        this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');
      }
    };
    /**
     * Extends event data.
     * @protected
     * @param {Event} event - The event object which gets thrown.
     */


    Navigation.prototype.onTrigger = function (event) {
      var settings = this._core.settings;
      event.page = {
        index: $.inArray(this.current(), this._pages),
        count: this._pages.length,
        size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)
      };
    };
    /**
     * Gets the current page position of the carousel.
     * @protected
     * @returns {Number}
     */


    Navigation.prototype.current = function () {
      var current = this._core.relative(this._core.current());

      return $.grep(this._pages, $.proxy(function (page, index) {
        return page.start <= current && page.end >= current;
      }, this)).pop();
    };
    /**
     * Gets the current succesor/predecessor position.
     * @protected
     * @returns {Number}
     */


    Navigation.prototype.getPosition = function (successor) {
      var position,
          length,
          settings = this._core.settings;

      if (settings.slideBy == 'page') {
        position = $.inArray(this.current(), this._pages);
        length = this._pages.length;
        successor ? ++position : --position;
        position = this._pages[(position % length + length) % length].start;
      } else {
        position = this._core.relative(this._core.current());
        length = this._core.items().length;
        successor ? position += settings.slideBy : position -= settings.slideBy;
      }

      return position;
    };
    /**
     * Slides to the next item or page.
     * @public
     * @param {Number} [speed=false] - The time in milliseconds for the transition.
     */


    Navigation.prototype.next = function (speed) {
      $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);
    };
    /**
     * Slides to the previous item or page.
     * @public
     * @param {Number} [speed=false] - The time in milliseconds for the transition.
     */


    Navigation.prototype.prev = function (speed) {
      $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);
    };
    /**
     * Slides to the specified item or page.
     * @public
     * @param {Number} position - The position of the item or page.
     * @param {Number} [speed] - The time in milliseconds for the transition.
     * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.
     */


    Navigation.prototype.to = function (position, speed, standard) {
      var length;

      if (!standard && this._pages.length) {
        length = this._pages.length;
        $.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed);
      } else {
        $.proxy(this._overrides.to, this._core)(position, speed);
      }
    };

    $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;
  })(window.Zepto || window.jQuery);

  (function ($, window, document, undefined$1) {
    /**
     * Creates the hash plugin.
     * @class The Hash Plugin
     * @param {Owl} carousel - The Owl Carousel
     */

    var Hash = function Hash(carousel) {
      /**
       * Reference to the core.
       * @protected
       * @type {Owl}
       */
      this._core = carousel;
      /**
       * Hash index for the items.
       * @protected
       * @type {Object}
       */

      this._hashes = {};
      /**
       * The carousel element.
       * @type {jQuery}
       */

      this.$element = this._core.$element;
      /**
       * All event handlers.
       * @protected
       * @type {Object}
       */

      this._handlers = {
        'initialized.owl.carousel': $.proxy(function (e) {
          if (e.namespace && this._core.settings.startPosition === 'URLHash') {
            $(window).trigger('hashchange.owl.navigation');
          }
        }, this),
        'prepared.owl.carousel': $.proxy(function (e) {
          if (e.namespace) {
            var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');

            if (!hash) {
              return;
            }

            this._hashes[hash] = e.content;
          }
        }, this),
        'changed.owl.carousel': $.proxy(function (e) {
          if (e.namespace && e.property.name === 'position') {
            var current = this._core.items(this._core.relative(this._core.current())),
                hash = $.map(this._hashes, function (item, hash) {
              return item === current ? hash : null;
            }).join();

            if (!hash || window.location.hash.slice(1) === hash) {
              return;
            }

            window.location.hash = hash;
          }
        }, this)
      }; // set default options

      this._core.options = $.extend({}, Hash.Defaults, this._core.options); // register the event handlers

      this.$element.on(this._handlers); // register event listener for hash navigation

      $(window).on('hashchange.owl.navigation', $.proxy(function (e) {
        var hash = window.location.hash.substring(1),
            items = this._core.$stage.children(),
            position = this._hashes[hash] && items.index(this._hashes[hash]);

        if (position === undefined$1 || position === this._core.current()) {
          return;
        }

        this._core.to(this._core.relative(position), false, true);
      }, this));
    };
    /**
     * Default options.
     * @public
     */


    Hash.Defaults = {
      URLhashListener: false
    };
    /**
     * Destroys the plugin.
     * @public
     */

    Hash.prototype.destroy = function () {
      var handler, property;
      $(window).off('hashchange.owl.navigation');

      for (handler in this._handlers) {
        this._core.$element.off(handler, this._handlers[handler]);
      }

      for (property in Object.getOwnPropertyNames(this)) {
        typeof this[property] != 'function' && (this[property] = null);
      }
    };

    $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;
  })(window.Zepto || window.jQuery, window);

  (function ($, window, document, undefined$1) {
    var style = $('<support>').get(0).style,
        prefixes = 'Webkit Moz O ms'.split(' '),
        events = {
      transition: {
        end: {
          WebkitTransition: 'webkitTransitionEnd',
          MozTransition: 'transitionend',
          OTransition: 'oTransitionEnd',
          transition: 'transitionend'
        }
      },
      animation: {
        end: {
          WebkitAnimation: 'webkitAnimationEnd',
          MozAnimation: 'animationend',
          OAnimation: 'oAnimationEnd',
          animation: 'animationend'
        }
      }
    },
        tests = {
      csstransforms: function csstransforms() {
        return !!test('transform');
      },
      csstransforms3d: function csstransforms3d() {
        return !!test('perspective');
      },
      csstransitions: function csstransitions() {
        return !!test('transition');
      },
      cssanimations: function cssanimations() {
        return !!test('animation');
      }
    };

    function test(property, prefixed) {
      var result = false,
          upper = property.charAt(0).toUpperCase() + property.slice(1);
      $.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function (i, property) {
        if (style[property] !== undefined$1) {
          result = prefixed ? property : true;
          return false;
        }
      });
      return result;
    }

    function prefixed(property) {
      return test(property, true);
    }

    if (tests.csstransitions()) {
      /* jshint -W053 */
      $.support.transition = new String(prefixed('transition'));
      $.support.transition.end = events.transition.end[$.support.transition];
    }

    if (tests.cssanimations()) {
      /* jshint -W053 */
      $.support.animation = new String(prefixed('animation'));
      $.support.animation.end = events.animation.end[$.support.animation];
    }

    if (tests.csstransforms()) {
      /* jshint -W053 */
      $.support.transform = new String(prefixed('transform'));
      $.support.transform3d = tests.csstransforms3d();
    }
  })(window.Zepto || window.jQuery);

  // ==================================================
  // fancyBox v3.5.7
  //
  // Licensed GPLv3 for open source use
  // or fancyBox Commercial License for commercial use
  //
  // http://fancyapps.com/fancybox/
  // Copyright 2019 fancyApps
  //
  // ==================================================
  (function (window, document, $, undefined$1) {

    window.console = window.console || {
      info: function info(stuff) {}
    }; // If there's no jQuery, fancyBox can't work
    // =========================================

    if (!$) {
      return;
    } // Check if fancyBox is already initialized
    // ========================================


    if ($.fn.fancybox) {
      console.info("fancyBox already initialized");
      return;
    } // Private default settings
    // ========================


    var defaults = {
      // Close existing modals
      // Set this to false if you do not need to stack multiple instances
      closeExisting: false,
      // Enable infinite gallery navigation
      loop: false,
      // Horizontal space between slides
      gutter: 50,
      // Enable keyboard navigation
      keyboard: true,
      // Should allow caption to overlap the content
      preventCaptionOverlap: true,
      // Should display navigation arrows at the screen edges
      arrows: true,
      // Should display counter at the top left corner
      infobar: true,
      // Should display close button (using `btnTpl.smallBtn` template) over the content
      // Can be true, false, "auto"
      // If "auto" - will be automatically enabled for "html", "inline" or "ajax" items
      smallBtn: "auto",
      // Should display toolbar (buttons at the top)
      // Can be true, false, "auto"
      // If "auto" - will be automatically hidden if "smallBtn" is enabled
      toolbar: "auto",
      // What buttons should appear in the top right corner.
      // Buttons will be created using templates from `btnTpl` option
      // and they will be placed into toolbar (class="fancybox-toolbar"` element)
      buttons: ["zoom", //"share",
      "slideShow", //"fullScreen",
      //"download",
      "thumbs", "close"],
      // Detect "idle" time in seconds
      idleTime: 3,
      // Disable right-click and use simple image protection for images
      protect: false,
      // Shortcut to make content "modal" - disable keyboard navigtion, hide buttons, etc
      modal: false,
      image: {
        // Wait for images to load before displaying
        //   true  - wait for image to load and then display;
        //   false - display thumbnail and load the full-sized image over top,
        //           requires predefined image dimensions (`data-width` and `data-height` attributes)
        preload: false
      },
      ajax: {
        // Object containing settings for ajax request
        settings: {
          // This helps to indicate that request comes from the modal
          // Feel free to change naming
          data: {
            fancybox: true
          }
        }
      },
      iframe: {
        // Iframe template
        tpl: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',
        // Preload iframe before displaying it
        // This allows to calculate iframe content width and height
        // (note: Due to "Same Origin Policy", you can't get cross domain data).
        preload: true,
        // Custom CSS styling for iframe wrapping element
        // You can use this to set custom iframe dimensions
        css: {},
        // Iframe tag attributes
        attr: {
          scrolling: "auto"
        }
      },
      // For HTML5 video only
      video: {
        tpl: '<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}">' + '<source src="{{src}}" type="{{format}}" />' + 'Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!' + "</video>",
        format: "",
        // custom video format
        autoStart: true
      },
      // Default content type if cannot be detected automatically
      defaultType: "image",
      // Open/close animation type
      // Possible values:
      //   false            - disable
      //   "zoom"           - zoom images from/to thumbnail
      //   "fade"
      //   "zoom-in-out"
      //
      animationEffect: "zoom",
      // Duration in ms for open/close animation
      animationDuration: 366,
      // Should image change opacity while zooming
      // If opacity is "auto", then opacity will be changed if image and thumbnail have different aspect ratios
      zoomOpacity: "auto",
      // Transition effect between slides
      //
      // Possible values:
      //   false            - disable
      //   "fade'
      //   "slide'
      //   "circular'
      //   "tube'
      //   "zoom-in-out'
      //   "rotate'
      //
      transitionEffect: "fade",
      // Duration in ms for transition animation
      transitionDuration: 366,
      // Custom CSS class for slide element
      slideClass: "",
      // Custom CSS class for layout
      baseClass: "",
      // Base template for layout
      baseTpl: '<div class="fancybox-container" role="dialog" tabindex="-1">' + '<div class="fancybox-bg"></div>' + '<div class="fancybox-inner">' + '<div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div>' + '<div class="fancybox-toolbar">{{buttons}}</div>' + '<div class="fancybox-navigation">{{arrows}}</div>' + '<div class="fancybox-stage"></div>' + '<div class="fancybox-caption"><div class="fancybox-caption__body"></div></div>' + "</div>" + "</div>",
      // Loading indicator template
      spinnerTpl: '<div class="fancybox-loading"></div>',
      // Error message template
      errorTpl: '<div class="fancybox-error"><p>{{ERROR}}</p></div>',
      btnTpl: {
        download: '<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;">' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg>' + "</a>",
        zoom: '<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}">' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg>' + "</button>",
        close: '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}">' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg>' + "</button>",
        // Arrows
        arrowLeft: '<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}">' + '<div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div>' + "</button>",
        arrowRight: '<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}">' + '<div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div>' + "</button>",
        // This small close button will be appended to your html/inline/ajax content by default,
        // if "smallBtn" option is not set to false
        smallBtn: '<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}">' + '<svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg>' + "</button>"
      },
      // Container is injected into this element
      parentEl: "body",
      // Hide browser vertical scrollbars; use at your own risk
      hideScrollbar: true,
      // Focus handling
      // ==============
      // Try to focus on the first focusable element after opening
      autoFocus: true,
      // Put focus back to active element after closing
      backFocus: true,
      // Do not let user to focus on element outside modal content
      trapFocus: true,
      // Module specific options
      // =======================
      fullScreen: {
        autoStart: false
      },
      // Set `touch: false` to disable panning/swiping
      touch: {
        vertical: true,
        // Allow to drag content vertically
        momentum: true // Continue movement after releasing mouse/touch when panning

      },
      // Hash value when initializing manually,
      // set `false` to disable hash change
      hash: null,
      // Customize or add new media types
      // Example:

      /*
        media : {
          youtube : {
            params : {
              autoplay : 0
            }
          }
        }
      */
      media: {},
      slideShow: {
        autoStart: false,
        speed: 3000
      },
      thumbs: {
        autoStart: false,
        // Display thumbnails on opening
        hideOnClose: true,
        // Hide thumbnail grid when closing animation starts
        parentEl: ".fancybox-container",
        // Container is injected into this element
        axis: "y" // Vertical (y) or horizontal (x) scrolling

      },
      // Use mousewheel to navigate gallery
      // If 'auto' - enabled for images only
      wheel: "auto",
      // Callbacks
      //==========
      // See Documentation/API/Events for more information
      // Example:

      /*
        afterShow: function( instance, current ) {
          console.info( 'Clicked element:' );
          console.info( current.opts.$orig );
        }
      */
      onInit: $.noop,
      // When instance has been initialized
      beforeLoad: $.noop,
      // Before the content of a slide is being loaded
      afterLoad: $.noop,
      // When the content of a slide is done loading
      beforeShow: $.noop,
      // Before open animation starts
      afterShow: $.noop,
      // When content is done loading and animating
      beforeClose: $.noop,
      // Before the instance attempts to close. Return false to cancel the close.
      afterClose: $.noop,
      // After instance has been closed
      onActivate: $.noop,
      // When instance is brought to front
      onDeactivate: $.noop,
      // When other instance has been activated
      // Interaction
      // ===========
      // Use options below to customize taken action when user clicks or double clicks on the fancyBox area,
      // each option can be string or method that returns value.
      //
      // Possible values:
      //   "close"           - close instance
      //   "next"            - move to next gallery item
      //   "nextOrClose"     - move to next gallery item or close if gallery has only one item
      //   "toggleControls"  - show/hide controls
      //   "zoom"            - zoom image (if loaded)
      //   false             - do nothing
      // Clicked on the content
      clickContent: function clickContent(current, event) {
        return current.type === "image" ? "zoom" : false;
      },
      // Clicked on the slide
      clickSlide: "close",
      // Clicked on the background (backdrop) element;
      // if you have not changed the layout, then most likely you need to use `clickSlide` option
      clickOutside: "close",
      // Same as previous two, but for double click
      dblclickContent: false,
      dblclickSlide: false,
      dblclickOutside: false,
      // Custom options when mobile device is detected
      // =============================================
      mobile: {
        preventCaptionOverlap: false,
        idleTime: false,
        clickContent: function clickContent(current, event) {
          return current.type === "image" ? "toggleControls" : false;
        },
        clickSlide: function clickSlide(current, event) {
          return current.type === "image" ? "toggleControls" : "close";
        },
        dblclickContent: function dblclickContent(current, event) {
          return current.type === "image" ? "zoom" : false;
        },
        dblclickSlide: function dblclickSlide(current, event) {
          return current.type === "image" ? "zoom" : false;
        }
      },
      // Internationalization
      // ====================
      lang: "en",
      i18n: {
        en: {
          CLOSE: "Close",
          NEXT: "Next",
          PREV: "Previous",
          ERROR: "The requested content cannot be loaded. <br/> Please try again later.",
          PLAY_START: "Start slideshow",
          PLAY_STOP: "Pause slideshow",
          FULL_SCREEN: "Full screen",
          THUMBS: "Thumbnails",
          DOWNLOAD: "Download",
          SHARE: "Share",
          ZOOM: "Zoom"
        },
        de: {
          CLOSE: "Schlie&szlig;en",
          NEXT: "Weiter",
          PREV: "Zur&uuml;ck",
          ERROR: "Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",
          PLAY_START: "Diaschau starten",
          PLAY_STOP: "Diaschau beenden",
          FULL_SCREEN: "Vollbild",
          THUMBS: "Vorschaubilder",
          DOWNLOAD: "Herunterladen",
          SHARE: "Teilen",
          ZOOM: "Vergr&ouml;&szlig;ern"
        }
      }
    }; // Few useful variables and methods
    // ================================

    var $W = $(window);
    var $D = $(document);
    var called = 0; // Check if an object is a jQuery object and not a native JavaScript object
    // ========================================================================

    var isQuery = function isQuery(obj) {
      return obj && obj.hasOwnProperty && obj instanceof $;
    }; // Handle multiple browsers for "requestAnimationFrame" and "cancelAnimationFrame"
    // ===============================================================================


    var requestAFrame = function () {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || // if all else fails, use setTimeout
      function (callback) {
        return window.setTimeout(callback, 1000 / 60);
      };
    }();

    var cancelAFrame = function () {
      return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || function (id) {
        window.clearTimeout(id);
      };
    }(); // Detect the supported transition-end event property name
    // =======================================================


    var transitionEnd = function () {
      var el = document.createElement("fakeelement"),
          t;
      var transitions = {
        transition: "transitionend",
        OTransition: "oTransitionEnd",
        MozTransition: "transitionend",
        WebkitTransition: "webkitTransitionEnd"
      };

      for (t in transitions) {
        if (el.style[t] !== undefined$1) {
          return transitions[t];
        }
      }

      return "transitionend";
    }(); // Force redraw on an element.
    // This helps in cases where the browser doesn't redraw an updated element properly
    // ================================================================================


    var forceRedraw = function forceRedraw($el) {
      return $el && $el.length && $el[0].offsetHeight;
    }; // Exclude array (`buttons`) options from deep merging
    // ===================================================


    var mergeOpts = function mergeOpts(opts1, opts2) {
      var rez = $.extend(true, {}, opts1, opts2);
      $.each(opts2, function (key, value) {
        if ($.isArray(value)) {
          rez[key] = value;
        }
      });
      return rez;
    }; // How much of an element is visible in viewport
    // =============================================


    var inViewport = function inViewport(elem) {
      var elemCenter, rez;

      if (!elem || elem.ownerDocument !== document) {
        return false;
      }

      $(".fancybox-container").css("pointer-events", "none");
      elemCenter = {
        x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,
        y: elem.getBoundingClientRect().top + elem.offsetHeight / 2
      };
      rez = document.elementFromPoint(elemCenter.x, elemCenter.y) === elem;
      $(".fancybox-container").css("pointer-events", "");
      return rez;
    }; // Class definition
    // ================


    var FancyBox = function FancyBox(content, opts, index) {
      var self = this;
      self.opts = mergeOpts({
        index: index
      }, $.fancybox.defaults);

      if ($.isPlainObject(opts)) {
        self.opts = mergeOpts(self.opts, opts);
      }

      if ($.fancybox.isMobile) {
        self.opts = mergeOpts(self.opts, self.opts.mobile);
      }

      self.id = self.opts.id || ++called;
      self.currIndex = parseInt(self.opts.index, 10) || 0;
      self.prevIndex = null;
      self.prevPos = null;
      self.currPos = 0;
      self.firstRun = true; // All group items

      self.group = []; // Existing slides (for current, next and previous gallery items)

      self.slides = {}; // Create group elements

      self.addContent(content);

      if (!self.group.length) {
        return;
      }

      self.init();
    };

    $.extend(FancyBox.prototype, {
      // Create DOM structure
      // ====================
      init: function init() {
        var self = this,
            firstItem = self.group[self.currIndex],
            firstItemOpts = firstItem.opts,
            $container,
            buttonStr;

        if (firstItemOpts.closeExisting) {
          $.fancybox.close(true);
        } // Hide scrollbars
        // ===============


        $("body").addClass("fancybox-active");

        if (!$.fancybox.getInstance() && firstItemOpts.hideScrollbar !== false && !$.fancybox.isMobile && document.body.scrollHeight > window.innerHeight) {
          $("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:' + (window.innerWidth - document.documentElement.clientWidth) + "px;}</style>");
          $("body").addClass("compensate-for-scrollbar");
        } // Build html markup and set references
        // ====================================
        // Build html code for buttons and insert into main template


        buttonStr = "";
        $.each(firstItemOpts.buttons, function (index, value) {
          buttonStr += firstItemOpts.btnTpl[value] || "";
        }); // Create markup from base template, it will be initially hidden to
        // avoid unnecessary work like painting while initializing is not complete

        $container = $(self.translate(self, firstItemOpts.baseTpl.replace("{{buttons}}", buttonStr).replace("{{arrows}}", firstItemOpts.btnTpl.arrowLeft + firstItemOpts.btnTpl.arrowRight))).attr("id", "fancybox-container-" + self.id).addClass(firstItemOpts.baseClass).data("FancyBox", self).appendTo(firstItemOpts.parentEl); // Create object holding references to jQuery wrapped nodes

        self.$refs = {
          container: $container
        };
        ["bg", "inner", "infobar", "toolbar", "stage", "caption", "navigation"].forEach(function (item) {
          self.$refs[item] = $container.find(".fancybox-" + item);
        });
        self.trigger("onInit"); // Enable events, deactive previous instances

        self.activate(); // Build slides, load and reveal content

        self.jumpTo(self.currIndex);
      },
      // Simple i18n support - replaces object keys found in template
      // with corresponding values
      // ============================================================
      translate: function translate(obj, str) {
        var arr = obj.opts.i18n[obj.opts.lang] || obj.opts.i18n.en;
        return str.replace(/\{\{(\w+)\}\}/g, function (match, n) {
          return arr[n] === undefined$1 ? match : arr[n];
        });
      },
      // Populate current group with fresh content
      // Check if each object has valid type and content
      // ===============================================
      addContent: function addContent(content) {
        var self = this,
            items = $.makeArray(content),
            thumbs;
        $.each(items, function (i, item) {
          var obj = {},
              opts = {},
              $item,
              type,
              found,
              src,
              srcParts; // Step 1 - Make sure we have an object
          // ====================================

          if ($.isPlainObject(item)) {
            // We probably have manual usage here, something like
            // $.fancybox.open( [ { src : "image.jpg", type : "image" } ] )
            obj = item;
            opts = item.opts || item;
          } else if ($.type(item) === "object" && $(item).length) {
            // Here we probably have jQuery collection returned by some selector
            $item = $(item); // Support attributes like `data-options='{"touch" : false}'` and `data-touch='false'`

            opts = $item.data() || {};
            opts = $.extend(true, {}, opts, opts.options); // Here we store clicked element

            opts.$orig = $item;
            obj.src = self.opts.src || opts.src || $item.attr("href"); // Assume that simple syntax is used, for example:
            //   `$.fancybox.open( $("#test"), {} );`

            if (!obj.type && !obj.src) {
              obj.type = "inline";
              obj.src = item;
            }
          } else {
            // Assume we have a simple html code, for example:
            //   $.fancybox.open( '<div><h1>Hi!</h1></div>' );
            obj = {
              type: "html",
              src: item + ""
            };
          } // Each gallery object has full collection of options


          obj.opts = $.extend(true, {}, self.opts, opts); // Do not merge buttons array

          if ($.isArray(opts.buttons)) {
            obj.opts.buttons = opts.buttons;
          }

          if ($.fancybox.isMobile && obj.opts.mobile) {
            obj.opts = mergeOpts(obj.opts, obj.opts.mobile);
          } // Step 2 - Make sure we have content type, if not - try to guess
          // ==============================================================


          type = obj.type || obj.opts.type;
          src = obj.src || "";

          if (!type && src) {
            if (found = src.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i)) {
              type = "video";

              if (!obj.opts.video.format) {
                obj.opts.video.format = "video/" + (found[1] === "ogv" ? "ogg" : found[1]);
              }
            } else if (src.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)) {
              type = "image";
            } else if (src.match(/\.(pdf)((\?|#).*)?$/i)) {
              type = "iframe";
              obj = $.extend(true, obj, {
                contentType: "pdf",
                opts: {
                  iframe: {
                    preload: false
                  }
                }
              });
            } else if (src.charAt(0) === "#") {
              type = "inline";
            }
          }

          if (type) {
            obj.type = type;
          } else {
            self.trigger("objectNeedsType", obj);
          }

          if (!obj.contentType) {
            obj.contentType = $.inArray(obj.type, ["html", "inline", "ajax"]) > -1 ? "html" : obj.type;
          } // Step 3 - Some adjustments
          // =========================


          obj.index = self.group.length;

          if (obj.opts.smallBtn == "auto") {
            obj.opts.smallBtn = $.inArray(obj.type, ["html", "inline", "ajax"]) > -1;
          }

          if (obj.opts.toolbar === "auto") {
            obj.opts.toolbar = !obj.opts.smallBtn;
          } // Find thumbnail image, check if exists and if is in the viewport


          obj.$thumb = obj.opts.$thumb || null;

          if (obj.opts.$trigger && obj.index === self.opts.index) {
            obj.$thumb = obj.opts.$trigger.find("img:first");

            if (obj.$thumb.length) {
              obj.opts.$orig = obj.opts.$trigger;
            }
          }

          if (!(obj.$thumb && obj.$thumb.length) && obj.opts.$orig) {
            obj.$thumb = obj.opts.$orig.find("img:first");
          }

          if (obj.$thumb && !obj.$thumb.length) {
            obj.$thumb = null;
          }

          obj.thumb = obj.opts.thumb || (obj.$thumb ? obj.$thumb[0].src : null); // "caption" is a "special" option, it can be used to customize caption per gallery item

          if ($.type(obj.opts.caption) === "function") {
            obj.opts.caption = obj.opts.caption.apply(item, [self, obj]);
          }

          if ($.type(self.opts.caption) === "function") {
            obj.opts.caption = self.opts.caption.apply(item, [self, obj]);
          } // Make sure we have caption as a string or jQuery object


          if (!(obj.opts.caption instanceof $)) {
            obj.opts.caption = obj.opts.caption === undefined$1 ? "" : obj.opts.caption + "";
          } // Check if url contains "filter" used to filter the content
          // Example: "ajax.html #something"


          if (obj.type === "ajax") {
            srcParts = src.split(/\s+/, 2);

            if (srcParts.length > 1) {
              obj.src = srcParts.shift();
              obj.opts.filter = srcParts.shift();
            }
          } // Hide all buttons and disable interactivity for modal items


          if (obj.opts.modal) {
            obj.opts = $.extend(true, obj.opts, {
              trapFocus: true,
              // Remove buttons
              infobar: 0,
              toolbar: 0,
              smallBtn: 0,
              // Disable keyboard navigation
              keyboard: 0,
              // Disable some modules
              slideShow: 0,
              fullScreen: 0,
              thumbs: 0,
              touch: 0,
              // Disable click event handlers
              clickContent: false,
              clickSlide: false,
              clickOutside: false,
              dblclickContent: false,
              dblclickSlide: false,
              dblclickOutside: false
            });
          } // Step 4 - Add processed object to group
          // ======================================


          self.group.push(obj);
        }); // Update controls if gallery is already opened

        if (Object.keys(self.slides).length) {
          self.updateControls(); // Update thumbnails, if needed

          thumbs = self.Thumbs;

          if (thumbs && thumbs.isActive) {
            thumbs.create();
            thumbs.focus();
          }
        }
      },
      // Attach an event handler functions for:
      //   - navigation buttons
      //   - browser scrolling, resizing;
      //   - focusing
      //   - keyboard
      //   - detecting inactivity
      // ======================================
      addEvents: function addEvents() {
        var self = this;
        self.removeEvents(); // Make navigation elements clickable
        // ==================================

        self.$refs.container.on("click.fb-close", "[data-fancybox-close]", function (e) {
          e.stopPropagation();
          e.preventDefault();
          self.close(e);
        }).on("touchstart.fb-prev click.fb-prev", "[data-fancybox-prev]", function (e) {
          e.stopPropagation();
          e.preventDefault();
          self.previous();
        }).on("touchstart.fb-next click.fb-next", "[data-fancybox-next]", function (e) {
          e.stopPropagation();
          e.preventDefault();
          self.next();
        }).on("click.fb", "[data-fancybox-zoom]", function (e) {
          // Click handler for zoom button
          self[self.isScaledDown() ? "scaleToActual" : "scaleToFit"]();
        }); // Handle page scrolling and browser resizing
        // ==========================================

        $W.on("orientationchange.fb resize.fb", function (e) {
          if (e && e.originalEvent && e.originalEvent.type === "resize") {
            if (self.requestId) {
              cancelAFrame(self.requestId);
            }

            self.requestId = requestAFrame(function () {
              self.update(e);
            });
          } else {
            if (self.current && self.current.type === "iframe") {
              self.$refs.stage.hide();
            }

            setTimeout(function () {
              self.$refs.stage.show();
              self.update(e);
            }, $.fancybox.isMobile ? 600 : 250);
          }
        });
        $D.on("keydown.fb", function (e) {
          var instance = $.fancybox ? $.fancybox.getInstance() : null,
              current = instance.current,
              keycode = e.keyCode || e.which; // Trap keyboard focus inside of the modal
          // =======================================

          if (keycode == 9) {
            if (current.opts.trapFocus) {
              self.focus(e);
            }

            return;
          } // Enable keyboard navigation
          // ==========================


          if (!current.opts.keyboard || e.ctrlKey || e.altKey || e.shiftKey || $(e.target).is("input,textarea,video,audio,select")) {
            return;
          } // Backspace and Esc keys


          if (keycode === 8 || keycode === 27) {
            e.preventDefault();
            self.close(e);
            return;
          } // Left arrow and Up arrow


          if (keycode === 37 || keycode === 38) {
            e.preventDefault();
            self.previous();
            return;
          } // Righ arrow and Down arrow


          if (keycode === 39 || keycode === 40) {
            e.preventDefault();
            self.next();
            return;
          }

          self.trigger("afterKeydown", e, keycode);
        }); // Hide controls after some inactivity period

        if (self.group[self.currIndex].opts.idleTime) {
          self.idleSecondsCounter = 0;
          $D.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle", function (e) {
            self.idleSecondsCounter = 0;

            if (self.isIdle) {
              self.showControls();
            }

            self.isIdle = false;
          });
          self.idleInterval = window.setInterval(function () {
            self.idleSecondsCounter++;

            if (self.idleSecondsCounter >= self.group[self.currIndex].opts.idleTime && !self.isDragging) {
              self.isIdle = true;
              self.idleSecondsCounter = 0;
              self.hideControls();
            }
          }, 1000);
        }
      },
      // Remove events added by the core
      // ===============================
      removeEvents: function removeEvents() {
        var self = this;
        $W.off("orientationchange.fb resize.fb");
        $D.off("keydown.fb .fb-idle");
        this.$refs.container.off(".fb-close .fb-prev .fb-next");

        if (self.idleInterval) {
          window.clearInterval(self.idleInterval);
          self.idleInterval = null;
        }
      },
      // Change to previous gallery item
      // ===============================
      previous: function previous(duration) {
        return this.jumpTo(this.currPos - 1, duration);
      },
      // Change to next gallery item
      // ===========================
      next: function next(duration) {
        return this.jumpTo(this.currPos + 1, duration);
      },
      // Switch to selected gallery item
      // ===============================
      jumpTo: function jumpTo(pos, duration) {
        var self = this,
            groupLen = self.group.length,
            firstRun,
            isMoved,
            loop,
            current,
            previous,
            slidePos,
            stagePos,
            prop,
            diff;

        if (self.isDragging || self.isClosing || self.isAnimating && self.firstRun) {
          return;
        } // Should loop?


        pos = parseInt(pos, 10);
        loop = self.current ? self.current.opts.loop : self.opts.loop;

        if (!loop && (pos < 0 || pos >= groupLen)) {
          return false;
        } // Check if opening for the first time; this helps to speed things up


        firstRun = self.firstRun = !Object.keys(self.slides).length; // Create slides

        previous = self.current;
        self.prevIndex = self.currIndex;
        self.prevPos = self.currPos;
        current = self.createSlide(pos);

        if (groupLen > 1) {
          if (loop || current.index < groupLen - 1) {
            self.createSlide(pos + 1);
          }

          if (loop || current.index > 0) {
            self.createSlide(pos - 1);
          }
        }

        self.current = current;
        self.currIndex = current.index;
        self.currPos = current.pos;
        self.trigger("beforeShow", firstRun);
        self.updateControls(); // Validate duration length

        current.forcedDuration = undefined$1;

        if ($.isNumeric(duration)) {
          current.forcedDuration = duration;
        } else {
          duration = current.opts[firstRun ? "animationDuration" : "transitionDuration"];
        }

        duration = parseInt(duration, 10); // Check if user has swiped the slides or if still animating

        isMoved = self.isMoved(current); // Make sure current slide is visible

        current.$slide.addClass("fancybox-slide--current"); // Fresh start - reveal container, current slide and start loading content

        if (firstRun) {
          if (current.opts.animationEffect && duration) {
            self.$refs.container.css("transition-duration", duration + "ms");
          }

          self.$refs.container.addClass("fancybox-is-open").trigger("focus"); // Attempt to load content into slide
          // This will later call `afterLoad` -> `revealContent`

          self.loadSlide(current);
          self.preload("image");
          return;
        } // Get actual slide/stage positions (before cleaning up)


        slidePos = $.fancybox.getTranslate(previous.$slide);
        stagePos = $.fancybox.getTranslate(self.$refs.stage); // Clean up all slides

        $.each(self.slides, function (index, slide) {
          $.fancybox.stop(slide.$slide, true);
        });

        if (previous.pos !== current.pos) {
          previous.isComplete = false;
        }

        previous.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"); // If slides are out of place, then animate them to correct position

        if (isMoved) {
          // Calculate horizontal swipe distance
          diff = slidePos.left - (previous.pos * slidePos.width + previous.pos * previous.opts.gutter);
          $.each(self.slides, function (index, slide) {
            slide.$slide.removeClass("fancybox-animated").removeClass(function (index, className) {
              return (className.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
            }); // Make sure that each slide is in equal distance
            // This is mostly needed for freshly added slides, because they are not yet positioned

            var leftPos = slide.pos * slidePos.width + slide.pos * slide.opts.gutter;
            $.fancybox.setTranslate(slide.$slide, {
              top: 0,
              left: leftPos - stagePos.left + diff
            });

            if (slide.pos !== current.pos) {
              slide.$slide.addClass("fancybox-slide--" + (slide.pos > current.pos ? "next" : "previous"));
            } // Redraw to make sure that transition will start


            forceRedraw(slide.$slide); // Animate the slide

            $.fancybox.animate(slide.$slide, {
              top: 0,
              left: (slide.pos - current.pos) * slidePos.width + (slide.pos - current.pos) * slide.opts.gutter
            }, duration, function () {
              slide.$slide.css({
                transform: "",
                opacity: ""
              }).removeClass("fancybox-slide--next fancybox-slide--previous");

              if (slide.pos === self.currPos) {
                self.complete();
              }
            });
          });
        } else if (duration && current.opts.transitionEffect) {
          // Set transition effect for previously active slide
          prop = "fancybox-animated fancybox-fx-" + current.opts.transitionEffect;
          previous.$slide.addClass("fancybox-slide--" + (previous.pos > current.pos ? "next" : "previous"));
          $.fancybox.animate(previous.$slide, prop, duration, function () {
            previous.$slide.removeClass(prop).removeClass("fancybox-slide--next fancybox-slide--previous");
          }, false);
        }

        if (current.isLoaded) {
          self.revealContent(current);
        } else {
          self.loadSlide(current);
        }

        self.preload("image");
      },
      // Create new "slide" element
      // These are gallery items  that are actually added to DOM
      // =======================================================
      createSlide: function createSlide(pos) {
        var self = this,
            $slide,
            index;
        index = pos % self.group.length;
        index = index < 0 ? self.group.length + index : index;

        if (!self.slides[pos] && self.group[index]) {
          $slide = $('<div class="fancybox-slide"></div>').appendTo(self.$refs.stage);
          self.slides[pos] = $.extend(true, {}, self.group[index], {
            pos: pos,
            $slide: $slide,
            isLoaded: false
          });
          self.updateSlide(self.slides[pos]);
        }

        return self.slides[pos];
      },
      // Scale image to the actual size of the image;
      // x and y values should be relative to the slide
      // ==============================================
      scaleToActual: function scaleToActual(x, y, duration) {
        var self = this,
            current = self.current,
            $content = current.$content,
            canvasWidth = $.fancybox.getTranslate(current.$slide).width,
            canvasHeight = $.fancybox.getTranslate(current.$slide).height,
            newImgWidth = current.width,
            newImgHeight = current.height,
            imgPos,
            posX,
            posY,
            scaleX,
            scaleY;

        if (self.isAnimating || self.isMoved() || !$content || !(current.type == "image" && current.isLoaded && !current.hasError)) {
          return;
        }

        self.isAnimating = true;
        $.fancybox.stop($content);
        x = x === undefined$1 ? canvasWidth * 0.5 : x;
        y = y === undefined$1 ? canvasHeight * 0.5 : y;
        imgPos = $.fancybox.getTranslate($content);
        imgPos.top -= $.fancybox.getTranslate(current.$slide).top;
        imgPos.left -= $.fancybox.getTranslate(current.$slide).left;
        scaleX = newImgWidth / imgPos.width;
        scaleY = newImgHeight / imgPos.height; // Get center position for original image

        posX = canvasWidth * 0.5 - newImgWidth * 0.5;
        posY = canvasHeight * 0.5 - newImgHeight * 0.5; // Make sure image does not move away from edges

        if (newImgWidth > canvasWidth) {
          posX = imgPos.left * scaleX - (x * scaleX - x);

          if (posX > 0) {
            posX = 0;
          }

          if (posX < canvasWidth - newImgWidth) {
            posX = canvasWidth - newImgWidth;
          }
        }

        if (newImgHeight > canvasHeight) {
          posY = imgPos.top * scaleY - (y * scaleY - y);

          if (posY > 0) {
            posY = 0;
          }

          if (posY < canvasHeight - newImgHeight) {
            posY = canvasHeight - newImgHeight;
          }
        }

        self.updateCursor(newImgWidth, newImgHeight);
        $.fancybox.animate($content, {
          top: posY,
          left: posX,
          scaleX: scaleX,
          scaleY: scaleY
        }, duration || 366, function () {
          self.isAnimating = false;
        }); // Stop slideshow

        if (self.SlideShow && self.SlideShow.isActive) {
          self.SlideShow.stop();
        }
      },
      // Scale image to fit inside parent element
      // ========================================
      scaleToFit: function scaleToFit(duration) {
        var self = this,
            current = self.current,
            $content = current.$content,
            end;

        if (self.isAnimating || self.isMoved() || !$content || !(current.type == "image" && current.isLoaded && !current.hasError)) {
          return;
        }

        self.isAnimating = true;
        $.fancybox.stop($content);
        end = self.getFitPos(current);
        self.updateCursor(end.width, end.height);
        $.fancybox.animate($content, {
          top: end.top,
          left: end.left,
          scaleX: end.width / $content.width(),
          scaleY: end.height / $content.height()
        }, duration || 366, function () {
          self.isAnimating = false;
        });
      },
      // Calculate image size to fit inside viewport
      // ===========================================
      getFitPos: function getFitPos(slide) {
        var self = this,
            $content = slide.$content,
            $slide = slide.$slide,
            width = slide.width || slide.opts.width,
            height = slide.height || slide.opts.height,
            maxWidth,
            maxHeight,
            minRatio,
            aspectRatio,
            rez = {};

        if (!slide.isLoaded || !$content || !$content.length) {
          return false;
        }

        maxWidth = $.fancybox.getTranslate(self.$refs.stage).width;
        maxHeight = $.fancybox.getTranslate(self.$refs.stage).height;
        maxWidth -= parseFloat($slide.css("paddingLeft")) + parseFloat($slide.css("paddingRight")) + parseFloat($content.css("marginLeft")) + parseFloat($content.css("marginRight"));
        maxHeight -= parseFloat($slide.css("paddingTop")) + parseFloat($slide.css("paddingBottom")) + parseFloat($content.css("marginTop")) + parseFloat($content.css("marginBottom"));

        if (!width || !height) {
          width = maxWidth;
          height = maxHeight;
        }

        minRatio = Math.min(1, maxWidth / width, maxHeight / height);
        width = minRatio * width;
        height = minRatio * height; // Adjust width/height to precisely fit into container

        if (width > maxWidth - 0.5) {
          width = maxWidth;
        }

        if (height > maxHeight - 0.5) {
          height = maxHeight;
        }

        if (slide.type === "image") {
          rez.top = Math.floor((maxHeight - height) * 0.5) + parseFloat($slide.css("paddingTop"));
          rez.left = Math.floor((maxWidth - width) * 0.5) + parseFloat($slide.css("paddingLeft"));
        } else if (slide.contentType === "video") {
          // Force aspect ratio for the video
          // "I say the whole world must learn of our peaceful ways… by force!"
          aspectRatio = slide.opts.width && slide.opts.height ? width / height : slide.opts.ratio || 16 / 9;

          if (height > width / aspectRatio) {
            height = width / aspectRatio;
          } else if (width > height * aspectRatio) {
            width = height * aspectRatio;
          }
        }

        rez.width = width;
        rez.height = height;
        return rez;
      },
      // Update content size and position for all slides
      // ==============================================
      update: function update(e) {
        var self = this;
        $.each(self.slides, function (key, slide) {
          self.updateSlide(slide, e);
        });
      },
      // Update slide content position and size
      // ======================================
      updateSlide: function updateSlide(slide, e) {
        var self = this,
            $content = slide && slide.$content,
            width = slide.width || slide.opts.width,
            height = slide.height || slide.opts.height,
            $slide = slide.$slide; // First, prevent caption overlap, if needed

        self.adjustCaption(slide); // Then resize content to fit inside the slide

        if ($content && (width || height || slide.contentType === "video") && !slide.hasError) {
          $.fancybox.stop($content);
          $.fancybox.setTranslate($content, self.getFitPos(slide));

          if (slide.pos === self.currPos) {
            self.isAnimating = false;
            self.updateCursor();
          }
        } // Then some adjustments


        self.adjustLayout(slide);

        if ($slide.length) {
          $slide.trigger("refresh");

          if (slide.pos === self.currPos) {
            self.$refs.toolbar.add(self.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar", $slide.get(0).scrollHeight > $slide.get(0).clientHeight);
          }
        }

        self.trigger("onUpdate", slide, e);
      },
      // Horizontally center slide
      // =========================
      centerSlide: function centerSlide(duration) {
        var self = this,
            current = self.current,
            $slide = current.$slide;

        if (self.isClosing || !current) {
          return;
        }

        $slide.siblings().css({
          transform: "",
          opacity: ""
        });
        $slide.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next");
        $.fancybox.animate($slide, {
          top: 0,
          left: 0,
          opacity: 1
        }, duration === undefined$1 ? 0 : duration, function () {
          // Clean up
          $slide.css({
            transform: "",
            opacity: ""
          });

          if (!current.isComplete) {
            self.complete();
          }
        }, false);
      },
      // Check if current slide is moved (swiped)
      // ========================================
      isMoved: function isMoved(slide) {
        var current = slide || this.current,
            slidePos,
            stagePos;

        if (!current) {
          return false;
        }

        stagePos = $.fancybox.getTranslate(this.$refs.stage);
        slidePos = $.fancybox.getTranslate(current.$slide);
        return !current.$slide.hasClass("fancybox-animated") && (Math.abs(slidePos.top - stagePos.top) > 0.5 || Math.abs(slidePos.left - stagePos.left) > 0.5);
      },
      // Update cursor style depending if content can be zoomed
      // ======================================================
      updateCursor: function updateCursor(nextWidth, nextHeight) {
        var self = this,
            current = self.current,
            $container = self.$refs.container,
            canPan,
            isZoomable;

        if (!current || self.isClosing || !self.Guestures) {
          return;
        }

        $container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan");
        canPan = self.canPan(nextWidth, nextHeight);
        isZoomable = canPan ? true : self.isZoomable();
        $container.toggleClass("fancybox-is-zoomable", isZoomable);
        $("[data-fancybox-zoom]").prop("disabled", !isZoomable);

        if (canPan) {
          $container.addClass("fancybox-can-pan");
        } else if (isZoomable && (current.opts.clickContent === "zoom" || $.isFunction(current.opts.clickContent) && current.opts.clickContent(current) == "zoom")) {
          $container.addClass("fancybox-can-zoomIn");
        } else if (current.opts.touch && (current.opts.touch.vertical || self.group.length > 1) && current.contentType !== "video") {
          $container.addClass("fancybox-can-swipe");
        }
      },
      // Check if current slide is zoomable
      // ==================================
      isZoomable: function isZoomable() {
        var self = this,
            current = self.current,
            fitPos; // Assume that slide is zoomable if:
        //   - image is still loading
        //   - actual size of the image is smaller than available area

        if (current && !self.isClosing && current.type === "image" && !current.hasError) {
          if (!current.isLoaded) {
            return true;
          }

          fitPos = self.getFitPos(current);

          if (fitPos && (current.width > fitPos.width || current.height > fitPos.height)) {
            return true;
          }
        }

        return false;
      },
      // Check if current image dimensions are smaller than actual
      // =========================================================
      isScaledDown: function isScaledDown(nextWidth, nextHeight) {
        var self = this,
            rez = false,
            current = self.current,
            $content = current.$content;

        if (nextWidth !== undefined$1 && nextHeight !== undefined$1) {
          rez = nextWidth < current.width && nextHeight < current.height;
        } else if ($content) {
          rez = $.fancybox.getTranslate($content);
          rez = rez.width < current.width && rez.height < current.height;
        }

        return rez;
      },
      // Check if image dimensions exceed parent element
      // ===============================================
      canPan: function canPan(nextWidth, nextHeight) {
        var self = this,
            current = self.current,
            pos = null,
            rez = false;

        if (current.type === "image" && (current.isComplete || nextWidth && nextHeight) && !current.hasError) {
          rez = self.getFitPos(current);

          if (nextWidth !== undefined$1 && nextHeight !== undefined$1) {
            pos = {
              width: nextWidth,
              height: nextHeight
            };
          } else if (current.isComplete) {
            pos = $.fancybox.getTranslate(current.$content);
          }

          if (pos && rez) {
            rez = Math.abs(pos.width - rez.width) > 1.5 || Math.abs(pos.height - rez.height) > 1.5;
          }
        }

        return rez;
      },
      // Load content into the slide
      // ===========================
      loadSlide: function loadSlide(slide) {
        var self = this,
            type,
            $slide,
            ajaxLoad;

        if (slide.isLoading || slide.isLoaded) {
          return;
        }

        slide.isLoading = true;

        if (self.trigger("beforeLoad", slide) === false) {
          slide.isLoading = false;
          return false;
        }

        type = slide.type;
        $slide = slide.$slide;
        $slide.off("refresh").trigger("onReset").addClass(slide.opts.slideClass); // Create content depending on the type

        switch (type) {
          case "image":
            self.setImage(slide);
            break;

          case "iframe":
            self.setIframe(slide);
            break;

          case "html":
            self.setContent(slide, slide.src || slide.content);
            break;

          case "video":
            self.setContent(slide, slide.opts.video.tpl.replace(/\{\{src\}\}/gi, slide.src).replace("{{format}}", slide.opts.videoFormat || slide.opts.video.format || "").replace("{{poster}}", slide.thumb || ""));
            break;

          case "inline":
            if ($(slide.src).length) {
              self.setContent(slide, $(slide.src));
            } else {
              self.setError(slide);
            }

            break;

          case "ajax":
            self.showLoading(slide);
            ajaxLoad = $.ajax($.extend({}, slide.opts.ajax.settings, {
              url: slide.src,
              success: function success(data, textStatus) {
                if (textStatus === "success") {
                  self.setContent(slide, data);
                }
              },
              error: function error(jqXHR, textStatus) {
                if (jqXHR && textStatus !== "abort") {
                  self.setError(slide);
                }
              }
            }));
            $slide.one("onReset", function () {
              ajaxLoad.abort();
            });
            break;

          default:
            self.setError(slide);
            break;
        }

        return true;
      },
      // Use thumbnail image, if possible
      // ================================
      setImage: function setImage(slide) {
        var self = this,
            ghost; // Check if need to show loading icon

        setTimeout(function () {
          var $img = slide.$image;

          if (!self.isClosing && slide.isLoading && (!$img || !$img.length || !$img[0].complete) && !slide.hasError) {
            self.showLoading(slide);
          }
        }, 50); //Check if image has srcset

        self.checkSrcset(slide); // This will be wrapper containing both ghost and actual image

        slide.$content = $('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(slide.$slide.addClass("fancybox-slide--image")); // If we have a thumbnail, we can display it while actual image is loading
        // Users will not stare at black screen and actual image will appear gradually

        if (slide.opts.preload !== false && slide.opts.width && slide.opts.height && slide.thumb) {
          slide.width = slide.opts.width;
          slide.height = slide.opts.height;
          ghost = document.createElement("img");

          ghost.onerror = function () {
            $(this).remove();
            slide.$ghost = null;
          };

          ghost.onload = function () {
            self.afterLoad(slide);
          };

          slide.$ghost = $(ghost).addClass("fancybox-image").appendTo(slide.$content).attr("src", slide.thumb);
        } // Start loading actual image


        self.setBigImage(slide);
      },
      // Check if image has srcset and get the source
      // ============================================
      checkSrcset: function checkSrcset(slide) {
        var srcset = slide.opts.srcset || slide.opts.image.srcset,
            found,
            temp,
            pxRatio,
            windowWidth; // If we have "srcset", then we need to find first matching "src" value.
        // This is necessary, because when you set an src attribute, the browser will preload the image
        // before any javascript or even CSS is applied.

        if (srcset) {
          pxRatio = window.devicePixelRatio || 1;
          windowWidth = window.innerWidth * pxRatio;
          temp = srcset.split(",").map(function (el) {
            var ret = {};
            el.trim().split(/\s+/).forEach(function (el, i) {
              var value = parseInt(el.substring(0, el.length - 1), 10);

              if (i === 0) {
                return ret.url = el;
              }

              if (value) {
                ret.value = value;
                ret.postfix = el[el.length - 1];
              }
            });
            return ret;
          }); // Sort by value

          temp.sort(function (a, b) {
            return a.value - b.value;
          }); // Ok, now we have an array of all srcset values

          for (var j = 0; j < temp.length; j++) {
            var el = temp[j];

            if (el.postfix === "w" && el.value >= windowWidth || el.postfix === "x" && el.value >= pxRatio) {
              found = el;
              break;
            }
          } // If not found, take the last one


          if (!found && temp.length) {
            found = temp[temp.length - 1];
          }

          if (found) {
            slide.src = found.url; // If we have default width/height values, we can calculate height for matching source

            if (slide.width && slide.height && found.postfix == "w") {
              slide.height = slide.width / slide.height * found.value;
              slide.width = found.value;
            }

            slide.opts.srcset = srcset;
          }
        }
      },
      // Create full-size image
      // ======================
      setBigImage: function setBigImage(slide) {
        var self = this,
            img = document.createElement("img"),
            $img = $(img);
        slide.$image = $img.one("error", function () {
          self.setError(slide);
        }).one("load", function () {
          var sizes;

          if (!slide.$ghost) {
            self.resolveImageSlideSize(slide, this.naturalWidth, this.naturalHeight);
            self.afterLoad(slide);
          }

          if (self.isClosing) {
            return;
          }

          if (slide.opts.srcset) {
            sizes = slide.opts.sizes;

            if (!sizes || sizes === "auto") {
              sizes = (slide.width / slide.height > 1 && $W.width() / $W.height() > 1 ? "100" : Math.round(slide.width / slide.height * 100)) + "vw";
            }

            $img.attr("sizes", sizes).attr("srcset", slide.opts.srcset);
          } // Hide temporary image after some delay


          if (slide.$ghost) {
            setTimeout(function () {
              if (slide.$ghost && !self.isClosing) {
                slide.$ghost.hide();
              }
            }, Math.min(300, Math.max(1000, slide.height / 1600)));
          }

          self.hideLoading(slide);
        }).addClass("fancybox-image").attr("src", slide.src).appendTo(slide.$content);

        if ((img.complete || img.readyState == "complete") && $img.naturalWidth && $img.naturalHeight) {
          $img.trigger("load");
        } else if (img.error) {
          $img.trigger("error");
        }
      },
      // Computes the slide size from image size and maxWidth/maxHeight
      // ==============================================================
      resolveImageSlideSize: function resolveImageSlideSize(slide, imgWidth, imgHeight) {
        var maxWidth = parseInt(slide.opts.width, 10),
            maxHeight = parseInt(slide.opts.height, 10); // Sets the default values from the image

        slide.width = imgWidth;
        slide.height = imgHeight;

        if (maxWidth > 0) {
          slide.width = maxWidth;
          slide.height = Math.floor(maxWidth * imgHeight / imgWidth);
        }

        if (maxHeight > 0) {
          slide.width = Math.floor(maxHeight * imgWidth / imgHeight);
          slide.height = maxHeight;
        }
      },
      // Create iframe wrapper, iframe and bindings
      // ==========================================
      setIframe: function setIframe(slide) {
        var self = this,
            opts = slide.opts.iframe,
            $slide = slide.$slide,
            $iframe;
        slide.$content = $('<div class="fancybox-content' + (opts.preload ? " fancybox-is-hidden" : "") + '"></div>').css(opts.css).appendTo($slide);
        $slide.addClass("fancybox-slide--" + slide.contentType);
        slide.$iframe = $iframe = $(opts.tpl.replace(/\{rnd\}/g, new Date().getTime())).attr(opts.attr).appendTo(slide.$content);

        if (opts.preload) {
          self.showLoading(slide); // Unfortunately, it is not always possible to determine if iframe is successfully loaded
          // (due to browser security policy)

          $iframe.on("load.fb error.fb", function (e) {
            this.isReady = 1;
            slide.$slide.trigger("refresh");
            self.afterLoad(slide);
          }); // Recalculate iframe content size
          // ===============================

          $slide.on("refresh.fb", function () {
            var $content = slide.$content,
                frameWidth = opts.css.width,
                frameHeight = opts.css.height,
                $contents,
                $body;

            if ($iframe[0].isReady !== 1) {
              return;
            }

            try {
              $contents = $iframe.contents();
              $body = $contents.find("body");
            } catch (ignore) {} // Calculate content dimensions, if it is accessible


            if ($body && $body.length && $body.children().length) {
              // Avoid scrolling to top (if multiple instances)
              $slide.css("overflow", "visible");
              $content.css({
                width: "100%",
                "max-width": "100%",
                height: "9999px"
              });

              if (frameWidth === undefined$1) {
                frameWidth = Math.ceil(Math.max($body[0].clientWidth, $body.outerWidth(true)));
              }

              $content.css("width", frameWidth ? frameWidth : "").css("max-width", "");

              if (frameHeight === undefined$1) {
                frameHeight = Math.ceil(Math.max($body[0].clientHeight, $body.outerHeight(true)));
              }

              $content.css("height", frameHeight ? frameHeight : "");
              $slide.css("overflow", "auto");
            }

            $content.removeClass("fancybox-is-hidden");
          });
        } else {
          self.afterLoad(slide);
        }

        $iframe.attr("src", slide.src); // Remove iframe if closing or changing gallery item

        $slide.one("onReset", function () {
          // This helps IE not to throw errors when closing
          try {
            $(this).find("iframe").hide().unbind().attr("src", "//about:blank");
          } catch (ignore) {}

          $(this).off("refresh.fb").empty();
          slide.isLoaded = false;
          slide.isRevealed = false;
        });
      },
      // Wrap and append content to the slide
      // ======================================
      setContent: function setContent(slide, content) {
        var self = this;

        if (self.isClosing) {
          return;
        }

        self.hideLoading(slide);

        if (slide.$content) {
          $.fancybox.stop(slide.$content);
        }

        slide.$slide.empty(); // If content is a jQuery object, then it will be moved to the slide.
        // The placeholder is created so we will know where to put it back.

        if (isQuery(content) && content.parent().length) {
          // Make sure content is not already moved to fancyBox
          if (content.hasClass("fancybox-content") || content.parent().hasClass("fancybox-content")) {
            content.parents(".fancybox-slide").trigger("onReset");
          } // Create temporary element marking original place of the content


          slide.$placeholder = $("<div>").hide().insertAfter(content); // Make sure content is visible

          content.css("display", "inline-block");
        } else if (!slide.hasError) {
          // If content is just a plain text, try to convert it to html
          if ($.type(content) === "string") {
            content = $("<div>").append($.trim(content)).contents();
          } // If "filter" option is provided, then filter content


          if (slide.opts.filter) {
            content = $("<div>").html(content).find(slide.opts.filter);
          }
        }

        slide.$slide.one("onReset", function () {
          // Pause all html5 video/audio
          $(this).find("video,audio").trigger("pause"); // Put content back

          if (slide.$placeholder) {
            slide.$placeholder.after(content.removeClass("fancybox-content").hide()).remove();
            slide.$placeholder = null;
          } // Remove custom close button


          if (slide.$smallBtn) {
            slide.$smallBtn.remove();
            slide.$smallBtn = null;
          } // Remove content and mark slide as not loaded


          if (!slide.hasError) {
            $(this).empty();
            slide.isLoaded = false;
            slide.isRevealed = false;
          }
        });
        $(content).appendTo(slide.$slide);

        if ($(content).is("video,audio")) {
          $(content).addClass("fancybox-video");
          $(content).wrap("<div></div>");
          slide.contentType = "video";
          slide.opts.width = slide.opts.width || $(content).attr("width");
          slide.opts.height = slide.opts.height || $(content).attr("height");
        }

        slide.$content = slide.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first();
        slide.$content.siblings().hide(); // Re-check if there is a valid content
        // (in some cases, ajax response can contain various elements or plain text)

        if (!slide.$content.length) {
          slide.$content = slide.$slide.wrapInner("<div></div>").children().first();
        }

        slide.$content.addClass("fancybox-content");
        slide.$slide.addClass("fancybox-slide--" + slide.contentType);
        self.afterLoad(slide);
      },
      // Display error message
      // =====================
      setError: function setError(slide) {
        slide.hasError = true;
        slide.$slide.trigger("onReset").removeClass("fancybox-slide--" + slide.contentType).addClass("fancybox-slide--error");
        slide.contentType = "html";
        this.setContent(slide, this.translate(slide, slide.opts.errorTpl));

        if (slide.pos === this.currPos) {
          this.isAnimating = false;
        }
      },
      // Show loading icon inside the slide
      // ==================================
      showLoading: function showLoading(slide) {
        var self = this;
        slide = slide || self.current;

        if (slide && !slide.$spinner) {
          slide.$spinner = $(self.translate(self, self.opts.spinnerTpl)).appendTo(slide.$slide).hide().fadeIn("fast");
        }
      },
      // Remove loading icon from the slide
      // ==================================
      hideLoading: function hideLoading(slide) {
        var self = this;
        slide = slide || self.current;

        if (slide && slide.$spinner) {
          slide.$spinner.stop().remove();
          delete slide.$spinner;
        }
      },
      // Adjustments after slide content has been loaded
      // ===============================================
      afterLoad: function afterLoad(slide) {
        var self = this;

        if (self.isClosing) {
          return;
        }

        slide.isLoading = false;
        slide.isLoaded = true;
        self.trigger("afterLoad", slide);
        self.hideLoading(slide); // Add small close button

        if (slide.opts.smallBtn && (!slide.$smallBtn || !slide.$smallBtn.length)) {
          slide.$smallBtn = $(self.translate(slide, slide.opts.btnTpl.smallBtn)).appendTo(slide.$content);
        } // Disable right click


        if (slide.opts.protect && slide.$content && !slide.hasError) {
          slide.$content.on("contextmenu.fb", function (e) {
            if (e.button == 2) {
              e.preventDefault();
            }

            return true;
          }); // Add fake element on top of the image
          // This makes a bit harder for user to select image

          if (slide.type === "image") {
            $('<div class="fancybox-spaceball"></div>').appendTo(slide.$content);
          }
        }

        self.adjustCaption(slide);
        self.adjustLayout(slide);

        if (slide.pos === self.currPos) {
          self.updateCursor();
        }

        self.revealContent(slide);
      },
      // Prevent caption overlap,
      // fix css inconsistency across browsers
      // =====================================
      adjustCaption: function adjustCaption(slide) {
        var self = this,
            current = slide || self.current,
            caption = current.opts.caption,
            preventOverlap = current.opts.preventCaptionOverlap,
            $caption = self.$refs.caption,
            $clone,
            captionH = false;
        $caption.toggleClass("fancybox-caption--separate", preventOverlap);

        if (preventOverlap && caption && caption.length) {
          if (current.pos !== self.currPos) {
            $clone = $caption.clone().appendTo($caption.parent());
            $clone.children().eq(0).empty().html(caption);
            captionH = $clone.outerHeight(true);
            $clone.empty().remove();
          } else if (self.$caption) {
            captionH = self.$caption.outerHeight(true);
          }

          current.$slide.css("padding-bottom", captionH || "");
        }
      },
      // Simple hack to fix inconsistency across browsers, described here (affects Edge, too):
      // https://bugzilla.mozilla.org/show_bug.cgi?id=748518
      // ====================================================================================
      adjustLayout: function adjustLayout(slide) {
        var self = this,
            current = slide || self.current,
            scrollHeight,
            marginBottom,
            inlinePadding,
            actualPadding;

        if (current.isLoaded && current.opts.disableLayoutFix !== true) {
          current.$content.css("margin-bottom", ""); // If we would always set margin-bottom for the content,
          // then it would potentially break vertical align

          if (current.$content.outerHeight() > current.$slide.height() + 0.5) {
            inlinePadding = current.$slide[0].style["padding-bottom"];
            actualPadding = current.$slide.css("padding-bottom");

            if (parseFloat(actualPadding) > 0) {
              scrollHeight = current.$slide[0].scrollHeight;
              current.$slide.css("padding-bottom", 0);

              if (Math.abs(scrollHeight - current.$slide[0].scrollHeight) < 1) {
                marginBottom = actualPadding;
              }

              current.$slide.css("padding-bottom", inlinePadding);
            }
          }

          current.$content.css("margin-bottom", marginBottom);
        }
      },
      // Make content visible
      // This method is called right after content has been loaded or
      // user navigates gallery and transition should start
      // ============================================================
      revealContent: function revealContent(slide) {
        var self = this,
            $slide = slide.$slide,
            end = false,
            start = false,
            isMoved = self.isMoved(slide),
            isRevealed = slide.isRevealed,
            effect,
            effectClassName,
            duration,
            opacity;
        slide.isRevealed = true;
        effect = slide.opts[self.firstRun ? "animationEffect" : "transitionEffect"];
        duration = slide.opts[self.firstRun ? "animationDuration" : "transitionDuration"];
        duration = parseInt(slide.forcedDuration === undefined$1 ? duration : slide.forcedDuration, 10);

        if (isMoved || slide.pos !== self.currPos || !duration) {
          effect = false;
        } // Check if can zoom


        if (effect === "zoom") {
          if (slide.pos === self.currPos && duration && slide.type === "image" && !slide.hasError && (start = self.getThumbPos(slide))) {
            end = self.getFitPos(slide);
          } else {
            effect = "fade";
          }
        } // Zoom animation
        // ==============


        if (effect === "zoom") {
          self.isAnimating = true;
          end.scaleX = end.width / start.width;
          end.scaleY = end.height / start.height; // Check if we need to animate opacity

          opacity = slide.opts.zoomOpacity;

          if (opacity == "auto") {
            opacity = Math.abs(slide.width / slide.height - start.width / start.height) > 0.1;
          }

          if (opacity) {
            start.opacity = 0.1;
            end.opacity = 1;
          } // Draw image at start position


          $.fancybox.setTranslate(slide.$content.removeClass("fancybox-is-hidden"), start);
          forceRedraw(slide.$content); // Start animation

          $.fancybox.animate(slide.$content, end, duration, function () {
            self.isAnimating = false;
            self.complete();
          });
          return;
        }

        self.updateSlide(slide); // Simply show content if no effect
        // ================================

        if (!effect) {
          slide.$content.removeClass("fancybox-is-hidden");

          if (!isRevealed && isMoved && slide.type === "image" && !slide.hasError) {
            slide.$content.hide().fadeIn("fast");
          }

          if (slide.pos === self.currPos) {
            self.complete();
          }

          return;
        } // Prepare for CSS transiton
        // =========================


        $.fancybox.stop($slide); //effectClassName = "fancybox-animated fancybox-slide--" + (slide.pos >= self.prevPos ? "next" : "previous") + " fancybox-fx-" + effect;

        effectClassName = "fancybox-slide--" + (slide.pos >= self.prevPos ? "next" : "previous") + " fancybox-animated fancybox-fx-" + effect;
        $slide.addClass(effectClassName).removeClass("fancybox-slide--current"); //.addClass(effectClassName);

        slide.$content.removeClass("fancybox-is-hidden"); // Force reflow

        forceRedraw($slide);

        if (slide.type !== "image") {
          slide.$content.hide().show(0);
        }

        $.fancybox.animate($slide, "fancybox-slide--current", duration, function () {
          $slide.removeClass(effectClassName).css({
            transform: "",
            opacity: ""
          });

          if (slide.pos === self.currPos) {
            self.complete();
          }
        }, true);
      },
      // Check if we can and have to zoom from thumbnail
      //================================================
      getThumbPos: function getThumbPos(slide) {
        var rez = false,
            $thumb = slide.$thumb,
            thumbPos,
            btw,
            brw,
            bbw,
            blw;

        if (!$thumb || !inViewport($thumb[0])) {
          return false;
        }

        thumbPos = $.fancybox.getTranslate($thumb);
        btw = parseFloat($thumb.css("border-top-width") || 0);
        brw = parseFloat($thumb.css("border-right-width") || 0);
        bbw = parseFloat($thumb.css("border-bottom-width") || 0);
        blw = parseFloat($thumb.css("border-left-width") || 0);
        rez = {
          top: thumbPos.top + btw,
          left: thumbPos.left + blw,
          width: thumbPos.width - brw - blw,
          height: thumbPos.height - btw - bbw,
          scaleX: 1,
          scaleY: 1
        };
        return thumbPos.width > 0 && thumbPos.height > 0 ? rez : false;
      },
      // Final adjustments after current gallery item is moved to position
      // and it`s content is loaded
      // ==================================================================
      complete: function complete() {
        var self = this,
            current = self.current,
            slides = {},
            $el;

        if (self.isMoved() || !current.isLoaded) {
          return;
        }

        if (!current.isComplete) {
          current.isComplete = true;
          current.$slide.siblings().trigger("onReset");
          self.preload("inline"); // Trigger any CSS transiton inside the slide

          forceRedraw(current.$slide);
          current.$slide.addClass("fancybox-slide--complete"); // Remove unnecessary slides

          $.each(self.slides, function (key, slide) {
            if (slide.pos >= self.currPos - 1 && slide.pos <= self.currPos + 1) {
              slides[slide.pos] = slide;
            } else if (slide) {
              $.fancybox.stop(slide.$slide);
              slide.$slide.off().remove();
            }
          });
          self.slides = slides;
        }

        self.isAnimating = false;
        self.updateCursor();
        self.trigger("afterShow"); // Autoplay first html5 video/audio

        if (!!current.opts.video.autoStart) {
          current.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended", function () {
            if (Document.exitFullscreen) {
              Document.exitFullscreen();
            } else if (this.webkitExitFullscreen) {
              this.webkitExitFullscreen();
            }

            self.next();
          });
        } // Try to focus on the first focusable element


        if (current.opts.autoFocus && current.contentType === "html") {
          // Look for the first input with autofocus attribute
          $el = current.$content.find("input[autofocus]:enabled:visible:first");

          if ($el.length) {
            $el.trigger("focus");
          } else {
            self.focus(null, true);
          }
        } // Avoid jumping


        current.$slide.scrollTop(0).scrollLeft(0);
      },
      // Preload next and previous slides
      // ================================
      preload: function preload(type) {
        var self = this,
            prev,
            next;

        if (self.group.length < 2) {
          return;
        }

        next = self.slides[self.currPos + 1];
        prev = self.slides[self.currPos - 1];

        if (prev && prev.type === type) {
          self.loadSlide(prev);
        }

        if (next && next.type === type) {
          self.loadSlide(next);
        }
      },
      // Try to find and focus on the first focusable element
      // ====================================================
      focus: function focus(e, firstRun) {
        var self = this,
            focusableStr = ["a[href]", "area[href]", 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', "select:not([disabled]):not([aria-hidden])", "textarea:not([disabled]):not([aria-hidden])", "button:not([disabled]):not([aria-hidden])", "iframe", "object", "embed", "video", "audio", "[contenteditable]", '[tabindex]:not([tabindex^="-"])'].join(","),
            focusableItems,
            focusedItemIndex;

        if (self.isClosing) {
          return;
        }

        if (e || !self.current || !self.current.isComplete) {
          // Focus on any element inside fancybox
          focusableItems = self.$refs.container.find("*:visible");
        } else {
          // Focus inside current slide
          focusableItems = self.current.$slide.find("*:visible" + (firstRun ? ":not(.fancybox-close-small)" : ""));
        }

        focusableItems = focusableItems.filter(focusableStr).filter(function () {
          return $(this).css("visibility") !== "hidden" && !$(this).hasClass("disabled");
        });

        if (focusableItems.length) {
          focusedItemIndex = focusableItems.index(document.activeElement);

          if (e && e.shiftKey) {
            // Back tab
            if (focusedItemIndex < 0 || focusedItemIndex == 0) {
              e.preventDefault();
              focusableItems.eq(focusableItems.length - 1).trigger("focus");
            }
          } else {
            // Outside or Forward tab
            if (focusedItemIndex < 0 || focusedItemIndex == focusableItems.length - 1) {
              if (e) {
                e.preventDefault();
              }

              focusableItems.eq(0).trigger("focus");
            }
          }
        } else {
          self.$refs.container.trigger("focus");
        }
      },
      // Activates current instance - brings container to the front and enables keyboard,
      // notifies other instances about deactivating
      // =================================================================================
      activate: function activate() {
        var self = this; // Deactivate all instances

        $(".fancybox-container").each(function () {
          var instance = $(this).data("FancyBox"); // Skip self and closing instances

          if (instance && instance.id !== self.id && !instance.isClosing) {
            instance.trigger("onDeactivate");
            instance.removeEvents();
            instance.isVisible = false;
          }
        });
        self.isVisible = true;

        if (self.current || self.isIdle) {
          self.update();
          self.updateControls();
        }

        self.trigger("onActivate");
        self.addEvents();
      },
      // Start closing procedure
      // This will start "zoom-out" animation if needed and clean everything up afterwards
      // =================================================================================
      close: function close(e, d) {
        var self = this,
            current = self.current,
            effect,
            duration,
            $content,
            domRect,
            opacity,
            start,
            end;

        var done = function done() {
          self.cleanUp(e);
        };

        if (self.isClosing) {
          return false;
        }

        self.isClosing = true; // If beforeClose callback prevents closing, make sure content is centered

        if (self.trigger("beforeClose", e) === false) {
          self.isClosing = false;
          requestAFrame(function () {
            self.update();
          });
          return false;
        } // Remove all events
        // If there are multiple instances, they will be set again by "activate" method


        self.removeEvents();
        $content = current.$content;
        effect = current.opts.animationEffect;
        duration = $.isNumeric(d) ? d : effect ? current.opts.animationDuration : 0;
        current.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated");

        if (e !== true) {
          $.fancybox.stop(current.$slide);
        } else {
          effect = false;
        } // Remove other slides


        current.$slide.siblings().trigger("onReset").remove(); // Trigger animations

        if (duration) {
          self.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration", duration + "ms");
        } // Clean up


        self.hideLoading(current);
        self.hideControls(true);
        self.updateCursor(); // Check if possible to zoom-out

        if (effect === "zoom" && !($content && duration && current.type === "image" && !self.isMoved() && !current.hasError && (end = self.getThumbPos(current)))) {
          effect = "fade";
        }

        if (effect === "zoom") {
          $.fancybox.stop($content);
          domRect = $.fancybox.getTranslate($content);
          start = {
            top: domRect.top,
            left: domRect.left,
            scaleX: domRect.width / end.width,
            scaleY: domRect.height / end.height,
            width: end.width,
            height: end.height
          }; // Check if we need to animate opacity

          opacity = current.opts.zoomOpacity;

          if (opacity == "auto") {
            opacity = Math.abs(current.width / current.height - end.width / end.height) > 0.1;
          }

          if (opacity) {
            end.opacity = 0;
          }

          $.fancybox.setTranslate($content, start);
          forceRedraw($content);
          $.fancybox.animate($content, end, duration, done);
          return true;
        }

        if (effect && duration) {
          $.fancybox.animate(current.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"), "fancybox-animated fancybox-fx-" + effect, duration, done);
        } else {
          // If skip animation
          if (e === true) {
            setTimeout(done, duration);
          } else {
            done();
          }
        }

        return true;
      },
      // Final adjustments after removing the instance
      // =============================================
      cleanUp: function cleanUp(e) {
        var self = this,
            instance,
            $focus = self.current.opts.$orig,
            x,
            y;
        self.current.$slide.trigger("onReset");
        self.$refs.container.empty().remove();
        self.trigger("afterClose", e); // Place back focus

        if (!!self.current.opts.backFocus) {
          if (!$focus || !$focus.length || !$focus.is(":visible")) {
            $focus = self.$trigger;
          }

          if ($focus && $focus.length) {
            x = window.scrollX;
            y = window.scrollY;
            $focus.trigger("focus");
            $("html, body").scrollTop(y).scrollLeft(x);
          }
        }

        self.current = null; // Check if there are other instances

        instance = $.fancybox.getInstance();

        if (instance) {
          instance.activate();
        } else {
          $("body").removeClass("fancybox-active compensate-for-scrollbar");
          $("#fancybox-style-noscroll").remove();
        }
      },
      // Call callback and trigger an event
      // ==================================
      trigger: function trigger(name, slide) {
        var args = Array.prototype.slice.call(arguments, 1),
            self = this,
            obj = slide && slide.opts ? slide : self.current,
            rez;

        if (obj) {
          args.unshift(obj);
        } else {
          obj = self;
        }

        args.unshift(self);

        if ($.isFunction(obj.opts[name])) {
          rez = obj.opts[name].apply(obj, args);
        }

        if (rez === false) {
          return rez;
        }

        if (name === "afterClose" || !self.$refs) {
          $D.trigger(name + ".fb", args);
        } else {
          self.$refs.container.trigger(name + ".fb", args);
        }
      },
      // Update infobar values, navigation button states and reveal caption
      // ==================================================================
      updateControls: function updateControls() {
        var self = this,
            current = self.current,
            index = current.index,
            $container = self.$refs.container,
            $caption = self.$refs.caption,
            caption = current.opts.caption; // Recalculate content dimensions

        current.$slide.trigger("refresh"); // Set caption

        if (caption && caption.length) {
          self.$caption = $caption;
          $caption.children().eq(0).html(caption);
        } else {
          self.$caption = null;
        }

        if (!self.hasHiddenControls && !self.isIdle) {
          self.showControls();
        } // Update info and navigation elements


        $container.find("[data-fancybox-count]").html(self.group.length);
        $container.find("[data-fancybox-index]").html(index + 1);
        $container.find("[data-fancybox-prev]").prop("disabled", !current.opts.loop && index <= 0);
        $container.find("[data-fancybox-next]").prop("disabled", !current.opts.loop && index >= self.group.length - 1);

        if (current.type === "image") {
          // Re-enable buttons; update download button source
          $container.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href", current.opts.image.src || current.src).show();
        } else if (current.opts.toolbar) {
          $container.find("[data-fancybox-download],[data-fancybox-zoom]").hide();
        } // Make sure focus is not on disabled button/element


        if ($(document.activeElement).is(":hidden,[disabled]")) {
          self.$refs.container.trigger("focus");
        }
      },
      // Hide toolbar and caption
      // ========================
      hideControls: function hideControls(andCaption) {
        var self = this,
            arr = ["infobar", "toolbar", "nav"];

        if (andCaption || !self.current.opts.preventCaptionOverlap) {
          arr.push("caption");
        }

        this.$refs.container.removeClass(arr.map(function (i) {
          return "fancybox-show-" + i;
        }).join(" "));
        this.hasHiddenControls = true;
      },
      showControls: function showControls() {
        var self = this,
            opts = self.current ? self.current.opts : self.opts,
            $container = self.$refs.container;
        self.hasHiddenControls = false;
        self.idleSecondsCounter = 0;
        $container.toggleClass("fancybox-show-toolbar", !!(opts.toolbar && opts.buttons)).toggleClass("fancybox-show-infobar", !!(opts.infobar && self.group.length > 1)).toggleClass("fancybox-show-caption", !!self.$caption).toggleClass("fancybox-show-nav", !!(opts.arrows && self.group.length > 1)).toggleClass("fancybox-is-modal", !!opts.modal);
      },
      // Toggle toolbar and caption
      // ==========================
      toggleControls: function toggleControls() {
        if (this.hasHiddenControls) {
          this.showControls();
        } else {
          this.hideControls();
        }
      }
    });
    $.fancybox = {
      version: "3.5.7",
      defaults: defaults,
      // Get current instance and execute a command.
      //
      // Examples of usage:
      //
      //   $instance = $.fancybox.getInstance();
      //   $.fancybox.getInstance().jumpTo( 1 );
      //   $.fancybox.getInstance( 'jumpTo', 1 );
      //   $.fancybox.getInstance( function() {
      //       console.info( this.currIndex );
      //   });
      // ======================================================
      getInstance: function getInstance(command) {
        var instance = $('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),
            args = Array.prototype.slice.call(arguments, 1);

        if (instance instanceof FancyBox) {
          if ($.type(command) === "string") {
            instance[command].apply(instance, args);
          } else if ($.type(command) === "function") {
            command.apply(instance, args);
          }

          return instance;
        }

        return false;
      },
      // Create new instance
      // ===================
      open: function open(items, opts, index) {
        return new FancyBox(items, opts, index);
      },
      // Close current or all instances
      // ==============================
      close: function close(all) {
        var instance = this.getInstance();

        if (instance) {
          instance.close(); // Try to find and close next instance

          if (all === true) {
            this.close(all);
          }
        }
      },
      // Close all instances and unbind all events
      // =========================================
      destroy: function destroy() {
        this.close(true);
        $D.add("body").off("click.fb-start", "**");
      },
      // Try to detect mobile devices
      // ============================
      isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
      // Detect if 'translate3d' support is available
      // ============================================
      use3d: function () {
        var div = document.createElement("div");
        return window.getComputedStyle && window.getComputedStyle(div) && window.getComputedStyle(div).getPropertyValue("transform") && !(document.documentMode && document.documentMode < 11);
      }(),
      // Helper function to get current visual state of an element
      // returns array[ top, left, horizontal-scale, vertical-scale, opacity ]
      // =====================================================================
      getTranslate: function getTranslate($el) {
        var domRect;

        if (!$el || !$el.length) {
          return false;
        }

        domRect = $el[0].getBoundingClientRect();
        return {
          top: domRect.top || 0,
          left: domRect.left || 0,
          width: domRect.width,
          height: domRect.height,
          opacity: parseFloat($el.css("opacity"))
        };
      },
      // Shortcut for setting "translate3d" properties for element
      // Can set be used to set opacity, too
      // ========================================================
      setTranslate: function setTranslate($el, props) {
        var str = "",
            css = {};

        if (!$el || !props) {
          return;
        }

        if (props.left !== undefined$1 || props.top !== undefined$1) {
          str = (props.left === undefined$1 ? $el.position().left : props.left) + "px, " + (props.top === undefined$1 ? $el.position().top : props.top) + "px";

          if (this.use3d) {
            str = "translate3d(" + str + ", 0px)";
          } else {
            str = "translate(" + str + ")";
          }
        }

        if (props.scaleX !== undefined$1 && props.scaleY !== undefined$1) {
          str += " scale(" + props.scaleX + ", " + props.scaleY + ")";
        } else if (props.scaleX !== undefined$1) {
          str += " scaleX(" + props.scaleX + ")";
        }

        if (str.length) {
          css.transform = str;
        }

        if (props.opacity !== undefined$1) {
          css.opacity = props.opacity;
        }

        if (props.width !== undefined$1) {
          css.width = props.width;
        }

        if (props.height !== undefined$1) {
          css.height = props.height;
        }

        return $el.css(css);
      },
      // Simple CSS transition handler
      // =============================
      animate: function animate($el, to, duration, callback, leaveAnimationName) {
        var self = this,
            from;

        if ($.isFunction(duration)) {
          callback = duration;
          duration = null;
        }

        self.stop($el);
        from = self.getTranslate($el);
        $el.on(transitionEnd, function (e) {
          // Skip events from child elements and z-index change
          if (e && e.originalEvent && (!$el.is(e.originalEvent.target) || e.originalEvent.propertyName == "z-index")) {
            return;
          }

          self.stop($el);

          if ($.isNumeric(duration)) {
            $el.css("transition-duration", "");
          }

          if ($.isPlainObject(to)) {
            if (to.scaleX !== undefined$1 && to.scaleY !== undefined$1) {
              self.setTranslate($el, {
                top: to.top,
                left: to.left,
                width: from.width * to.scaleX,
                height: from.height * to.scaleY,
                scaleX: 1,
                scaleY: 1
              });
            }
          } else if (leaveAnimationName !== true) {
            $el.removeClass(to);
          }

          if ($.isFunction(callback)) {
            callback(e);
          }
        });

        if ($.isNumeric(duration)) {
          $el.css("transition-duration", duration + "ms");
        } // Start animation by changing CSS properties or class name


        if ($.isPlainObject(to)) {
          if (to.scaleX !== undefined$1 && to.scaleY !== undefined$1) {
            delete to.width;
            delete to.height;

            if ($el.parent().hasClass("fancybox-slide--image")) {
              $el.parent().addClass("fancybox-is-scaling");
            }
          }

          $.fancybox.setTranslate($el, to);
        } else {
          $el.addClass(to);
        } // Make sure that `transitionend` callback gets fired


        $el.data("timer", setTimeout(function () {
          $el.trigger(transitionEnd);
        }, duration + 33));
      },
      stop: function stop($el, callCallback) {
        if ($el && $el.length) {
          clearTimeout($el.data("timer"));

          if (callCallback) {
            $el.trigger(transitionEnd);
          }

          $el.off(transitionEnd).css("transition-duration", "");
          $el.parent().removeClass("fancybox-is-scaling");
        }
      }
    }; // Default click handler for "fancyboxed" links
    // ============================================

    function _run(e, opts) {
      var items = [],
          index = 0,
          $target,
          value,
          instance; // Avoid opening multiple times

      if (e && e.isDefaultPrevented()) {
        return;
      }

      e.preventDefault();
      opts = opts || {};

      if (e && e.data) {
        opts = mergeOpts(e.data.options, opts);
      }

      $target = opts.$target || $(e.currentTarget).trigger("blur");
      instance = $.fancybox.getInstance();

      if (instance && instance.$trigger && instance.$trigger.is($target)) {
        return;
      }

      if (opts.selector) {
        items = $(opts.selector);
      } else {
        // Get all related items and find index for clicked one
        value = $target.attr("data-fancybox") || "";

        if (value) {
          items = e.data ? e.data.items : [];
          items = items.length ? items.filter('[data-fancybox="' + value + '"]') : $('[data-fancybox="' + value + '"]');
        } else {
          items = [$target];
        }
      }

      index = $(items).index($target); // Sometimes current item can not be found

      if (index < 0) {
        index = 0;
      }

      instance = $.fancybox.open(items, opts, index); // Save last active element

      instance.$trigger = $target;
    } // Create a jQuery plugin
    // ======================


    $.fn.fancybox = function (options) {
      var selector;
      options = options || {};
      selector = options.selector || false;

      if (selector) {
        // Use body element instead of document so it executes first
        $("body").off("click.fb-start", selector).on("click.fb-start", selector, {
          options: options
        }, _run);
      } else {
        this.off("click.fb-start").on("click.fb-start", {
          items: this,
          options: options
        }, _run);
      }

      return this;
    }; // Self initializing plugin for all elements having `data-fancybox` attribute
    // ==========================================================================


    $D.on("click.fb-start", "[data-fancybox]", _run); // Enable "trigger elements"
    // =========================

    $D.on("click.fb-start", "[data-fancybox-trigger]", function (e) {
      $('[data-fancybox="' + $(this).attr("data-fancybox-trigger") + '"]').eq($(this).attr("data-fancybox-index") || 0).trigger("click.fb-start", {
        $trigger: $(this)
      });
    }); // Track focus event for better accessibility styling
    // ==================================================

    (function () {
      var buttonStr = ".fancybox-button",
          focusStr = "fancybox-focus",
          $pressed = null;
      $D.on("mousedown mouseup focus blur", buttonStr, function (e) {
        switch (e.type) {
          case "mousedown":
            $pressed = $(this);
            break;

          case "mouseup":
            $pressed = null;
            break;

          case "focusin":
            $(buttonStr).removeClass(focusStr);

            if (!$(this).is($pressed) && !$(this).is("[disabled]")) {
              $(this).addClass(focusStr);
            }

            break;

          case "focusout":
            $(buttonStr).removeClass(focusStr);
            break;
        }
      });
    })();
  })(window, document, jQuery); // ==========================================================================
  //
  // Media
  // Adds additional media type support
  //
  // ==========================================================================


  (function ($) {

    var defaults = {
      youtube: {
        matcher: /(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,
        params: {
          autoplay: 1,
          autohide: 1,
          fs: 1,
          rel: 0,
          hd: 1,
          wmode: "transparent",
          enablejsapi: 1,
          html5: 1
        },
        paramPlace: 8,
        type: "iframe",
        url: "https://www.youtube-nocookie.com/embed/$4",
        thumb: "https://img.youtube.com/vi/$4/hqdefault.jpg"
      },
      vimeo: {
        matcher: /^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,
        params: {
          autoplay: 1,
          hd: 1,
          show_title: 1,
          show_byline: 1,
          show_portrait: 0,
          fullscreen: 1
        },
        paramPlace: 3,
        type: "iframe",
        url: "//player.vimeo.com/video/$2"
      },
      instagram: {
        matcher: /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,
        type: "image",
        url: "//$1/p/$2/media/?size=l"
      },
      // Examples:
      // http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16
      // https://www.google.com/maps/@37.7852006,-122.4146355,14.65z
      // https://www.google.com/maps/@52.2111123,2.9237542,6.61z?hl=en
      // https://www.google.com/maps/place/Googleplex/@37.4220041,-122.0833494,17z/data=!4m5!3m4!1s0x0:0x6c296c66619367e0!8m2!3d37.4219998!4d-122.0840572
      gmap_place: {
        matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,
        type: "iframe",
        url: function url(rez) {
          return "//maps.google." + rez[2] + "/?ll=" + (rez[9] ? rez[9] + "&z=" + Math.floor(rez[10]) + (rez[12] ? rez[12].replace(/^\//, "&") : "") : rez[12] + "").replace(/\?/, "&") + "&output=" + (rez[12] && rez[12].indexOf("layer=c") > 0 ? "svembed" : "embed");
        }
      },
      // Examples:
      // https://www.google.com/maps/search/Empire+State+Building/
      // https://www.google.com/maps/search/?api=1&query=centurylink+field
      // https://www.google.com/maps/search/?api=1&query=47.5951518,-122.3316393
      gmap_search: {
        matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,
        type: "iframe",
        url: function url(rez) {
          return "//maps.google." + rez[2] + "/maps?q=" + rez[5].replace("query=", "q=").replace("api=1", "") + "&output=embed";
        }
      }
    }; // Formats matching url to final form

    var format = function format(url, rez, params) {
      if (!url) {
        return;
      }

      params = params || "";

      if ($.type(params) === "object") {
        params = $.param(params, true);
      }

      $.each(rez, function (key, value) {
        url = url.replace("$" + key, value || "");
      });

      if (params.length) {
        url += (url.indexOf("?") > 0 ? "&" : "?") + params;
      }

      return url;
    };

    $(document).on("objectNeedsType.fb", function (e, instance, item) {
      var url = item.src || "",
          type = false,
          media,
          thumb,
          rez,
          params,
          urlParams,
          paramObj,
          provider;
      media = $.extend(true, {}, defaults, item.opts.media); // Look for any matching media type

      $.each(media, function (providerName, providerOpts) {
        rez = url.match(providerOpts.matcher);

        if (!rez) {
          return;
        }

        type = providerOpts.type;
        provider = providerName;
        paramObj = {};

        if (providerOpts.paramPlace && rez[providerOpts.paramPlace]) {
          urlParams = rez[providerOpts.paramPlace];

          if (urlParams[0] == "?") {
            urlParams = urlParams.substring(1);
          }

          urlParams = urlParams.split("&");

          for (var m = 0; m < urlParams.length; ++m) {
            var p = urlParams[m].split("=", 2);

            if (p.length == 2) {
              paramObj[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
            }
          }
        }

        params = $.extend(true, {}, providerOpts.params, item.opts[providerName], paramObj);
        url = $.type(providerOpts.url) === "function" ? providerOpts.url.call(this, rez, params, item) : format(providerOpts.url, rez, params);
        thumb = $.type(providerOpts.thumb) === "function" ? providerOpts.thumb.call(this, rez, params, item) : format(providerOpts.thumb, rez);

        if (providerName === "youtube") {
          url = url.replace(/&t=((\d+)m)?(\d+)s/, function (match, p1, m, s) {
            return "&start=" + ((m ? parseInt(m, 10) * 60 : 0) + parseInt(s, 10));
          });
        } else if (providerName === "vimeo") {
          url = url.replace("&%23", "#");
        }

        return false;
      }); // If it is found, then change content type and update the url

      if (type) {
        if (!item.opts.thumb && !(item.opts.$thumb && item.opts.$thumb.length)) {
          item.opts.thumb = thumb;
        }

        if (type === "iframe") {
          item.opts = $.extend(true, item.opts, {
            iframe: {
              preload: false,
              attr: {
                scrolling: "no"
              }
            }
          });
        }

        $.extend(item, {
          type: type,
          src: url,
          origSrc: item.src,
          contentSource: provider,
          contentType: type === "image" ? "image" : provider == "gmap_place" || provider == "gmap_search" ? "map" : "video"
        });
      } else if (url) {
        item.type = item.opts.defaultType;
      }
    }); // Load YouTube/Video API on request to detect when video finished playing

    var VideoAPILoader = {
      youtube: {
        src: "https://www.youtube.com/iframe_api",
        class: "YT",
        loading: false,
        loaded: false
      },
      vimeo: {
        src: "https://player.vimeo.com/api/player.js",
        class: "Vimeo",
        loading: false,
        loaded: false
      },
      load: function load(vendor) {
        var _this = this,
            script;

        if (this[vendor].loaded) {
          setTimeout(function () {
            _this.done(vendor);
          });
          return;
        }

        if (this[vendor].loading) {
          return;
        }

        this[vendor].loading = true;
        script = document.createElement("script");
        script.type = "text/javascript";
        script.src = this[vendor].src;

        if (vendor === "youtube") {
          window.onYouTubeIframeAPIReady = function () {
            _this[vendor].loaded = true;

            _this.done(vendor);
          };
        } else {
          script.onload = function () {
            _this[vendor].loaded = true;

            _this.done(vendor);
          };
        }

        document.body.appendChild(script);
      },
      done: function done(vendor) {
        var instance, $el, player;

        if (vendor === "youtube") {
          delete window.onYouTubeIframeAPIReady;
        }

        instance = $.fancybox.getInstance();

        if (instance) {
          $el = instance.current.$content.find("iframe");

          if (vendor === "youtube" && YT !== undefined && YT) {
            player = new YT.Player($el.attr("id"), {
              events: {
                onStateChange: function onStateChange(e) {
                  if (e.data == 0) {
                    instance.next();
                  }
                }
              }
            });
          } else if (vendor === "vimeo" && Vimeo !== undefined && Vimeo) {
            player = new Vimeo.Player($el);
            player.on("ended", function () {
              instance.next();
            });
          }
        }
      }
    };
    $(document).on({
      "afterShow.fb": function afterShowFb(e, instance, current) {
        if (instance.group.length > 1 && (current.contentSource === "youtube" || current.contentSource === "vimeo")) {
          VideoAPILoader.load(current.contentSource);
        }
      }
    });
  })(jQuery); // ==========================================================================
  //
  // Guestures
  // Adds touch guestures, handles click and tap events
  //
  // ==========================================================================


  (function (window, document, $) {

    var requestAFrame = function () {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || // if all else fails, use setTimeout
      function (callback) {
        return window.setTimeout(callback, 1000 / 60);
      };
    }();

    var cancelAFrame = function () {
      return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || function (id) {
        window.clearTimeout(id);
      };
    }();

    var getPointerXY = function getPointerXY(e) {
      var result = [];
      e = e.originalEvent || e || window.e;
      e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e];

      for (var key in e) {
        if (e[key].pageX) {
          result.push({
            x: e[key].pageX,
            y: e[key].pageY
          });
        } else if (e[key].clientX) {
          result.push({
            x: e[key].clientX,
            y: e[key].clientY
          });
        }
      }

      return result;
    };

    var distance = function distance(point2, point1, what) {
      if (!point1 || !point2) {
        return 0;
      }

      if (what === "x") {
        return point2.x - point1.x;
      } else if (what === "y") {
        return point2.y - point1.y;
      }

      return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
    };

    var isClickable = function isClickable($el) {
      if ($el.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe') || $.isFunction($el.get(0).onclick) || $el.data("selectable")) {
        return true;
      } // Check for attributes like data-fancybox-next or data-fancybox-close


      for (var i = 0, atts = $el[0].attributes, n = atts.length; i < n; i++) {
        if (atts[i].nodeName.substr(0, 14) === "data-fancybox-") {
          return true;
        }
      }

      return false;
    };

    var hasScrollbars = function hasScrollbars(el) {
      var overflowY = window.getComputedStyle(el)["overflow-y"],
          overflowX = window.getComputedStyle(el)["overflow-x"],
          vertical = (overflowY === "scroll" || overflowY === "auto") && el.scrollHeight > el.clientHeight,
          horizontal = (overflowX === "scroll" || overflowX === "auto") && el.scrollWidth > el.clientWidth;
      return vertical || horizontal;
    };

    var isScrollable = function isScrollable($el) {
      var rez = false;

      while (true) {
        rez = hasScrollbars($el.get(0));

        if (rez) {
          break;
        }

        $el = $el.parent();

        if (!$el.length || $el.hasClass("fancybox-stage") || $el.is("body")) {
          break;
        }
      }

      return rez;
    };

    var Guestures = function Guestures(instance) {
      var self = this;
      self.instance = instance;
      self.$bg = instance.$refs.bg;
      self.$stage = instance.$refs.stage;
      self.$container = instance.$refs.container;
      self.destroy();
      self.$container.on("touchstart.fb.touch mousedown.fb.touch", $.proxy(self, "ontouchstart"));
    };

    Guestures.prototype.destroy = function () {
      var self = this;
      self.$container.off(".fb.touch");
      $(document).off(".fb.touch");

      if (self.requestId) {
        cancelAFrame(self.requestId);
        self.requestId = null;
      }

      if (self.tapped) {
        clearTimeout(self.tapped);
        self.tapped = null;
      }
    };

    Guestures.prototype.ontouchstart = function (e) {
      var self = this,
          $target = $(e.target),
          instance = self.instance,
          current = instance.current,
          $slide = current.$slide,
          $content = current.$content,
          isTouchDevice = e.type == "touchstart"; // Do not respond to both (touch and mouse) events

      if (isTouchDevice) {
        self.$container.off("mousedown.fb.touch");
      } // Ignore right click


      if (e.originalEvent && e.originalEvent.button == 2) {
        return;
      } // Ignore taping on links, buttons, input elements


      if (!$slide.length || !$target.length || isClickable($target) || isClickable($target.parent())) {
        return;
      } // Ignore clicks on the scrollbar


      if (!$target.is("img") && e.originalEvent.clientX > $target[0].clientWidth + $target.offset().left) {
        return;
      } // Ignore clicks while zooming or closing


      if (!current || instance.isAnimating || current.$slide.hasClass("fancybox-animated")) {
        e.stopPropagation();
        e.preventDefault();
        return;
      }

      self.realPoints = self.startPoints = getPointerXY(e);

      if (!self.startPoints.length) {
        return;
      } // Allow other scripts to catch touch event if "touch" is set to false


      if (current.touch) {
        e.stopPropagation();
      }

      self.startEvent = e;
      self.canTap = true;
      self.$target = $target;
      self.$content = $content;
      self.opts = current.opts.touch;
      self.isPanning = false;
      self.isSwiping = false;
      self.isZooming = false;
      self.isScrolling = false;
      self.canPan = instance.canPan();
      self.startTime = new Date().getTime();
      self.distanceX = self.distanceY = self.distance = 0;
      self.canvasWidth = Math.round($slide[0].clientWidth);
      self.canvasHeight = Math.round($slide[0].clientHeight);
      self.contentLastPos = null;
      self.contentStartPos = $.fancybox.getTranslate(self.$content) || {
        top: 0,
        left: 0
      };
      self.sliderStartPos = $.fancybox.getTranslate($slide); // Since position will be absolute, but we need to make it relative to the stage

      self.stagePos = $.fancybox.getTranslate(instance.$refs.stage);
      self.sliderStartPos.top -= self.stagePos.top;
      self.sliderStartPos.left -= self.stagePos.left;
      self.contentStartPos.top -= self.stagePos.top;
      self.contentStartPos.left -= self.stagePos.left;
      $(document).off(".fb.touch").on(isTouchDevice ? "touchend.fb.touch touchcancel.fb.touch" : "mouseup.fb.touch mouseleave.fb.touch", $.proxy(self, "ontouchend")).on(isTouchDevice ? "touchmove.fb.touch" : "mousemove.fb.touch", $.proxy(self, "ontouchmove"));

      if ($.fancybox.isMobile) {
        document.addEventListener("scroll", self.onscroll, true);
      } // Skip if clicked outside the sliding area


      if (!(self.opts || self.canPan) || !($target.is(self.$stage) || self.$stage.find($target).length)) {
        if ($target.is(".fancybox-image")) {
          e.preventDefault();
        }

        if (!($.fancybox.isMobile && $target.parents(".fancybox-caption").length)) {
          return;
        }
      }

      self.isScrollable = isScrollable($target) || isScrollable($target.parent()); // Check if element is scrollable and try to prevent default behavior (scrolling)

      if (!($.fancybox.isMobile && self.isScrollable)) {
        e.preventDefault();
      } // One finger or mouse click - swipe or pan an image


      if (self.startPoints.length === 1 || current.hasError) {
        if (self.canPan) {
          $.fancybox.stop(self.$content);
          self.isPanning = true;
        } else {
          self.isSwiping = true;
        }

        self.$container.addClass("fancybox-is-grabbing");
      } // Two fingers - zoom image


      if (self.startPoints.length === 2 && current.type === "image" && (current.isLoaded || current.$ghost)) {
        self.canTap = false;
        self.isSwiping = false;
        self.isPanning = false;
        self.isZooming = true;
        $.fancybox.stop(self.$content);
        self.centerPointStartX = (self.startPoints[0].x + self.startPoints[1].x) * 0.5 - $(window).scrollLeft();
        self.centerPointStartY = (self.startPoints[0].y + self.startPoints[1].y) * 0.5 - $(window).scrollTop();
        self.percentageOfImageAtPinchPointX = (self.centerPointStartX - self.contentStartPos.left) / self.contentStartPos.width;
        self.percentageOfImageAtPinchPointY = (self.centerPointStartY - self.contentStartPos.top) / self.contentStartPos.height;
        self.startDistanceBetweenFingers = distance(self.startPoints[0], self.startPoints[1]);
      }
    };

    Guestures.prototype.onscroll = function (e) {
      var self = this;
      self.isScrolling = true;
      document.removeEventListener("scroll", self.onscroll, true);
    };

    Guestures.prototype.ontouchmove = function (e) {
      var self = this; // Make sure user has not released over iframe or disabled element

      if (e.originalEvent.buttons !== undefined && e.originalEvent.buttons === 0) {
        self.ontouchend(e);
        return;
      }

      if (self.isScrolling) {
        self.canTap = false;
        return;
      }

      self.newPoints = getPointerXY(e);

      if (!(self.opts || self.canPan) || !self.newPoints.length || !self.newPoints.length) {
        return;
      }

      if (!(self.isSwiping && self.isSwiping === true)) {
        e.preventDefault();
      }

      self.distanceX = distance(self.newPoints[0], self.startPoints[0], "x");
      self.distanceY = distance(self.newPoints[0], self.startPoints[0], "y");
      self.distance = distance(self.newPoints[0], self.startPoints[0]); // Skip false ontouchmove events (Chrome)

      if (self.distance > 0) {
        if (self.isSwiping) {
          self.onSwipe(e);
        } else if (self.isPanning) {
          self.onPan();
        } else if (self.isZooming) {
          self.onZoom();
        }
      }
    };

    Guestures.prototype.onSwipe = function (e) {
      var self = this,
          instance = self.instance,
          swiping = self.isSwiping,
          left = self.sliderStartPos.left || 0,
          angle; // If direction is not yet determined

      if (swiping === true) {
        // We need at least 10px distance to correctly calculate an angle
        if (Math.abs(self.distance) > 10) {
          self.canTap = false;

          if (instance.group.length < 2 && self.opts.vertical) {
            self.isSwiping = "y";
          } else if (instance.isDragging || self.opts.vertical === false || self.opts.vertical === "auto" && $(window).width() > 800) {
            self.isSwiping = "x";
          } else {
            angle = Math.abs(Math.atan2(self.distanceY, self.distanceX) * 180 / Math.PI);
            self.isSwiping = angle > 45 && angle < 135 ? "y" : "x";
          }

          if (self.isSwiping === "y" && $.fancybox.isMobile && self.isScrollable) {
            self.isScrolling = true;
            return;
          }

          instance.isDragging = self.isSwiping; // Reset points to avoid jumping, because we dropped first swipes to calculate the angle

          self.startPoints = self.newPoints;
          $.each(instance.slides, function (index, slide) {
            var slidePos, stagePos;
            $.fancybox.stop(slide.$slide);
            slidePos = $.fancybox.getTranslate(slide.$slide);
            stagePos = $.fancybox.getTranslate(instance.$refs.stage);
            slide.$slide.css({
              transform: "",
              opacity: "",
              "transition-duration": ""
            }).removeClass("fancybox-animated").removeClass(function (index, className) {
              return (className.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
            });

            if (slide.pos === instance.current.pos) {
              self.sliderStartPos.top = slidePos.top - stagePos.top;
              self.sliderStartPos.left = slidePos.left - stagePos.left;
            }

            $.fancybox.setTranslate(slide.$slide, {
              top: slidePos.top - stagePos.top,
              left: slidePos.left - stagePos.left
            });
          }); // Stop slideshow

          if (instance.SlideShow && instance.SlideShow.isActive) {
            instance.SlideShow.stop();
          }
        }

        return;
      } // Sticky edges


      if (swiping == "x") {
        if (self.distanceX > 0 && (self.instance.group.length < 2 || self.instance.current.index === 0 && !self.instance.current.opts.loop)) {
          left = left + Math.pow(self.distanceX, 0.8);
        } else if (self.distanceX < 0 && (self.instance.group.length < 2 || self.instance.current.index === self.instance.group.length - 1 && !self.instance.current.opts.loop)) {
          left = left - Math.pow(-self.distanceX, 0.8);
        } else {
          left = left + self.distanceX;
        }
      }

      self.sliderLastPos = {
        top: swiping == "x" ? 0 : self.sliderStartPos.top + self.distanceY,
        left: left
      };

      if (self.requestId) {
        cancelAFrame(self.requestId);
        self.requestId = null;
      }

      self.requestId = requestAFrame(function () {
        if (self.sliderLastPos) {
          $.each(self.instance.slides, function (index, slide) {
            var pos = slide.pos - self.instance.currPos;
            $.fancybox.setTranslate(slide.$slide, {
              top: self.sliderLastPos.top,
              left: self.sliderLastPos.left + pos * self.canvasWidth + pos * slide.opts.gutter
            });
          });
          self.$container.addClass("fancybox-is-sliding");
        }
      });
    };

    Guestures.prototype.onPan = function () {
      var self = this; // Prevent accidental movement (sometimes, when tapping casually, finger can move a bit)

      if (distance(self.newPoints[0], self.realPoints[0]) < ($.fancybox.isMobile ? 10 : 5)) {
        self.startPoints = self.newPoints;
        return;
      }

      self.canTap = false;
      self.contentLastPos = self.limitMovement();

      if (self.requestId) {
        cancelAFrame(self.requestId);
      }

      self.requestId = requestAFrame(function () {
        $.fancybox.setTranslate(self.$content, self.contentLastPos);
      });
    }; // Make panning sticky to the edges


    Guestures.prototype.limitMovement = function () {
      var self = this;
      var canvasWidth = self.canvasWidth;
      var canvasHeight = self.canvasHeight;
      var distanceX = self.distanceX;
      var distanceY = self.distanceY;
      var contentStartPos = self.contentStartPos;
      var currentOffsetX = contentStartPos.left;
      var currentOffsetY = contentStartPos.top;
      var currentWidth = contentStartPos.width;
      var currentHeight = contentStartPos.height;
      var minTranslateX, minTranslateY, maxTranslateX, maxTranslateY, newOffsetX, newOffsetY;

      if (currentWidth > canvasWidth) {
        newOffsetX = currentOffsetX + distanceX;
      } else {
        newOffsetX = currentOffsetX;
      }

      newOffsetY = currentOffsetY + distanceY; // Slow down proportionally to traveled distance

      minTranslateX = Math.max(0, canvasWidth * 0.5 - currentWidth * 0.5);
      minTranslateY = Math.max(0, canvasHeight * 0.5 - currentHeight * 0.5);
      maxTranslateX = Math.min(canvasWidth - currentWidth, canvasWidth * 0.5 - currentWidth * 0.5);
      maxTranslateY = Math.min(canvasHeight - currentHeight, canvasHeight * 0.5 - currentHeight * 0.5); //   ->

      if (distanceX > 0 && newOffsetX > minTranslateX) {
        newOffsetX = minTranslateX - 1 + Math.pow(-minTranslateX + currentOffsetX + distanceX, 0.8) || 0;
      } //    <-


      if (distanceX < 0 && newOffsetX < maxTranslateX) {
        newOffsetX = maxTranslateX + 1 - Math.pow(maxTranslateX - currentOffsetX - distanceX, 0.8) || 0;
      } //   \/


      if (distanceY > 0 && newOffsetY > minTranslateY) {
        newOffsetY = minTranslateY - 1 + Math.pow(-minTranslateY + currentOffsetY + distanceY, 0.8) || 0;
      } //   /\


      if (distanceY < 0 && newOffsetY < maxTranslateY) {
        newOffsetY = maxTranslateY + 1 - Math.pow(maxTranslateY - currentOffsetY - distanceY, 0.8) || 0;
      }

      return {
        top: newOffsetY,
        left: newOffsetX
      };
    };

    Guestures.prototype.limitPosition = function (newOffsetX, newOffsetY, newWidth, newHeight) {
      var self = this;
      var canvasWidth = self.canvasWidth;
      var canvasHeight = self.canvasHeight;

      if (newWidth > canvasWidth) {
        newOffsetX = newOffsetX > 0 ? 0 : newOffsetX;
        newOffsetX = newOffsetX < canvasWidth - newWidth ? canvasWidth - newWidth : newOffsetX;
      } else {
        // Center horizontally
        newOffsetX = Math.max(0, canvasWidth / 2 - newWidth / 2);
      }

      if (newHeight > canvasHeight) {
        newOffsetY = newOffsetY > 0 ? 0 : newOffsetY;
        newOffsetY = newOffsetY < canvasHeight - newHeight ? canvasHeight - newHeight : newOffsetY;
      } else {
        // Center vertically
        newOffsetY = Math.max(0, canvasHeight / 2 - newHeight / 2);
      }

      return {
        top: newOffsetY,
        left: newOffsetX
      };
    };

    Guestures.prototype.onZoom = function () {
      var self = this; // Calculate current distance between points to get pinch ratio and new width and height

      var contentStartPos = self.contentStartPos;
      var currentWidth = contentStartPos.width;
      var currentHeight = contentStartPos.height;
      var currentOffsetX = contentStartPos.left;
      var currentOffsetY = contentStartPos.top;
      var endDistanceBetweenFingers = distance(self.newPoints[0], self.newPoints[1]);
      var pinchRatio = endDistanceBetweenFingers / self.startDistanceBetweenFingers;
      var newWidth = Math.floor(currentWidth * pinchRatio);
      var newHeight = Math.floor(currentHeight * pinchRatio); // This is the translation due to pinch-zooming

      var translateFromZoomingX = (currentWidth - newWidth) * self.percentageOfImageAtPinchPointX;
      var translateFromZoomingY = (currentHeight - newHeight) * self.percentageOfImageAtPinchPointY; // Point between the two touches

      var centerPointEndX = (self.newPoints[0].x + self.newPoints[1].x) / 2 - $(window).scrollLeft();
      var centerPointEndY = (self.newPoints[0].y + self.newPoints[1].y) / 2 - $(window).scrollTop(); // And this is the translation due to translation of the centerpoint
      // between the two fingers

      var translateFromTranslatingX = centerPointEndX - self.centerPointStartX;
      var translateFromTranslatingY = centerPointEndY - self.centerPointStartY; // The new offset is the old/current one plus the total translation

      var newOffsetX = currentOffsetX + (translateFromZoomingX + translateFromTranslatingX);
      var newOffsetY = currentOffsetY + (translateFromZoomingY + translateFromTranslatingY);
      var newPos = {
        top: newOffsetY,
        left: newOffsetX,
        scaleX: pinchRatio,
        scaleY: pinchRatio
      };
      self.canTap = false;
      self.newWidth = newWidth;
      self.newHeight = newHeight;
      self.contentLastPos = newPos;

      if (self.requestId) {
        cancelAFrame(self.requestId);
      }

      self.requestId = requestAFrame(function () {
        $.fancybox.setTranslate(self.$content, self.contentLastPos);
      });
    };

    Guestures.prototype.ontouchend = function (e) {
      var self = this;
      var swiping = self.isSwiping;
      var panning = self.isPanning;
      var zooming = self.isZooming;
      var scrolling = self.isScrolling;
      self.endPoints = getPointerXY(e);
      self.dMs = Math.max(new Date().getTime() - self.startTime, 1);
      self.$container.removeClass("fancybox-is-grabbing");
      $(document).off(".fb.touch");
      document.removeEventListener("scroll", self.onscroll, true);

      if (self.requestId) {
        cancelAFrame(self.requestId);
        self.requestId = null;
      }

      self.isSwiping = false;
      self.isPanning = false;
      self.isZooming = false;
      self.isScrolling = false;
      self.instance.isDragging = false;

      if (self.canTap) {
        return self.onTap(e);
      }

      self.speed = 100; // Speed in px/ms

      self.velocityX = self.distanceX / self.dMs * 0.5;
      self.velocityY = self.distanceY / self.dMs * 0.5;

      if (panning) {
        self.endPanning();
      } else if (zooming) {
        self.endZooming();
      } else {
        self.endSwiping(swiping, scrolling);
      }

      return;
    };

    Guestures.prototype.endSwiping = function (swiping, scrolling) {
      var self = this,
          ret = false,
          len = self.instance.group.length,
          distanceX = Math.abs(self.distanceX),
          canAdvance = swiping == "x" && len > 1 && (self.dMs > 130 && distanceX > 10 || distanceX > 50),
          speedX = 300;
      self.sliderLastPos = null; // Close if swiped vertically / navigate if horizontally

      if (swiping == "y" && !scrolling && Math.abs(self.distanceY) > 50) {
        // Continue vertical movement
        $.fancybox.animate(self.instance.current.$slide, {
          top: self.sliderStartPos.top + self.distanceY + self.velocityY * 150,
          opacity: 0
        }, 200);
        ret = self.instance.close(true, 250);
      } else if (canAdvance && self.distanceX > 0) {
        ret = self.instance.previous(speedX);
      } else if (canAdvance && self.distanceX < 0) {
        ret = self.instance.next(speedX);
      }

      if (ret === false && (swiping == "x" || swiping == "y")) {
        self.instance.centerSlide(200);
      }

      self.$container.removeClass("fancybox-is-sliding");
    }; // Limit panning from edges
    // ========================


    Guestures.prototype.endPanning = function () {
      var self = this,
          newOffsetX,
          newOffsetY,
          newPos;

      if (!self.contentLastPos) {
        return;
      }

      if (self.opts.momentum === false || self.dMs > 350) {
        newOffsetX = self.contentLastPos.left;
        newOffsetY = self.contentLastPos.top;
      } else {
        // Continue movement
        newOffsetX = self.contentLastPos.left + self.velocityX * 500;
        newOffsetY = self.contentLastPos.top + self.velocityY * 500;
      }

      newPos = self.limitPosition(newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height);
      newPos.width = self.contentStartPos.width;
      newPos.height = self.contentStartPos.height;
      $.fancybox.animate(self.$content, newPos, 366);
    };

    Guestures.prototype.endZooming = function () {
      var self = this;
      var current = self.instance.current;
      var newOffsetX, newOffsetY, newPos, reset;
      var newWidth = self.newWidth;
      var newHeight = self.newHeight;

      if (!self.contentLastPos) {
        return;
      }

      newOffsetX = self.contentLastPos.left;
      newOffsetY = self.contentLastPos.top;
      reset = {
        top: newOffsetY,
        left: newOffsetX,
        width: newWidth,
        height: newHeight,
        scaleX: 1,
        scaleY: 1
      }; // Reset scalex/scaleY values; this helps for perfomance and does not break animation

      $.fancybox.setTranslate(self.$content, reset);

      if (newWidth < self.canvasWidth && newHeight < self.canvasHeight) {
        self.instance.scaleToFit(150);
      } else if (newWidth > current.width || newHeight > current.height) {
        self.instance.scaleToActual(self.centerPointStartX, self.centerPointStartY, 150);
      } else {
        newPos = self.limitPosition(newOffsetX, newOffsetY, newWidth, newHeight);
        $.fancybox.animate(self.$content, newPos, 150);
      }
    };

    Guestures.prototype.onTap = function (e) {
      var self = this;
      var $target = $(e.target);
      var instance = self.instance;
      var current = instance.current;
      var endPoints = e && getPointerXY(e) || self.startPoints;
      var tapX = endPoints[0] ? endPoints[0].x - $(window).scrollLeft() - self.stagePos.left : 0;
      var tapY = endPoints[0] ? endPoints[0].y - $(window).scrollTop() - self.stagePos.top : 0;
      var where;

      var process = function process(prefix) {
        var action = current.opts[prefix];

        if ($.isFunction(action)) {
          action = action.apply(instance, [current, e]);
        }

        if (!action) {
          return;
        }

        switch (action) {
          case "close":
            instance.close(self.startEvent);
            break;

          case "toggleControls":
            instance.toggleControls();
            break;

          case "next":
            instance.next();
            break;

          case "nextOrClose":
            if (instance.group.length > 1) {
              instance.next();
            } else {
              instance.close(self.startEvent);
            }

            break;

          case "zoom":
            if (current.type == "image" && (current.isLoaded || current.$ghost)) {
              if (instance.canPan()) {
                instance.scaleToFit();
              } else if (instance.isScaledDown()) {
                instance.scaleToActual(tapX, tapY);
              } else if (instance.group.length < 2) {
                instance.close(self.startEvent);
              }
            }

            break;
        }
      }; // Ignore right click


      if (e.originalEvent && e.originalEvent.button == 2) {
        return;
      } // Skip if clicked on the scrollbar


      if (!$target.is("img") && tapX > $target[0].clientWidth + $target.offset().left) {
        return;
      } // Check where is clicked


      if ($target.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container")) {
        where = "Outside";
      } else if ($target.is(".fancybox-slide")) {
        where = "Slide";
      } else if (instance.current.$content && instance.current.$content.find($target).addBack().filter($target).length) {
        where = "Content";
      } else {
        return;
      } // Check if this is a double tap


      if (self.tapped) {
        // Stop previously created single tap
        clearTimeout(self.tapped);
        self.tapped = null; // Skip if distance between taps is too big

        if (Math.abs(tapX - self.tapX) > 50 || Math.abs(tapY - self.tapY) > 50) {
          return this;
        } // OK, now we assume that this is a double-tap


        process("dblclick" + where);
      } else {
        // Single tap will be processed if user has not clicked second time within 300ms
        // or there is no need to wait for double-tap
        self.tapX = tapX;
        self.tapY = tapY;

        if (current.opts["dblclick" + where] && current.opts["dblclick" + where] !== current.opts["click" + where]) {
          self.tapped = setTimeout(function () {
            self.tapped = null;

            if (!instance.isAnimating) {
              process("click" + where);
            }
          }, 500);
        } else {
          process("click" + where);
        }
      }

      return this;
    };

    $(document).on("onActivate.fb", function (e, instance) {
      if (instance && !instance.Guestures) {
        instance.Guestures = new Guestures(instance);
      }
    }).on("beforeClose.fb", function (e, instance) {
      if (instance && instance.Guestures) {
        instance.Guestures.destroy();
      }
    });
  })(window, document, jQuery); // ==========================================================================
  //
  // SlideShow
  // Enables slideshow functionality
  //
  // Example of usage:
  // $.fancybox.getInstance().SlideShow.start()
  //
  // ==========================================================================


  (function (document, $) {

    $.extend(true, $.fancybox.defaults, {
      btnTpl: {
        slideShow: '<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}">' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg>' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg>' + "</button>"
      },
      slideShow: {
        autoStart: false,
        speed: 3000,
        progress: true
      }
    });

    var SlideShow = function SlideShow(instance) {
      this.instance = instance;
      this.init();
    };

    $.extend(SlideShow.prototype, {
      timer: null,
      isActive: false,
      $button: null,
      init: function init() {
        var self = this,
            instance = self.instance,
            opts = instance.group[instance.currIndex].opts.slideShow;
        self.$button = instance.$refs.toolbar.find("[data-fancybox-play]").on("click", function () {
          self.toggle();
        });

        if (instance.group.length < 2 || !opts) {
          self.$button.hide();
        } else if (opts.progress) {
          self.$progress = $('<div class="fancybox-progress"></div>').appendTo(instance.$refs.inner);
        }
      },
      set: function set(force) {
        var self = this,
            instance = self.instance,
            current = instance.current; // Check if reached last element

        if (current && (force === true || current.opts.loop || instance.currIndex < instance.group.length - 1)) {
          if (self.isActive && current.contentType !== "video") {
            if (self.$progress) {
              $.fancybox.animate(self.$progress.show(), {
                scaleX: 1
              }, current.opts.slideShow.speed);
            }

            self.timer = setTimeout(function () {
              if (!instance.current.opts.loop && instance.current.index == instance.group.length - 1) {
                instance.jumpTo(0);
              } else {
                instance.next();
              }
            }, current.opts.slideShow.speed);
          }
        } else {
          self.stop();
          instance.idleSecondsCounter = 0;
          instance.showControls();
        }
      },
      clear: function clear() {
        var self = this;
        clearTimeout(self.timer);
        self.timer = null;

        if (self.$progress) {
          self.$progress.removeAttr("style").hide();
        }
      },
      start: function start() {
        var self = this,
            current = self.instance.current;

        if (current) {
          self.$button.attr("title", (current.opts.i18n[current.opts.lang] || current.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause");
          self.isActive = true;

          if (current.isComplete) {
            self.set(true);
          }

          self.instance.trigger("onSlideShowChange", true);
        }
      },
      stop: function stop() {
        var self = this,
            current = self.instance.current;
        self.clear();
        self.$button.attr("title", (current.opts.i18n[current.opts.lang] || current.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play");
        self.isActive = false;
        self.instance.trigger("onSlideShowChange", false);

        if (self.$progress) {
          self.$progress.removeAttr("style").hide();
        }
      },
      toggle: function toggle() {
        var self = this;

        if (self.isActive) {
          self.stop();
        } else {
          self.start();
        }
      }
    });
    $(document).on({
      "onInit.fb": function onInitFb(e, instance) {
        if (instance && !instance.SlideShow) {
          instance.SlideShow = new SlideShow(instance);
        }
      },
      "beforeShow.fb": function beforeShowFb(e, instance, current, firstRun) {
        var SlideShow = instance && instance.SlideShow;

        if (firstRun) {
          if (SlideShow && current.opts.slideShow.autoStart) {
            SlideShow.start();
          }
        } else if (SlideShow && SlideShow.isActive) {
          SlideShow.clear();
        }
      },
      "afterShow.fb": function afterShowFb(e, instance, current) {
        var SlideShow = instance && instance.SlideShow;

        if (SlideShow && SlideShow.isActive) {
          SlideShow.set();
        }
      },
      "afterKeydown.fb": function afterKeydownFb(e, instance, current, keypress, keycode) {
        var SlideShow = instance && instance.SlideShow; // "P" or Spacebar

        if (SlideShow && current.opts.slideShow && (keycode === 80 || keycode === 32) && !$(document.activeElement).is("button,a,input")) {
          keypress.preventDefault();
          SlideShow.toggle();
        }
      },
      "beforeClose.fb onDeactivate.fb": function beforeCloseFbOnDeactivateFb(e, instance) {
        var SlideShow = instance && instance.SlideShow;

        if (SlideShow) {
          SlideShow.stop();
        }
      }
    }); // Page Visibility API to pause slideshow when window is not active

    $(document).on("visibilitychange", function () {
      var instance = $.fancybox.getInstance(),
          SlideShow = instance && instance.SlideShow;

      if (SlideShow && SlideShow.isActive) {
        if (document.hidden) {
          SlideShow.clear();
        } else {
          SlideShow.set();
        }
      }
    });
  })(document, jQuery); // ==========================================================================
  //
  // FullScreen
  // Adds fullscreen functionality
  //
  // ==========================================================================


  (function (document, $) {

    var fn = function () {
      var fnMap = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"], // new WebKit
      ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"], // old WebKit (Safari 5.1)
      ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]];
      var ret = {};

      for (var i = 0; i < fnMap.length; i++) {
        var val = fnMap[i];

        if (val && val[1] in document) {
          for (var j = 0; j < val.length; j++) {
            ret[fnMap[0][j]] = val[j];
          }

          return ret;
        }
      }

      return false;
    }();

    if (fn) {
      var FullScreen = {
        request: function request(elem) {
          elem = elem || document.documentElement;
          elem[fn.requestFullscreen](elem.ALLOW_KEYBOARD_INPUT);
        },
        exit: function exit() {
          document[fn.exitFullscreen]();
        },
        toggle: function toggle(elem) {
          elem = elem || document.documentElement;

          if (this.isFullscreen()) {
            this.exit();
          } else {
            this.request(elem);
          }
        },
        isFullscreen: function isFullscreen() {
          return Boolean(document[fn.fullscreenElement]);
        },
        enabled: function enabled() {
          return Boolean(document[fn.fullscreenEnabled]);
        }
      };
      $.extend(true, $.fancybox.defaults, {
        btnTpl: {
          fullScreen: '<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}">' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg>' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg>' + "</button>"
        },
        fullScreen: {
          autoStart: false
        }
      });
      $(document).on(fn.fullscreenchange, function () {
        var isFullscreen = FullScreen.isFullscreen(),
            instance = $.fancybox.getInstance();

        if (instance) {
          // If image is zooming, then force to stop and reposition properly
          if (instance.current && instance.current.type === "image" && instance.isAnimating) {
            instance.isAnimating = false;
            instance.update(true, true, 0);

            if (!instance.isComplete) {
              instance.complete();
            }
          }

          instance.trigger("onFullscreenChange", isFullscreen);
          instance.$refs.container.toggleClass("fancybox-is-fullscreen", isFullscreen);
          instance.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter", !isFullscreen).toggleClass("fancybox-button--fsexit", isFullscreen);
        }
      });
    }

    $(document).on({
      "onInit.fb": function onInitFb(e, instance) {
        var $container;

        if (!fn) {
          instance.$refs.toolbar.find("[data-fancybox-fullscreen]").remove();
          return;
        }

        if (instance && instance.group[instance.currIndex].opts.fullScreen) {
          $container = instance.$refs.container;
          $container.on("click.fb-fullscreen", "[data-fancybox-fullscreen]", function (e) {
            e.stopPropagation();
            e.preventDefault();
            FullScreen.toggle();
          });

          if (instance.opts.fullScreen && instance.opts.fullScreen.autoStart === true) {
            FullScreen.request();
          } // Expose API


          instance.FullScreen = FullScreen;
        } else if (instance) {
          instance.$refs.toolbar.find("[data-fancybox-fullscreen]").hide();
        }
      },
      "afterKeydown.fb": function afterKeydownFb(e, instance, current, keypress, keycode) {
        // "F"
        if (instance && instance.FullScreen && keycode === 70) {
          keypress.preventDefault();
          instance.FullScreen.toggle();
        }
      },
      "beforeClose.fb": function beforeCloseFb(e, instance) {
        if (instance && instance.FullScreen && instance.$refs.container.hasClass("fancybox-is-fullscreen")) {
          FullScreen.exit();
        }
      }
    });
  })(document, jQuery); // ==========================================================================
  //
  // Thumbs
  // Displays thumbnails in a grid
  //
  // ==========================================================================


  (function (document, $) {

    var CLASS = "fancybox-thumbs",
        CLASS_ACTIVE = CLASS + "-active"; // Make sure there are default values

    $.fancybox.defaults = $.extend(true, {
      btnTpl: {
        thumbs: '<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}">' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg>' + "</button>"
      },
      thumbs: {
        autoStart: false,
        // Display thumbnails on opening
        hideOnClose: true,
        // Hide thumbnail grid when closing animation starts
        parentEl: ".fancybox-container",
        // Container is injected into this element
        axis: "y" // Vertical (y) or horizontal (x) scrolling

      }
    }, $.fancybox.defaults);

    var FancyThumbs = function FancyThumbs(instance) {
      this.init(instance);
    };

    $.extend(FancyThumbs.prototype, {
      $button: null,
      $grid: null,
      $list: null,
      isVisible: false,
      isActive: false,
      init: function init(instance) {
        var self = this,
            group = instance.group,
            enabled = 0;
        self.instance = instance;
        self.opts = group[instance.currIndex].opts.thumbs;
        instance.Thumbs = self;
        self.$button = instance.$refs.toolbar.find("[data-fancybox-thumbs]"); // Enable thumbs if at least two group items have thumbnails

        for (var i = 0, len = group.length; i < len; i++) {
          if (group[i].thumb) {
            enabled++;
          }

          if (enabled > 1) {
            break;
          }
        }

        if (enabled > 1 && !!self.opts) {
          self.$button.removeAttr("style").on("click", function () {
            self.toggle();
          });
          self.isActive = true;
        } else {
          self.$button.hide();
        }
      },
      create: function create() {
        var self = this,
            instance = self.instance,
            parentEl = self.opts.parentEl,
            list = [],
            src;

        if (!self.$grid) {
          // Create main element
          self.$grid = $('<div class="' + CLASS + " " + CLASS + "-" + self.opts.axis + '"></div>').appendTo(instance.$refs.container.find(parentEl).addBack().filter(parentEl)); // Add "click" event that performs gallery navigation

          self.$grid.on("click", "a", function () {
            instance.jumpTo($(this).attr("data-index"));
          });
        } // Build the list


        if (!self.$list) {
          self.$list = $('<div class="' + CLASS + '__list">').appendTo(self.$grid);
        }

        $.each(instance.group, function (i, item) {
          src = item.thumb;

          if (!src && item.type === "image") {
            src = item.src;
          }

          list.push('<a href="javascript:;" tabindex="0" data-index="' + i + '"' + (src && src.length ? ' style="background-image:url(' + src + ')"' : 'class="fancybox-thumbs-missing"') + "></a>");
        });
        self.$list[0].innerHTML = list.join("");

        if (self.opts.axis === "x") {
          // Set fixed width for list element to enable horizontal scrolling
          self.$list.width(parseInt(self.$grid.css("padding-right"), 10) + instance.group.length * self.$list.children().eq(0).outerWidth(true));
        }
      },
      focus: function focus(duration) {
        var self = this,
            $list = self.$list,
            $grid = self.$grid,
            thumb,
            thumbPos;

        if (!self.instance.current) {
          return;
        }

        thumb = $list.children().removeClass(CLASS_ACTIVE).filter('[data-index="' + self.instance.current.index + '"]').addClass(CLASS_ACTIVE);
        thumbPos = thumb.position(); // Check if need to scroll to make current thumb visible

        if (self.opts.axis === "y" && (thumbPos.top < 0 || thumbPos.top > $list.height() - thumb.outerHeight())) {
          $list.stop().animate({
            scrollTop: $list.scrollTop() + thumbPos.top
          }, duration);
        } else if (self.opts.axis === "x" && (thumbPos.left < $grid.scrollLeft() || thumbPos.left > $grid.scrollLeft() + ($grid.width() - thumb.outerWidth()))) {
          $list.parent().stop().animate({
            scrollLeft: thumbPos.left
          }, duration);
        }
      },
      update: function update() {
        var that = this;
        that.instance.$refs.container.toggleClass("fancybox-show-thumbs", this.isVisible);

        if (that.isVisible) {
          if (!that.$grid) {
            that.create();
          }

          that.instance.trigger("onThumbsShow");
          that.focus(0);
        } else if (that.$grid) {
          that.instance.trigger("onThumbsHide");
        } // Update content position


        that.instance.update();
      },
      hide: function hide() {
        this.isVisible = false;
        this.update();
      },
      show: function show() {
        this.isVisible = true;
        this.update();
      },
      toggle: function toggle() {
        this.isVisible = !this.isVisible;
        this.update();
      }
    });
    $(document).on({
      "onInit.fb": function onInitFb(e, instance) {
        var Thumbs;

        if (instance && !instance.Thumbs) {
          Thumbs = new FancyThumbs(instance);

          if (Thumbs.isActive && Thumbs.opts.autoStart === true) {
            Thumbs.show();
          }
        }
      },
      "beforeShow.fb": function beforeShowFb(e, instance, item, firstRun) {
        var Thumbs = instance && instance.Thumbs;

        if (Thumbs && Thumbs.isVisible) {
          Thumbs.focus(firstRun ? 0 : 250);
        }
      },
      "afterKeydown.fb": function afterKeydownFb(e, instance, current, keypress, keycode) {
        var Thumbs = instance && instance.Thumbs; // "G"

        if (Thumbs && Thumbs.isActive && keycode === 71) {
          keypress.preventDefault();
          Thumbs.toggle();
        }
      },
      "beforeClose.fb": function beforeCloseFb(e, instance) {
        var Thumbs = instance && instance.Thumbs;

        if (Thumbs && Thumbs.isVisible && Thumbs.opts.hideOnClose !== false) {
          Thumbs.$grid.hide();
        }
      }
    });
  })(document, jQuery); //// ==========================================================================
  //
  // Share
  // Displays simple form for sharing current url
  //
  // ==========================================================================


  (function (document, $) {

    $.extend(true, $.fancybox.defaults, {
      btnTpl: {
        share: '<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}">' + '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg>' + "</button>"
      },
      share: {
        url: function url(instance, item) {
          return (!instance.currentHash && !(item.type === "inline" || item.type === "html") ? item.origSrc || item.src : false) || window.location;
        },
        tpl: '<div class="fancybox-share">' + "<h1>{{SHARE}}</h1>" + "<p>" + '<a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}">' + '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg>' + "<span>Facebook</span>" + "</a>" + '<a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}">' + '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg>' + "<span>Twitter</span>" + "</a>" + '<a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}">' + '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg>' + "<span>Pinterest</span>" + "</a>" + "</p>" + '<p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p>' + "</div>"
      }
    });

    function escapeHtml(string) {
      var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;",
        "`": "&#x60;",
        "=": "&#x3D;"
      };
      return String(string).replace(/[&<>"'`=\/]/g, function (s) {
        return entityMap[s];
      });
    }

    $(document).on("click", "[data-fancybox-share]", function () {
      var instance = $.fancybox.getInstance(),
          current = instance.current || null,
          url,
          tpl;

      if (!current) {
        return;
      }

      if ($.type(current.opts.share.url) === "function") {
        url = current.opts.share.url.apply(current, [instance, current]);
      }

      tpl = current.opts.share.tpl.replace(/\{\{media\}\}/g, current.type === "image" ? encodeURIComponent(current.src) : "").replace(/\{\{url\}\}/g, encodeURIComponent(url)).replace(/\{\{url_raw\}\}/g, escapeHtml(url)).replace(/\{\{descr\}\}/g, instance.$caption ? encodeURIComponent(instance.$caption.text()) : "");
      $.fancybox.open({
        src: instance.translate(instance, tpl),
        type: "html",
        opts: {
          touch: false,
          animationEffect: false,
          afterLoad: function afterLoad(shareInstance, shareCurrent) {
            // Close self if parent instance is closing
            instance.$refs.container.one("beforeClose.fb", function () {
              shareInstance.close(null, 0);
            }); // Opening links in a popup window

            shareCurrent.$content.find(".fancybox-share__button").click(function () {
              window.open(this.href, "Share", "width=550, height=450");
              return false;
            });
          },
          mobile: {
            autoFocus: false
          }
        }
      });
    });
  })(document, jQuery); // ==========================================================================
  //
  // Hash
  // Enables linking to each modal
  //
  // ==========================================================================


  (function (window, document, $) {

    if (!$.escapeSelector) {
      $.escapeSelector = function (sel) {
        var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

        var fcssescape = function fcssescape(ch, asCodePoint) {
          if (asCodePoint) {
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if (ch === "\0") {
              return "\uFFFD";
            } // Control characters and (dependent upon position) numbers get escaped as code points


            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          } // Other potentially-special ASCII characters get backslash-escaped


          return "\\" + ch;
        };

        return (sel + "").replace(rcssescape, fcssescape);
      };
    } // Get info about gallery name and current index from url


    function parseUrl() {
      var hash = window.location.hash.substr(1),
          rez = hash.split("-"),
          index = rez.length > 1 && /^\+?\d+$/.test(rez[rez.length - 1]) ? parseInt(rez.pop(-1), 10) || 1 : 1,
          gallery = rez.join("-");
      return {
        hash: hash,

        /* Index is starting from 1 */
        index: index < 1 ? 1 : index,
        gallery: gallery
      };
    } // Trigger click evnt on links to open new fancyBox instance


    function triggerFromUrl(url) {
      if (url.gallery !== "") {
        // If we can find element matching 'data-fancybox' atribute,
        // then triggering click event should start fancyBox
        $("[data-fancybox='" + $.escapeSelector(url.gallery) + "']").eq(url.index - 1).focus().trigger("click.fb-start");
      }
    } // Get gallery name from current instance


    function getGalleryID(instance) {
      var opts, ret;

      if (!instance) {
        return false;
      }

      opts = instance.current ? instance.current.opts : instance.opts;
      ret = opts.hash || (opts.$orig ? opts.$orig.data("fancybox") || opts.$orig.data("fancybox-trigger") : "");
      return ret === "" ? false : ret;
    } // Start when DOM becomes ready


    $(function () {
      // Check if user has disabled this module
      if ($.fancybox.defaults.hash === false) {
        return;
      } // Update hash when opening/closing fancyBox


      $(document).on({
        "onInit.fb": function onInitFb(e, instance) {
          var url, gallery;

          if (instance.group[instance.currIndex].opts.hash === false) {
            return;
          }

          url = parseUrl();
          gallery = getGalleryID(instance); // Make sure gallery start index matches index from hash

          if (gallery && url.gallery && gallery == url.gallery) {
            instance.currIndex = url.index - 1;
          }
        },
        "beforeShow.fb": function beforeShowFb(e, instance, current, firstRun) {
          var gallery;

          if (!current || current.opts.hash === false) {
            return;
          } // Check if need to update window hash


          gallery = getGalleryID(instance);

          if (!gallery) {
            return;
          } // Variable containing last hash value set by fancyBox
          // It will be used to determine if fancyBox needs to close after hash change is detected


          instance.currentHash = gallery + (instance.group.length > 1 ? "-" + (current.index + 1) : ""); // If current hash is the same (this instance most likely is opened by hashchange), then do nothing

          if (window.location.hash === "#" + instance.currentHash) {
            return;
          }

          if (firstRun && !instance.origHash) {
            instance.origHash = window.location.hash;
          }

          if (instance.hashTimer) {
            clearTimeout(instance.hashTimer);
          } // Update hash


          instance.hashTimer = setTimeout(function () {
            if ("replaceState" in window.history) {
              window.history[firstRun ? "pushState" : "replaceState"]({}, document.title, window.location.pathname + window.location.search + "#" + instance.currentHash);

              if (firstRun) {
                instance.hasCreatedHistory = true;
              }
            } else {
              window.location.hash = instance.currentHash;
            }

            instance.hashTimer = null;
          }, 300);
        },
        "beforeClose.fb": function beforeCloseFb(e, instance, current) {
          if (!current || current.opts.hash === false) {
            return;
          }

          clearTimeout(instance.hashTimer); // Goto previous history entry

          if (instance.currentHash && instance.hasCreatedHistory) {
            window.history.back();
          } else if (instance.currentHash) {
            if ("replaceState" in window.history) {
              window.history.replaceState({}, document.title, window.location.pathname + window.location.search + (instance.origHash || ""));
            } else {
              window.location.hash = instance.origHash;
            }
          }

          instance.currentHash = null;
        }
      }); // Check if need to start/close after url has changed

      $(window).on("hashchange.fb", function () {
        var url = parseUrl(),
            fb = null; // Find last fancyBox instance that has "hash"

        $.each($(".fancybox-container").get().reverse(), function (index, value) {
          var tmp = $(value).data("FancyBox");

          if (tmp && tmp.currentHash) {
            fb = tmp;
            return false;
          }
        });

        if (fb) {
          // Now, compare hash values
          if (fb.currentHash !== url.gallery + "-" + url.index && !(url.index === 1 && fb.currentHash == url.gallery)) {
            fb.currentHash = null;
            fb.close();
          }
        } else if (url.gallery !== "") {
          triggerFromUrl(url);
        }
      }); // Check current hash and trigger click event on matching element to start fancyBox, if needed

      setTimeout(function () {
        if (!$.fancybox.getInstance()) {
          triggerFromUrl(parseUrl());
        }
      }, 50);
    });
  })(window, document, jQuery); // ==========================================================================
  //
  // Wheel
  // Basic mouse weheel support for gallery navigation
  //
  // ==========================================================================


  (function (document, $) {

    var prevTime = new Date().getTime();
    $(document).on({
      "onInit.fb": function onInitFb(e, instance, current) {
        instance.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll", function (e) {
          var current = instance.current,
              currTime = new Date().getTime();

          if (instance.group.length < 2 || current.opts.wheel === false || current.opts.wheel === "auto" && current.type !== "image") {
            return;
          }

          e.preventDefault();
          e.stopPropagation();

          if (current.$slide.hasClass("fancybox-animated")) {
            return;
          }

          e = e.originalEvent || e;

          if (currTime - prevTime < 250) {
            return;
          }

          prevTime = currTime;
          instance[(-e.deltaY || -e.deltaX || e.wheelDelta || -e.detail) < 0 ? "next" : "previous"]();
        });
      }
    });
  })(document, jQuery);

}());

//# sourceMappingURL=vendor.js.map
